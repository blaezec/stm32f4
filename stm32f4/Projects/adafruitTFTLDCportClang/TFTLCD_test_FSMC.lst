
TFTLCD_test_FSMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d0  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000038  20000000  08003658  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000040  20000038  08003690  00010038  2**2
                  ALLOC
  4 ._user_heap_stack 00000400  20000078  080036d0  00010038  2**0
                  ALLOC
  5 .ARM.attributes 0000002f  00000000  00000000  00010038  2**0
                  CONTENTS, READONLY
  6 .debug_info   00003359  00000000  00000000  00010067  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b18  00000000  00000000  000133c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000269e  00000000  00000000  00013ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000f0  00000000  00000000  00016578  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002f8  00000000  00000000  00016668  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000117a  00000000  00000000  00016960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000013d2  00000000  00000000  00017ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000037  00000000  00000000  00018eac  2**0
                  CONTENTS, READONLY
 14 .debug_frame  000008c4  00000000  00000000  00018ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <Fail_Handler>:
* @brief  This function handles the test program fail.
* @param  None
* @retval None
*/
void Fail_Handler(void)
{
 8000188:	b508      	push	{r3, lr}
  //   FLASH_ProgramWord(TESTRESULT_ADDRESS, ALLTEST_FAIL);

    while(1)
    {
    /* Toggle Red LED */
        STM_EVAL_LEDToggle(LED5);
 800018a:	2002      	movs	r0, #2
 800018c:	f001 fdf6 	bl	8001d7c <STM_EVAL_LEDToggle>
        delayMillis(50);
 8000190:	2032      	movs	r0, #50	; 0x32
 8000192:	f000 fec1 	bl	8000f18 <delayMillis>
 8000196:	e7f8      	b.n	800018a <Fail_Handler+0x2>

08000198 <testFillRoundRect>:

/*
* graphicstest from adafruit
*/
    void testFillRoundRect()
{
 8000198:	b5f0      	push	{r4, r5, r6, r7, lr}
    fillScreen(BLACK);
 800019a:	2000      	movs	r0, #0

/*
* graphicstest from adafruit
*/
    void testFillRoundRect()
{
 800019c:	b083      	sub	sp, #12
    fillScreen(BLACK);
 800019e:	f001 fcef 	bl	8001b80 <fillScreen>
    uint16_t x;
    for (x=width(); x > 20 ; x-=6)
 80001a2:	f000 ff03 	bl	8000fac <width>
 80001a6:	2814      	cmp	r0, #20
 80001a8:	4604      	mov	r4, r0
 80001aa:	d920      	bls.n	80001ee <testFillRoundRect+0x56>
    {
        fillRoundRect(width()/2 -x/2, height()/2 -x/2 , x, x, x/8,  Color565(0, x, 0));
 80001ac:	f000 fefe 	bl	8000fac <width>
 80001b0:	f3c4 054f 	ubfx	r5, r4, #1, #16
 80001b4:	ebc5 0650 	rsb	r6, r5, r0, lsr #1
 80001b8:	f000 fefe 	bl	8000fb8 <height>
 80001bc:	2200      	movs	r2, #0
 80001be:	b2e1      	uxtb	r1, r4
 80001c0:	ebc5 0550 	rsb	r5, r5, r0, lsr #1
 80001c4:	4610      	mov	r0, r2
 80001c6:	f000 fefd 	bl	8000fc4 <Color565>
 80001ca:	b2b6      	uxth	r6, r6
 80001cc:	f3c4 0ecf 	ubfx	lr, r4, #3, #16
 80001d0:	4622      	mov	r2, r4
 80001d2:	4623      	mov	r3, r4
 80001d4:	b2ad      	uxth	r5, r5
*/
    void testFillRoundRect()
{
    fillScreen(BLACK);
    uint16_t x;
    for (x=width(); x > 20 ; x-=6)
 80001d6:	3c06      	subs	r4, #6
    {
        fillRoundRect(width()/2 -x/2, height()/2 -x/2 , x, x, x/8,  Color565(0, x, 0));
 80001d8:	4607      	mov	r7, r0
 80001da:	4629      	mov	r1, r5
 80001dc:	4630      	mov	r0, r6
*/
    void testFillRoundRect()
{
    fillScreen(BLACK);
    uint16_t x;
    for (x=width(); x > 20 ; x-=6)
 80001de:	b2a4      	uxth	r4, r4
    {
        fillRoundRect(width()/2 -x/2, height()/2 -x/2 , x, x, x/8,  Color565(0, x, 0));
 80001e0:	f8cd e000 	str.w	lr, [sp]
 80001e4:	9701      	str	r7, [sp, #4]
 80001e6:	f001 fbcf 	bl	8001988 <fillRoundRect>
*/
    void testFillRoundRect()
{
    fillScreen(BLACK);
    uint16_t x;
    for (x=width(); x > 20 ; x-=6)
 80001ea:	2c14      	cmp	r4, #20
 80001ec:	d8de      	bhi.n	80001ac <testFillRoundRect+0x14>
    {
        fillRoundRect(width()/2 -x/2, height()/2 -x/2 , x, x, x/8,  Color565(0, x, 0));
    }
}
 80001ee:	b003      	add	sp, #12
 80001f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80001f2:	bf00      	nop

080001f4 <testRoundRect>:

void testRoundRect()
{
 80001f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    fillScreen(BLACK);
 80001f6:	2000      	movs	r0, #0
        fillRoundRect(width()/2 -x/2, height()/2 -x/2 , x, x, x/8,  Color565(0, x, 0));
    }
}

void testRoundRect()
{
 80001f8:	b083      	sub	sp, #12
    fillScreen(BLACK);
 80001fa:	f001 fcc1 	bl	8001b80 <fillScreen>
    uint16_t x;
    for (x=0; x < width(); x+=6)
 80001fe:	2400      	movs	r4, #0
 8000200:	e01c      	b.n	800023c <testRoundRect+0x48>
    {
        drawRoundRect(width()/2 -x/2, height()/2 -x/2 , x, x, x/8, Color565(x, 0, 0));
 8000202:	f000 fed3 	bl	8000fac <width>
 8000206:	ebc5 0650 	rsb	r6, r5, r0, lsr #1
 800020a:	f000 fed5 	bl	8000fb8 <height>
 800020e:	2100      	movs	r1, #0
 8000210:	460a      	mov	r2, r1
 8000212:	ebc5 0550 	rsb	r5, r5, r0, lsr #1
 8000216:	b2e0      	uxtb	r0, r4
 8000218:	f000 fed4 	bl	8000fc4 <Color565>
 800021c:	b2b6      	uxth	r6, r6
 800021e:	b2ad      	uxth	r5, r5
 8000220:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000224:	4607      	mov	r7, r0
 8000226:	4622      	mov	r2, r4
 8000228:	4623      	mov	r3, r4
 800022a:	4630      	mov	r0, r6
 800022c:	4629      	mov	r1, r5
 800022e:	f8cd e000 	str.w	lr, [sp]
 8000232:	9701      	str	r7, [sp, #4]
 8000234:	f001 fbe2 	bl	80019fc <drawRoundRect>

void testRoundRect()
{
    fillScreen(BLACK);
    uint16_t x;
    for (x=0; x < width(); x+=6)
 8000238:	3406      	adds	r4, #6
 800023a:	b2a4      	uxth	r4, r4
 800023c:	f000 feb6 	bl	8000fac <width>
    {
        drawRoundRect(width()/2 -x/2, height()/2 -x/2 , x, x, x/8, Color565(x, 0, 0));
 8000240:	0865      	lsrs	r5, r4, #1

void testRoundRect()
{
    fillScreen(BLACK);
    uint16_t x;
    for (x=0; x < width(); x+=6)
 8000242:	4284      	cmp	r4, r0
 8000244:	d3dd      	bcc.n	8000202 <testRoundRect+0xe>
    {
        drawRoundRect(width()/2 -x/2, height()/2 -x/2 , x, x, x/8, Color565(x, 0, 0));
    }
}
 8000246:	b003      	add	sp, #12
 8000248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800024a:	bf00      	nop

0800024c <testtriangles>:

void testtriangles()
{
 800024c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fillScreen(BLACK);
 8000250:	2000      	movs	r0, #0
        drawRoundRect(width()/2 -x/2, height()/2 -x/2 , x, x, x/8, Color565(x, 0, 0));
    }
}

void testtriangles()
{
 8000252:	b085      	sub	sp, #20
    fillScreen(BLACK);
 8000254:	f001 fc94 	bl	8001b80 <fillScreen>
    uint16_t i;
    for (i=0; i<width()/2; i+=5)
 8000258:	2400      	movs	r4, #0
 800025a:	e030      	b.n	80002be <testtriangles+0x72>
    {
        drawTriangle(width()/2, height()/2-i,
 800025c:	f000 fea6 	bl	8000fac <width>
 8000260:	4681      	mov	r9, r0
 8000262:	f000 fea9 	bl	8000fb8 <height>
 8000266:	ebc4 0850 	rsb	r8, r4, r0, lsr #1
            width()/2-i, height()/2+i,
 800026a:	f000 fe9f 	bl	8000fac <width>
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=0; i<width()/2; i+=5)
    {
        drawTriangle(width()/2, height()/2-i,
 800026e:	ebc4 0750 	rsb	r7, r4, r0, lsr #1
            width()/2-i, height()/2+i,
 8000272:	f000 fea1 	bl	8000fb8 <height>
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=0; i<width()/2; i+=5)
    {
        drawTriangle(width()/2, height()/2-i,
 8000276:	eb04 0650 	add.w	r6, r4, r0, lsr #1
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, Color565(0, 0, i));
 800027a:	f000 fe97 	bl	8000fac <width>
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=0; i<width()/2; i+=5)
    {
        drawTriangle(width()/2, height()/2-i,
 800027e:	eb04 0a50 	add.w	sl, r4, r0, lsr #1
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, Color565(0, 0, i));
 8000282:	f000 fe99 	bl	8000fb8 <height>
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=0; i<width()/2; i+=5)
    {
        drawTriangle(width()/2, height()/2-i,
 8000286:	2100      	movs	r1, #0
 8000288:	b2e2      	uxtb	r2, r4
 800028a:	eb04 0b50 	add.w	fp, r4, r0, lsr #1
 800028e:	4608      	mov	r0, r1
 8000290:	f000 fe98 	bl	8000fc4 <Color565>
 8000294:	fa1f f888 	uxth.w	r8, r8
 8000298:	b2bf      	uxth	r7, r7
 800029a:	b2b6      	uxth	r6, r6
 800029c:	4605      	mov	r5, r0
 800029e:	fa1f fa8a 	uxth.w	sl, sl
 80002a2:	fa1f fb8b 	uxth.w	fp, fp
 80002a6:	f3c9 004f 	ubfx	r0, r9, #1, #16
 80002aa:	4641      	mov	r1, r8
 80002ac:	463a      	mov	r2, r7
 80002ae:	4633      	mov	r3, r6
 80002b0:	e88d 0c00 	stmia.w	sp, {sl, fp}
 80002b4:	9502      	str	r5, [sp, #8]
 80002b6:	f001 f869 	bl	800138c <drawTriangle>

void testtriangles()
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=0; i<width()/2; i+=5)
 80002ba:	3405      	adds	r4, #5
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	f000 fe75 	bl	8000fac <width>
 80002c2:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80002c6:	4284      	cmp	r4, r0
 80002c8:	d3c8      	bcc.n	800025c <testtriangles+0x10>
    {
        drawTriangle(width()/2, height()/2-i,
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, Color565(0, 0, i));
    }
}
 80002ca:	b005      	add	sp, #20
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <testfilltriangles>:

void testfilltriangles()
{
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fillScreen(BLACK);
 80002d4:	2000      	movs	r0, #0
            width()/2+i, height()/2+i, Color565(0, 0, i));
    }
}

void testfilltriangles()
{
 80002d6:	b087      	sub	sp, #28
    fillScreen(BLACK);
 80002d8:	f001 fc52 	bl	8001b80 <fillScreen>
    uint16_t i;
    for (i=width()/2; i>10; i-=5)
 80002dc:	f000 fe66 	bl	8000fac <width>
 80002e0:	f3c0 044f 	ubfx	r4, r0, #1, #16
 80002e4:	2c0a      	cmp	r4, #10
 80002e6:	d966      	bls.n	80003b6 <testfilltriangles+0xe6>
    {
        fillTriangle(width()/2, height()/2-i,
 80002e8:	f000 fe60 	bl	8000fac <width>
 80002ec:	4681      	mov	r9, r0
 80002ee:	f000 fe63 	bl	8000fb8 <height>
 80002f2:	f3c0 064f 	ubfx	r6, r0, #1, #16
            width()/2-i, height()/2+i,
 80002f6:	f000 fe59 	bl	8000fac <width>
 80002fa:	f3c0 0a4f 	ubfx	sl, r0, #1, #16
 80002fe:	f000 fe5b 	bl	8000fb8 <height>
 8000302:	f3c0 084f 	ubfx	r8, r0, #1, #16
            width()/2+i, height()/2+i, 
 8000306:	f000 fe51 	bl	8000fac <width>
 800030a:	f3c0 0b4f 	ubfx	fp, r0, #1, #16
 800030e:	f000 fe53 	bl	8000fb8 <height>
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=width()/2; i>10; i-=5)
    {
        fillTriangle(width()/2, height()/2-i,
 8000312:	b2e5      	uxtb	r5, r4
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, 
 8000314:	f3c0 034f 	ubfx	r3, r0, #1, #16
 8000318:	18e3      	adds	r3, r4, r3
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=width()/2; i>10; i-=5)
    {
        fillTriangle(width()/2, height()/2-i,
 800031a:	4629      	mov	r1, r5
 800031c:	462a      	mov	r2, r5
 800031e:	2000      	movs	r0, #0
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, 
 8000320:	9305      	str	r3, [sp, #20]
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=width()/2; i>10; i-=5)
    {
        fillTriangle(width()/2, height()/2-i,
 8000322:	f000 fe4f 	bl	8000fc4 <Color565>
 8000326:	1b36      	subs	r6, r6, r4
 8000328:	4631      	mov	r1, r6
            width()/2-i, height()/2+i,
 800032a:	ebc4 0a0a 	rsb	sl, r4, sl
 800032e:	44a0      	add	r8, r4
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=width()/2; i>10; i-=5)
    {
        fillTriangle(width()/2, height()/2-i,
 8000330:	9e05      	ldr	r6, [sp, #20]
 8000332:	4643      	mov	r3, r8
 8000334:	4652      	mov	r2, sl
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, 
 8000336:	44a3      	add	fp, r4
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=width()/2; i>10; i-=5)
    {
        fillTriangle(width()/2, height()/2-i,
 8000338:	4607      	mov	r7, r0
 800033a:	f3c9 004f 	ubfx	r0, r9, #1, #16
 800033e:	f8cd b000 	str.w	fp, [sp]
 8000342:	9601      	str	r6, [sp, #4]
 8000344:	9702      	str	r7, [sp, #8]
 8000346:	f001 f97d 	bl	8001644 <fillTriangle>
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, 
            Color565(0, i, i));
        drawTriangle(width()/2, height()/2-i,
 800034a:	f000 fe2f 	bl	8000fac <width>
 800034e:	4681      	mov	r9, r0
 8000350:	f000 fe32 	bl	8000fb8 <height>
 8000354:	ebc4 0850 	rsb	r8, r4, r0, lsr #1
            width()/2-i, height()/2+i,
 8000358:	f000 fe28 	bl	8000fac <width>
    {
        fillTriangle(width()/2, height()/2-i,
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, 
            Color565(0, i, i));
        drawTriangle(width()/2, height()/2-i,
 800035c:	ebc4 0750 	rsb	r7, r4, r0, lsr #1
            width()/2-i, height()/2+i,
 8000360:	f000 fe2a 	bl	8000fb8 <height>
    {
        fillTriangle(width()/2, height()/2-i,
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, 
            Color565(0, i, i));
        drawTriangle(width()/2, height()/2-i,
 8000364:	eb04 0650 	add.w	r6, r4, r0, lsr #1
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, Color565(i, i, 0));    
 8000368:	f000 fe20 	bl	8000fac <width>
    {
        fillTriangle(width()/2, height()/2-i,
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, 
            Color565(0, i, i));
        drawTriangle(width()/2, height()/2-i,
 800036c:	eb04 0b50 	add.w	fp, r4, r0, lsr #1
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, Color565(i, i, 0));    
 8000370:	f000 fe22 	bl	8000fb8 <height>
    {
        fillTriangle(width()/2, height()/2-i,
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, 
            Color565(0, i, i));
        drawTriangle(width()/2, height()/2-i,
 8000374:	4629      	mov	r1, r5
 8000376:	2200      	movs	r2, #0
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, Color565(i, i, 0));    
 8000378:	4682      	mov	sl, r0
    {
        fillTriangle(width()/2, height()/2-i,
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, 
            Color565(0, i, i));
        drawTriangle(width()/2, height()/2-i,
 800037a:	4628      	mov	r0, r5
 800037c:	f000 fe22 	bl	8000fc4 <Color565>
 8000380:	eb04 0a5a 	add.w	sl, r4, sl, lsr #1
 8000384:	fa1f f888 	uxth.w	r8, r8

void testfilltriangles()
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=width()/2; i>10; i-=5)
 8000388:	3c05      	subs	r4, #5
    {
        fillTriangle(width()/2, height()/2-i,
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, 
            Color565(0, i, i));
        drawTriangle(width()/2, height()/2-i,
 800038a:	b2bf      	uxth	r7, r7
 800038c:	b2b6      	uxth	r6, r6
 800038e:	4605      	mov	r5, r0
 8000390:	fa1f fb8b 	uxth.w	fp, fp
 8000394:	fa1f fa8a 	uxth.w	sl, sl
 8000398:	f3c9 004f 	ubfx	r0, r9, #1, #16
 800039c:	4641      	mov	r1, r8
 800039e:	463a      	mov	r2, r7
 80003a0:	4633      	mov	r3, r6

void testfilltriangles()
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=width()/2; i>10; i-=5)
 80003a2:	b2a4      	uxth	r4, r4
    {
        fillTriangle(width()/2, height()/2-i,
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, 
            Color565(0, i, i));
        drawTriangle(width()/2, height()/2-i,
 80003a4:	f8cd b000 	str.w	fp, [sp]
 80003a8:	f8cd a004 	str.w	sl, [sp, #4]
 80003ac:	9502      	str	r5, [sp, #8]
 80003ae:	f000 ffed 	bl	800138c <drawTriangle>

void testfilltriangles()
{
    fillScreen(BLACK);
    uint16_t i;
    for (i=width()/2; i>10; i-=5)
 80003b2:	2c0a      	cmp	r4, #10
 80003b4:	d898      	bhi.n	80002e8 <testfilltriangles+0x18>
            Color565(0, i, i));
        drawTriangle(width()/2, height()/2-i,
            width()/2-i, height()/2+i,
            width()/2+i, height()/2+i, Color565(i, i, 0));    
    }
}
 80003b6:	b007      	add	sp, #28
 80003b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003bc <testtext>:
void testtext(uint16_t color)
{
 80003bc:	b510      	push	{r4, lr}
 80003be:	4604      	mov	r4, r0
    fillScreen(BLACK);
 80003c0:	2000      	movs	r0, #0
 80003c2:	f001 fbdd 	bl	8001b80 <fillScreen>
    setCursor(0, 20);
 80003c6:	2114      	movs	r1, #20
 80003c8:	2000      	movs	r0, #0
 80003ca:	f000 fdd7 	bl	8000f7c <setCursor>
    setTextColor(color);
 80003ce:	4620      	mov	r0, r4
 80003d0:	f000 fde6 	bl	8000fa0 <setTextColor>
    setTextSize(1);
 80003d4:	2001      	movs	r0, #1
 80003d6:	f000 fddd 	bl	8000f94 <setTextSize>
    // write('A');
    printf("Hello World!\n");
 80003da:	f243 50d0 	movw	r0, #13776	; 0x35d0
 80003de:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003e2:	f000 fc59 	bl	8000c98 <tfp_printf>
    setTextSize(2);
 80003e6:	2002      	movs	r0, #2
 80003e8:	f000 fdd4 	bl	8000f94 <setTextSize>
    printf("1234.56\n");
 80003ec:	f243 50e0 	movw	r0, #13792	; 0x35e0
 80003f0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003f4:	f000 fc50 	bl	8000c98 <tfp_printf>
    setTextSize(3);
 80003f8:	2003      	movs	r0, #3
 80003fa:	f000 fdcb 	bl	8000f94 <setTextSize>
    printf("0x%X\n",0xDEADBEEF);
 80003fe:	f243 50ec 	movw	r0, #13804	; 0x35ec
 8000402:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 8000406:	f6cd 61ad 	movt	r1, #57005	; 0xdead
 800040a:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 800040e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // write('A');
    printf("Hello World!\n");
    setTextSize(2);
    printf("1234.56\n");
    setTextSize(3);
    printf("0x%X\n",0xDEADBEEF);
 8000412:	f000 bc41 	b.w	8000c98 <tfp_printf>
 8000416:	bf00      	nop

08000418 <testfillcircles>:
}


// }
void testfillcircles(uint8_t radius, uint16_t color) 
{
 8000418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t x,y;
    for (x=radius; x < width(); x+=radius*2) 
 800041c:	0047      	lsls	r7, r0, #1
 800041e:	4605      	mov	r5, r0
}


// }
void testfillcircles(uint8_t radius, uint16_t color) 
{
 8000420:	4606      	mov	r6, r0
 8000422:	4688      	mov	r8, r1
    uint16_t x,y;
    for (x=radius; x < width(); x+=radius*2) 
 8000424:	f000 fdc2 	bl	8000fac <width>
 8000428:	4285      	cmp	r5, r0
 800042a:	d213      	bcs.n	8000454 <testfillcircles+0x3c>
 800042c:	4634      	mov	r4, r6
 800042e:	e007      	b.n	8000440 <testfillcircles+0x28>
    {
        for (y=radius; y < height(); y+=radius*2)
        {
            fillCircle(x, y, radius, color);
 8000430:	4621      	mov	r1, r4
 8000432:	4628      	mov	r0, r5
 8000434:	4632      	mov	r2, r6
 8000436:	4643      	mov	r3, r8
 8000438:	f001 fb68 	bl	8001b0c <fillCircle>
void testfillcircles(uint8_t radius, uint16_t color) 
{
    uint16_t x,y;
    for (x=radius; x < width(); x+=radius*2) 
    {
        for (y=radius; y < height(); y+=radius*2)
 800043c:	19e4      	adds	r4, r4, r7
 800043e:	b2a4      	uxth	r4, r4
 8000440:	f000 fdba 	bl	8000fb8 <height>
 8000444:	4284      	cmp	r4, r0
 8000446:	d3f3      	bcc.n	8000430 <testfillcircles+0x18>

// }
void testfillcircles(uint8_t radius, uint16_t color) 
{
    uint16_t x,y;
    for (x=radius; x < width(); x+=radius*2) 
 8000448:	f000 fdb0 	bl	8000fac <width>
 800044c:	19ed      	adds	r5, r5, r7
 800044e:	b2ad      	uxth	r5, r5
 8000450:	4285      	cmp	r5, r0
 8000452:	d3eb      	bcc.n	800042c <testfillcircles+0x14>
 8000454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000458 <testdrawcircles>:
            fillCircle(x, y, radius, color);
        }
    }  
}
void testdrawcircles(uint8_t radius, uint16_t color)
{
 8000458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800045c:	4605      	mov	r5, r0
    uint16_t x,y;
    for ( x=0; x < width()+radius; x+=radius*2)
 800045e:	0047      	lsls	r7, r0, #1
            fillCircle(x, y, radius, color);
        }
    }  
}
void testdrawcircles(uint8_t radius, uint16_t color)
{
 8000460:	4688      	mov	r8, r1
    uint16_t x,y;
    for ( x=0; x < width()+radius; x+=radius*2)
 8000462:	f000 fda3 	bl	8000fac <width>
 8000466:	2600      	movs	r6, #0
 8000468:	1940      	adds	r0, r0, r5
 800046a:	4286      	cmp	r6, r0
 800046c:	da15      	bge.n	800049a <testdrawcircles+0x42>
 800046e:	2400      	movs	r4, #0
 8000470:	e007      	b.n	8000482 <testdrawcircles+0x2a>
    {
        for ( y=0; y < height()+radius; y+=radius*2)
        {
            drawCircle(x, y, radius, color);
 8000472:	4621      	mov	r1, r4
 8000474:	4630      	mov	r0, r6
 8000476:	462a      	mov	r2, r5
 8000478:	4643      	mov	r3, r8
 800047a:	f000 fef1 	bl	8001260 <drawCircle>
void testdrawcircles(uint8_t radius, uint16_t color)
{
    uint16_t x,y;
    for ( x=0; x < width()+radius; x+=radius*2)
    {
        for ( y=0; y < height()+radius; y+=radius*2)
 800047e:	19e4      	adds	r4, r4, r7
 8000480:	b2a4      	uxth	r4, r4
 8000482:	f000 fd99 	bl	8000fb8 <height>
 8000486:	1940      	adds	r0, r0, r5
 8000488:	4284      	cmp	r4, r0
 800048a:	dbf2      	blt.n	8000472 <testdrawcircles+0x1a>
    }  
}
void testdrawcircles(uint8_t radius, uint16_t color)
{
    uint16_t x,y;
    for ( x=0; x < width()+radius; x+=radius*2)
 800048c:	f000 fd8e 	bl	8000fac <width>
 8000490:	19f6      	adds	r6, r6, r7
 8000492:	b2b6      	uxth	r6, r6
 8000494:	1940      	adds	r0, r0, r5
 8000496:	4286      	cmp	r6, r0
 8000498:	dbe9      	blt.n	800046e <testdrawcircles+0x16>
        for ( y=0; y < height()+radius; y+=radius*2)
        {
            drawCircle(x, y, radius, color);
        }
    }  
}
 800049a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800049e:	bf00      	nop

080004a0 <testfillrects>:


void testfillrects(uint16_t color1, uint16_t color2)
{
 80004a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004a4:	4607      	mov	r7, r0
 80004a6:	b082      	sub	sp, #8
    uint16_t x;
    fillScreen(BLACK);
 80004a8:	2000      	movs	r0, #0
    }  
}


void testfillrects(uint16_t color1, uint16_t color2)
{
 80004aa:	4688      	mov	r8, r1
    uint16_t x;
    fillScreen(BLACK);
 80004ac:	f001 fb68 	bl	8001b80 <fillScreen>
    for ( x=width()-1; x > 6; x-=6)
 80004b0:	f000 fd7c 	bl	8000fac <width>
 80004b4:	1e44      	subs	r4, r0, #1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	2c06      	cmp	r4, #6
 80004ba:	d925      	bls.n	8000508 <testfillrects+0x68>
    {
        fillRect(width()/2 -x/2, height()/2 -x/2 , x, x, color1);
 80004bc:	f000 fd76 	bl	8000fac <width>
 80004c0:	0865      	lsrs	r5, r4, #1
 80004c2:	ebc5 0650 	rsb	r6, r5, r0, lsr #1
 80004c6:	f000 fd77 	bl	8000fb8 <height>
 80004ca:	b2b6      	uxth	r6, r6
 80004cc:	ebc5 0150 	rsb	r1, r5, r0, lsr #1
 80004d0:	4622      	mov	r2, r4
 80004d2:	4623      	mov	r3, r4
 80004d4:	b289      	uxth	r1, r1
 80004d6:	4630      	mov	r0, r6
 80004d8:	9700      	str	r7, [sp, #0]
 80004da:	f001 f801 	bl	80014e0 <fillRect>
        drawRect(width()/2 -x/2, height()/2 -x/2 , x, x, color2);
 80004de:	f000 fd65 	bl	8000fac <width>
 80004e2:	ebc5 0650 	rsb	r6, r5, r0, lsr #1
 80004e6:	f000 fd67 	bl	8000fb8 <height>
 80004ea:	b2b6      	uxth	r6, r6
 80004ec:	ebc5 0550 	rsb	r5, r5, r0, lsr #1
 80004f0:	4622      	mov	r2, r4
 80004f2:	4623      	mov	r3, r4

void testfillrects(uint16_t color1, uint16_t color2)
{
    uint16_t x;
    fillScreen(BLACK);
    for ( x=width()-1; x > 6; x-=6)
 80004f4:	3c06      	subs	r4, #6
    {
        fillRect(width()/2 -x/2, height()/2 -x/2 , x, x, color1);
        drawRect(width()/2 -x/2, height()/2 -x/2 , x, x, color2);
 80004f6:	b2a9      	uxth	r1, r5
 80004f8:	4630      	mov	r0, r6

void testfillrects(uint16_t color1, uint16_t color2)
{
    uint16_t x;
    fillScreen(BLACK);
    for ( x=width()-1; x > 6; x-=6)
 80004fa:	b2a4      	uxth	r4, r4
    {
        fillRect(width()/2 -x/2, height()/2 -x/2 , x, x, color1);
        drawRect(width()/2 -x/2, height()/2 -x/2 , x, x, color2);
 80004fc:	f8cd 8000 	str.w	r8, [sp]
 8000500:	f001 fae0 	bl	8001ac4 <drawRect>

void testfillrects(uint16_t color1, uint16_t color2)
{
    uint16_t x;
    fillScreen(BLACK);
    for ( x=width()-1; x > 6; x-=6)
 8000504:	2c06      	cmp	r4, #6
 8000506:	d8d9      	bhi.n	80004bc <testfillrects+0x1c>
    {
        fillRect(width()/2 -x/2, height()/2 -x/2 , x, x, color1);
        drawRect(width()/2 -x/2, height()/2 -x/2 , x, x, color2);
    }
}
 8000508:	b002      	add	sp, #8
 800050a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800050e:	bf00      	nop

08000510 <testdrawrects>:

void testdrawrects(uint16_t color)
{
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	4605      	mov	r5, r0
 8000514:	b083      	sub	sp, #12
    uint16_t x;
    fillScreen(BLACK);
 8000516:	2000      	movs	r0, #0
 8000518:	f001 fb32 	bl	8001b80 <fillScreen>
    for ( x=0; x < width(); x+=6)
 800051c:	2400      	movs	r4, #0
 800051e:	e011      	b.n	8000544 <testdrawrects+0x34>
    {
        drawRect(width()/2 -x/2, height()/2 -x/2 , x, x, color);
 8000520:	f000 fd44 	bl	8000fac <width>
 8000524:	ebc7 0650 	rsb	r6, r7, r0, lsr #1
 8000528:	f000 fd46 	bl	8000fb8 <height>
 800052c:	b2b6      	uxth	r6, r6
 800052e:	ebc7 0150 	rsb	r1, r7, r0, lsr #1
 8000532:	4622      	mov	r2, r4
 8000534:	4623      	mov	r3, r4
 8000536:	b289      	uxth	r1, r1
 8000538:	4630      	mov	r0, r6
 800053a:	9500      	str	r5, [sp, #0]
 800053c:	f001 fac2 	bl	8001ac4 <drawRect>

void testdrawrects(uint16_t color)
{
    uint16_t x;
    fillScreen(BLACK);
    for ( x=0; x < width(); x+=6)
 8000540:	3406      	adds	r4, #6
 8000542:	b2a4      	uxth	r4, r4
 8000544:	f000 fd32 	bl	8000fac <width>
    {
        drawRect(width()/2 -x/2, height()/2 -x/2 , x, x, color);
 8000548:	0867      	lsrs	r7, r4, #1

void testdrawrects(uint16_t color)
{
    uint16_t x;
    fillScreen(BLACK);
    for ( x=0; x < width(); x+=6)
 800054a:	4284      	cmp	r4, r0
 800054c:	d3e8      	bcc.n	8000520 <testdrawrects+0x10>
    {
        drawRect(width()/2 -x/2, height()/2 -x/2 , x, x, color);
    }
}
 800054e:	b003      	add	sp, #12
 8000550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000552:	bf00      	nop

08000554 <testfastlines>:

void testfastlines(uint16_t color1, uint16_t color2)
{
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	4606      	mov	r6, r0
    uint16_t x,y;
    fillScreen(BLACK);
 8000558:	2000      	movs	r0, #0
        drawRect(width()/2 -x/2, height()/2 -x/2 , x, x, color);
    }
}

void testfastlines(uint16_t color1, uint16_t color2)
{
 800055a:	460d      	mov	r5, r1
    uint16_t x,y;
    fillScreen(BLACK);
    for ( y=0; y < height(); y+=5)
 800055c:	4604      	mov	r4, r0
}

void testfastlines(uint16_t color1, uint16_t color2)
{
    uint16_t x,y;
    fillScreen(BLACK);
 800055e:	f001 fb0f 	bl	8001b80 <fillScreen>
    for ( y=0; y < height(); y+=5)
 8000562:	e009      	b.n	8000578 <testfastlines+0x24>
    {
        drawHorizontalLine(0, y, width(), color1);
 8000564:	f000 fd22 	bl	8000fac <width>
 8000568:	4621      	mov	r1, r4
 800056a:	4602      	mov	r2, r0
 800056c:	4633      	mov	r3, r6
 800056e:	2000      	movs	r0, #0
 8000570:	f000 ffa8 	bl	80014c4 <drawHorizontalLine>

void testfastlines(uint16_t color1, uint16_t color2)
{
    uint16_t x,y;
    fillScreen(BLACK);
    for ( y=0; y < height(); y+=5)
 8000574:	3405      	adds	r4, #5
 8000576:	b2a4      	uxth	r4, r4
 8000578:	f000 fd1e 	bl	8000fb8 <height>
 800057c:	4284      	cmp	r4, r0
 800057e:	d3f1      	bcc.n	8000564 <testfastlines+0x10>
 8000580:	2400      	movs	r4, #0
 8000582:	e009      	b.n	8000598 <testfastlines+0x44>
    {
        drawHorizontalLine(0, y, width(), color1);
    }
    for ( x=0; x < width(); x+=5)
    {
        drawVerticalLine(x, 0, height(), color2);
 8000584:	f000 fd18 	bl	8000fb8 <height>
 8000588:	2100      	movs	r1, #0
 800058a:	4602      	mov	r2, r0
 800058c:	462b      	mov	r3, r5
 800058e:	4620      	mov	r0, r4
 8000590:	f001 f94e 	bl	8001830 <drawVerticalLine>
    fillScreen(BLACK);
    for ( y=0; y < height(); y+=5)
    {
        drawHorizontalLine(0, y, width(), color1);
    }
    for ( x=0; x < width(); x+=5)
 8000594:	3405      	adds	r4, #5
 8000596:	b2a4      	uxth	r4, r4
 8000598:	f000 fd08 	bl	8000fac <width>
 800059c:	4284      	cmp	r4, r0
 800059e:	d3f1      	bcc.n	8000584 <testfastlines+0x30>
    {
        drawVerticalLine(x, 0, height(), color2);
    }

}
 80005a0:	bd70      	pop	{r4, r5, r6, pc}
 80005a2:	bf00      	nop

080005a4 <testlines>:

void testlines(uint16_t color)
{
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	4604      	mov	r4, r0
 80005a8:	b082      	sub	sp, #8
    uint16_t x,y;
    fillScreen(BLACK);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f001 fae8 	bl	8001b80 <fillScreen>
    for ( x=0; x < width(); x+=6)
 80005b0:	2500      	movs	r5, #0
 80005b2:	e00b      	b.n	80005cc <testlines+0x28>
    {
        drawLine(0, 0, x, height()-1, color);
 80005b4:	f000 fd00 	bl	8000fb8 <height>
 80005b8:	1e43      	subs	r3, r0, #1
 80005ba:	2000      	movs	r0, #0
 80005bc:	b22a      	sxth	r2, r5
 80005be:	b21b      	sxth	r3, r3
 80005c0:	4601      	mov	r1, r0
 80005c2:	9400      	str	r4, [sp, #0]
 80005c4:	f000 fe72 	bl	80012ac <drawLine>

void testlines(uint16_t color)
{
    uint16_t x,y;
    fillScreen(BLACK);
    for ( x=0; x < width(); x+=6)
 80005c8:	3506      	adds	r5, #6
 80005ca:	b2ad      	uxth	r5, r5
 80005cc:	f000 fcee 	bl	8000fac <width>
 80005d0:	4285      	cmp	r5, r0
 80005d2:	d3ef      	bcc.n	80005b4 <testlines+0x10>
 80005d4:	2500      	movs	r5, #0
 80005d6:	e00b      	b.n	80005f0 <testlines+0x4c>
        drawLine(0, 0, x, height()-1, color);
    }
    // delayMillis(1500);
    for ( y=0; y < height(); y+=6)
    {
        drawLine(0, 0, width()-1, y, color);
 80005d8:	f000 fce8 	bl	8000fac <width>
 80005dc:	1e42      	subs	r2, r0, #1
 80005de:	2000      	movs	r0, #0
 80005e0:	b22b      	sxth	r3, r5
 80005e2:	b212      	sxth	r2, r2
 80005e4:	4601      	mov	r1, r0
 80005e6:	9400      	str	r4, [sp, #0]
 80005e8:	f000 fe60 	bl	80012ac <drawLine>
    for ( x=0; x < width(); x+=6)
    {
        drawLine(0, 0, x, height()-1, color);
    }
    // delayMillis(1500);
    for ( y=0; y < height(); y+=6)
 80005ec:	3506      	adds	r5, #6
 80005ee:	b2ad      	uxth	r5, r5
 80005f0:	f000 fce2 	bl	8000fb8 <height>
 80005f4:	4285      	cmp	r5, r0
 80005f6:	d3ef      	bcc.n	80005d8 <testlines+0x34>
    {
        drawLine(0, 0, width()-1, y, color);
        // delayMillis(500);
    }
    delayMillis(1500);
 80005f8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005fc:	f000 fc8c 	bl	8000f18 <delayMillis>
    fillScreen(BLACK);
 8000600:	2000      	movs	r0, #0
 8000602:	f001 fabd 	bl	8001b80 <fillScreen>
    for ( x=0; x < width(); x+=6)
 8000606:	2500      	movs	r5, #0
 8000608:	e00f      	b.n	800062a <testlines+0x86>
    {
        drawLine(width()-1, 0, x, height()-1, color);
 800060a:	f000 fccf 	bl	8000fac <width>
 800060e:	4606      	mov	r6, r0
 8000610:	f000 fcd2 	bl	8000fb8 <height>
 8000614:	3e01      	subs	r6, #1
 8000616:	1e43      	subs	r3, r0, #1
 8000618:	b22a      	sxth	r2, r5
 800061a:	b230      	sxth	r0, r6
 800061c:	b21b      	sxth	r3, r3
 800061e:	2100      	movs	r1, #0
 8000620:	9400      	str	r4, [sp, #0]
 8000622:	f000 fe43 	bl	80012ac <drawLine>
        drawLine(0, 0, width()-1, y, color);
        // delayMillis(500);
    }
    delayMillis(1500);
    fillScreen(BLACK);
    for ( x=0; x < width(); x+=6)
 8000626:	3506      	adds	r5, #6
 8000628:	b2ad      	uxth	r5, r5
 800062a:	f000 fcbf 	bl	8000fac <width>
 800062e:	4285      	cmp	r5, r0
 8000630:	d3eb      	bcc.n	800060a <testlines+0x66>
 8000632:	2500      	movs	r5, #0
 8000634:	e00b      	b.n	800064e <testlines+0xaa>
        drawLine(width()-1, 0, x, height()-1, color);
        // delayMillis(500);
    }
    for ( y=0; y < height(); y+=6)
    {
        drawLine(width()-1, 0, 0, y, color);
 8000636:	f000 fcb9 	bl	8000fac <width>
 800063a:	2100      	movs	r1, #0
 800063c:	3801      	subs	r0, #1
 800063e:	b22b      	sxth	r3, r5
 8000640:	b200      	sxth	r0, r0
 8000642:	460a      	mov	r2, r1
 8000644:	9400      	str	r4, [sp, #0]
 8000646:	f000 fe31 	bl	80012ac <drawLine>
    for ( x=0; x < width(); x+=6)
    {
        drawLine(width()-1, 0, x, height()-1, color);
        // delayMillis(500);
    }
    for ( y=0; y < height(); y+=6)
 800064a:	3506      	adds	r5, #6
 800064c:	b2ad      	uxth	r5, r5
 800064e:	f000 fcb3 	bl	8000fb8 <height>
 8000652:	4285      	cmp	r5, r0
 8000654:	d3ef      	bcc.n	8000636 <testlines+0x92>
    {
        drawLine(width()-1, 0, 0, y, color);
        // delayMillis(500);
    }
    delayMillis(1500);
 8000656:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800065a:	f000 fc5d 	bl	8000f18 <delayMillis>
    fillScreen(BLACK);
 800065e:	2000      	movs	r0, #0
 8000660:	f001 fa8e 	bl	8001b80 <fillScreen>
    for ( x=0; x < width(); x+=6)
 8000664:	2500      	movs	r5, #0
 8000666:	e00b      	b.n	8000680 <testlines+0xdc>
    {
        drawLine(0, height()-1, x, 0, color);
 8000668:	f000 fca6 	bl	8000fb8 <height>
 800066c:	1e41      	subs	r1, r0, #1
 800066e:	2000      	movs	r0, #0
 8000670:	b22a      	sxth	r2, r5
 8000672:	b209      	sxth	r1, r1
 8000674:	4603      	mov	r3, r0
 8000676:	9400      	str	r4, [sp, #0]
 8000678:	f000 fe18 	bl	80012ac <drawLine>
        drawLine(width()-1, 0, 0, y, color);
        // delayMillis(500);
    }
    delayMillis(1500);
    fillScreen(BLACK);
    for ( x=0; x < width(); x+=6)
 800067c:	3506      	adds	r5, #6
 800067e:	b2ad      	uxth	r5, r5
 8000680:	f000 fc94 	bl	8000fac <width>
 8000684:	4285      	cmp	r5, r0
 8000686:	d3ef      	bcc.n	8000668 <testlines+0xc4>
 8000688:	2500      	movs	r5, #0
 800068a:	e00f      	b.n	80006ac <testlines+0x108>
    {
        drawLine(0, height()-1, x, 0, color);
    }
    for ( y=0; y < height(); y+=6)
    {
        drawLine(0, height()-1, width()-1, y, color);
 800068c:	f000 fc94 	bl	8000fb8 <height>
 8000690:	4606      	mov	r6, r0
 8000692:	f000 fc8b 	bl	8000fac <width>
 8000696:	3e01      	subs	r6, #1
 8000698:	1e42      	subs	r2, r0, #1
 800069a:	b22b      	sxth	r3, r5
 800069c:	b231      	sxth	r1, r6
 800069e:	b212      	sxth	r2, r2
 80006a0:	2000      	movs	r0, #0
 80006a2:	9400      	str	r4, [sp, #0]
 80006a4:	f000 fe02 	bl	80012ac <drawLine>
    fillScreen(BLACK);
    for ( x=0; x < width(); x+=6)
    {
        drawLine(0, height()-1, x, 0, color);
    }
    for ( y=0; y < height(); y+=6)
 80006a8:	3506      	adds	r5, #6
 80006aa:	b2ad      	uxth	r5, r5
 80006ac:	f000 fc84 	bl	8000fb8 <height>
 80006b0:	4285      	cmp	r5, r0
 80006b2:	d3eb      	bcc.n	800068c <testlines+0xe8>
    {
        drawLine(0, height()-1, width()-1, y, color);
    }
    delayMillis(1500);
 80006b4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80006b8:	f000 fc2e 	bl	8000f18 <delayMillis>
    fillScreen(BLACK);
 80006bc:	2000      	movs	r0, #0
 80006be:	f001 fa5f 	bl	8001b80 <fillScreen>
    for ( x=0; x < width(); x+=6)
 80006c2:	2500      	movs	r5, #0
 80006c4:	e00f      	b.n	80006e6 <testlines+0x142>
    {
        drawLine(width()-1, height()-1, x, 0, color);
 80006c6:	f000 fc71 	bl	8000fac <width>
 80006ca:	4606      	mov	r6, r0
 80006cc:	f000 fc74 	bl	8000fb8 <height>
 80006d0:	3e01      	subs	r6, #1
 80006d2:	1e41      	subs	r1, r0, #1
 80006d4:	b22a      	sxth	r2, r5
 80006d6:	b230      	sxth	r0, r6
 80006d8:	b209      	sxth	r1, r1
 80006da:	2300      	movs	r3, #0
 80006dc:	9400      	str	r4, [sp, #0]
 80006de:	f000 fde5 	bl	80012ac <drawLine>
    {
        drawLine(0, height()-1, width()-1, y, color);
    }
    delayMillis(1500);
    fillScreen(BLACK);
    for ( x=0; x < width(); x+=6)
 80006e2:	3506      	adds	r5, #6
 80006e4:	b2ad      	uxth	r5, r5
 80006e6:	f000 fc61 	bl	8000fac <width>
 80006ea:	4285      	cmp	r5, r0
 80006ec:	d3eb      	bcc.n	80006c6 <testlines+0x122>
 80006ee:	2500      	movs	r5, #0
 80006f0:	e00f      	b.n	8000712 <testlines+0x16e>
    {
        drawLine(width()-1, height()-1, x, 0, color);
    }
    for ( y=0; y < height(); y+=6)
    {
        drawLine(width()-1, height()-1, 0, y, color);
 80006f2:	f000 fc5b 	bl	8000fac <width>
 80006f6:	4606      	mov	r6, r0
 80006f8:	f000 fc5e 	bl	8000fb8 <height>
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1e41      	subs	r1, r0, #1
 8000700:	b22b      	sxth	r3, r5
 8000702:	b230      	sxth	r0, r6
 8000704:	b209      	sxth	r1, r1
 8000706:	2200      	movs	r2, #0
 8000708:	9400      	str	r4, [sp, #0]
 800070a:	f000 fdcf 	bl	80012ac <drawLine>
    fillScreen(BLACK);
    for ( x=0; x < width(); x+=6)
    {
        drawLine(width()-1, height()-1, x, 0, color);
    }
    for ( y=0; y < height(); y+=6)
 800070e:	3506      	adds	r5, #6
 8000710:	b2ad      	uxth	r5, r5
 8000712:	f000 fc51 	bl	8000fb8 <height>
 8000716:	4285      	cmp	r5, r0
 8000718:	d3eb      	bcc.n	80006f2 <testlines+0x14e>
    {
        drawLine(width()-1, height()-1, 0, y, color);
    }
    // printf("Done testlines\r\n");

}
 800071a:	b002      	add	sp, #8
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	bf00      	nop

08000720 <testBars>:


void testBars()
{
 8000720:	b570      	push	{r4, r5, r6, lr}
    uint16_t i,j;
    for(i=0; i < height(); i++)
 8000722:	f000 fc49 	bl	8000fb8 <height>
 8000726:	2400      	movs	r4, #0
 8000728:	4284      	cmp	r4, r0

    {
        for(j=0; j < width(); j++)

        {
            if(i>279) writeData(WHITE);
 800072a:	f240 1617 	movw	r6, #279	; 0x117


void testBars()
{
    uint16_t i,j;
    for(i=0; i < height(); i++)
 800072e:	d233      	bcs.n	8000798 <testBars+0x78>
 8000730:	2500      	movs	r5, #0
 8000732:	e012      	b.n	800075a <testBars+0x3a>
    {
        for(j=0; j < width(); j++)

        {
            if(i>279) writeData(WHITE);
            else if(i>239) writeData(BLUE);
 8000734:	2cef      	cmp	r4, #239	; 0xef
 8000736:	d81b      	bhi.n	8000770 <testBars+0x50>
            else if(i>199) writeData(GREEN);
 8000738:	2cc7      	cmp	r4, #199	; 0xc7
 800073a:	d81d      	bhi.n	8000778 <testBars+0x58>
            else if(i>159) writeData(CYAN);
 800073c:	2c9f      	cmp	r4, #159	; 0x9f
 800073e:	d820      	bhi.n	8000782 <testBars+0x62>
            else if(i>119) writeData(RED);
 8000740:	2c77      	cmp	r4, #119	; 0x77
 8000742:	d82a      	bhi.n	800079a <testBars+0x7a>
            else if(i>79) writeData(MAGENTA);
 8000744:	2c4f      	cmp	r4, #79	; 0x4f
 8000746:	d82d      	bhi.n	80007a4 <testBars+0x84>
            else if(i>39) writeData(YELLOW);
 8000748:	2c27      	cmp	r4, #39	; 0x27
 800074a:	bf8c      	ite	hi
 800074c:	f64f 70e0 	movwhi	r0, #65504	; 0xffe0
            else writeData(BLACK);
 8000750:	2000      	movls	r0, #0
 8000752:	f000 fc3f 	bl	8000fd4 <writeData>
{
    uint16_t i,j;
    for(i=0; i < height(); i++)

    {
        for(j=0; j < width(); j++)
 8000756:	3501      	adds	r5, #1
 8000758:	b2ad      	uxth	r5, r5
 800075a:	f000 fc27 	bl	8000fac <width>
 800075e:	4285      	cmp	r5, r0
 8000760:	d214      	bcs.n	800078c <testBars+0x6c>

        {
            if(i>279) writeData(WHITE);
 8000762:	42b4      	cmp	r4, r6
 8000764:	d9e6      	bls.n	8000734 <testBars+0x14>
 8000766:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800076a:	f000 fc33 	bl	8000fd4 <writeData>
 800076e:	e7f2      	b.n	8000756 <testBars+0x36>
            else if(i>239) writeData(BLUE);
 8000770:	201f      	movs	r0, #31
 8000772:	f000 fc2f 	bl	8000fd4 <writeData>
 8000776:	e7ee      	b.n	8000756 <testBars+0x36>
            else if(i>199) writeData(GREEN);
 8000778:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800077c:	f000 fc2a 	bl	8000fd4 <writeData>
 8000780:	e7e9      	b.n	8000756 <testBars+0x36>
            else if(i>159) writeData(CYAN);
 8000782:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000786:	f000 fc25 	bl	8000fd4 <writeData>
 800078a:	e7e4      	b.n	8000756 <testBars+0x36>


void testBars()
{
    uint16_t i,j;
    for(i=0; i < height(); i++)
 800078c:	f000 fc14 	bl	8000fb8 <height>
 8000790:	3401      	adds	r4, #1
 8000792:	b2a4      	uxth	r4, r4
 8000794:	4284      	cmp	r4, r0
 8000796:	d3cb      	bcc.n	8000730 <testBars+0x10>
            else if(i>39) writeData(YELLOW);
            else writeData(BLACK);
        }
    }
    return;
}
 8000798:	bd70      	pop	{r4, r5, r6, pc}
        {
            if(i>279) writeData(WHITE);
            else if(i>239) writeData(BLUE);
            else if(i>199) writeData(GREEN);
            else if(i>159) writeData(CYAN);
            else if(i>119) writeData(RED);
 800079a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800079e:	f000 fc19 	bl	8000fd4 <writeData>
 80007a2:	e7d8      	b.n	8000756 <testBars+0x36>
            else if(i>79) writeData(MAGENTA);
 80007a4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80007a8:	f000 fc14 	bl	8000fd4 <writeData>
 80007ac:	e7d3      	b.n	8000756 <testBars+0x36>
 80007ae:	bf00      	nop

080007b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007b4:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007b8:	2200      	movs	r2, #0
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007ba:	6819      	ldr	r1, [r3, #0]
 80007bc:	f041 0101 	orr.w	r1, r1, #1
 80007c0:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007c2:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007c4:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007c6:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007ca:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007ce:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007d2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80007d6:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007d8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007da:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007de:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80007e2:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007e4:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80007e6:	9200      	str	r2, [sp, #0]
 80007e8:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80007f0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80007f2:	461a      	mov	r2, r3
 80007f4:	e003      	b.n	80007fe <SystemInit+0x4e>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80007f6:	9b00      	ldr	r3, [sp, #0]
 80007f8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80007fc:	d009      	beq.n	8000812 <SystemInit+0x62>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80007fe:	6813      	ldr	r3, [r2, #0]
 8000800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000804:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8000806:	9b00      	ldr	r3, [sp, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800080c:	9b01      	ldr	r3, [sp, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f1      	beq.n	80007f6 <SystemInit+0x46>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000812:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000816:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000820:	bf08      	it	eq
 8000822:	9301      	streq	r3, [sp, #4]
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000824:	d001      	beq.n	800082a <SystemInit+0x7a>
  {
    HSEStatus = (uint32_t)0x01;
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 800082a:	9b01      	ldr	r3, [sp, #4]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d01d      	beq.n	800086c <SystemInit+0xbc>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8000830:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000834:	f2c4 0202 	movt	r2, #16386	; 0x4002

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8000838:	f44f 5340 	mov.w	r3, #12288	; 0x3000

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 800083c:	6891      	ldr	r1, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 800083e:	f2c5 0300 	movt	r3, #20480	; 0x5000

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8000842:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8000846:	6091      	str	r1, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8000848:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 800084c:	6813      	ldr	r3, [r2, #0]
 800084e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000852:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8000854:	6813      	ldr	r3, [r2, #0]
 8000856:	011b      	lsls	r3, r3, #4
 8000858:	d5fc      	bpl.n	8000854 <SystemInit+0xa4>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800085a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800085e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000862:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000866:	609a      	str	r2, [r3, #8]
#endif
}
 8000868:	b002      	add	sp, #8
 800086a:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800086c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000870:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_PMODE;  
 8000874:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000878:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800087a:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800087e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000882:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000884:	6811      	ldr	r1, [r2, #0]
 8000886:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800088a:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800088c:	689a      	ldr	r2, [r3, #8]
 800088e:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000890:	689a      	ldr	r2, [r3, #8]
 8000892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000896:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000898:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800089a:	f245 4208 	movw	r2, #21512	; 0x5408
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800089e:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80008a2:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80008a6:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80008a8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80008b0:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80008b2:	4619      	mov	r1, r3
 80008b4:	680a      	ldr	r2, [r1, #0]
 80008b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008ba:	0192      	lsls	r2, r2, #6
 80008bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008c0:	d5f8      	bpl.n	80008b4 <SystemInit+0x104>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80008c2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80008c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008ca:	f240 6105 	movw	r1, #1541	; 0x605
 80008ce:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80008d0:	689a      	ldr	r2, [r3, #8]
 80008d2:	f022 0203 	bic.w	r2, r2, #3
 80008d6:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80008d8:	689a      	ldr	r2, [r3, #8]
 80008da:	f042 0202 	orr.w	r2, r2, #2
 80008de:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80008e0:	689a      	ldr	r2, [r3, #8]
 80008e2:	f002 020c 	and.w	r2, r2, #12
 80008e6:	2a08      	cmp	r2, #8
 80008e8:	d1fa      	bne.n	80008e0 <SystemInit+0x130>
 80008ea:	e7a1      	b.n	8000830 <SystemInit+0x80>

080008ec <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80008fa:	2a04      	cmp	r2, #4
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 80008fc:	bf04      	itt	eq
 80008fe:	f647 0140 	movweq	r1, #30784	; 0x7840
 8000902:	f2c0 117d 	movteq	r1, #381	; 0x17d
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8000906:	d006      	beq.n	8000916 <SystemCoreClockUpdate+0x2a>
 8000908:	2a08      	cmp	r2, #8
 800090a:	bf1c      	itt	ne
 800090c:	f44f 5110 	movne.w	r1, #9216	; 0x2400
 8000910:	f2c0 01f4 	movtne	r1, #244	; 0xf4
 8000914:	d00b      	beq.n	800092e <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000916:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800091a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <SystemCoreClockUpdate+0x88>)
 8000920:	6892      	ldr	r2, [r2, #8]
 8000922:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000926:	5c9a      	ldrb	r2, [r3, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000928:	40d1      	lsrs	r1, r2
 800092a:	6119      	str	r1, [r3, #16]
}
 800092c:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800092e:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000930:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8000932:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000936:	6858      	ldr	r0, [r3, #4]
 8000938:	bf15      	itete	ne
 800093a:	f647 0340 	movwne	r3, #30784	; 0x7840
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800093e:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000942:	f2c0 137d 	movtne	r3, #381	; 0x17d
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000946:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800094a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800094e:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000952:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000956:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800095a:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000964:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000966:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800096a:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 800096c:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 8000970:	e7d1      	b.n	8000916 <SystemCoreClockUpdate+0x2a>
 8000972:	bf00      	nop
 8000974:	20000000 	.word	0x20000000
 8000978:	08003658 	.word	0x08003658
 800097c:	20000000 	.word	0x20000000
 8000980:	20000038 	.word	0x20000038
 8000984:	20000038 	.word	0x20000038
 8000988:	20000078 	.word	0x20000078

0800098c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop

08000990 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000990:	e7fe      	b.n	8000990 <HardFault_Handler>
 8000992:	bf00      	nop

08000994 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler>
 8000996:	bf00      	nop

08000998 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000998:	e7fe      	b.n	8000998 <BusFault_Handler>
 800099a:	bf00      	nop

0800099c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler>
 800099e:	bf00      	nop

080009a0 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <SysTick_Handler>:
//   //LCD_DisplayStringLine( LCD_PIXEL_HEIGHT - 42, USER_INFORMATION[x]);  
//   //LCD_SetTextColor(LCD_LOG_DEFAULT_COLOR);
// }
  void SysTick_Handler(void) 
{
    millisecondCounter++;
 80009ac:	f240 033c 	movw	r3, #60	; 0x3c
 80009b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	3201      	adds	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
}
 80009ba:	4770      	bx	lr

080009bc <uli2a>:


#ifdef PRINTF_LONG_SUPPORT

static void uli2a(unsigned long int num, unsigned int base, int uc,uint8_t * bf)
{
 80009bc:	b4f0      	push	{r4, r5, r6, r7}
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
 80009be:	2401      	movs	r4, #1
 80009c0:	4288      	cmp	r0, r1
 80009c2:	d32f      	bcc.n	8000a24 <uli2a+0x68>
        d*=base;         
 80009c4:	fb01 f404 	mul.w	r4, r1, r4

static void uli2a(unsigned long int num, unsigned int base, int uc,uint8_t * bf)
{
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
 80009c8:	fbb0 f5f4 	udiv	r5, r0, r4
 80009cc:	428d      	cmp	r5, r1
 80009ce:	d2f9      	bcs.n	80009c4 <uli2a+0x8>
        d*=base;         
    while (d!=0) {
 80009d0:	b1a4      	cbz	r4, 80009fc <uli2a+0x40>
        int dgt = num / d;
        num%=d;
        d/=base;
        if (n || dgt>0|| d==0) {
 80009d2:	2600      	movs	r6, #0
 80009d4:	1c37      	adds	r7, r6, #0
 80009d6:	bf18      	it	ne
 80009d8:	2701      	movne	r7, #1
 80009da:	2d00      	cmp	r5, #0
 80009dc:	bfc8      	it	gt
 80009de:	f047 0701 	orrgt.w	r7, r7, #1
    unsigned int d=1;
    while (num/d >= base)
        d*=base;         
    while (d!=0) {
        int dgt = num / d;
        num%=d;
 80009e2:	fb04 0015 	mls	r0, r4, r5, r0
        d/=base;
 80009e6:	fbb4 f4f1 	udiv	r4, r4, r1
        if (n || dgt>0|| d==0) {
 80009ea:	b95f      	cbnz	r7, 8000a04 <uli2a+0x48>
 80009ec:	b11c      	cbz	r4, 80009f6 <uli2a+0x3a>
 80009ee:	463e      	mov	r6, r7
 80009f0:	fbb0 f5f4 	udiv	r5, r0, r4
 80009f4:	e7ee      	b.n	80009d4 <uli2a+0x18>
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 80009f6:	3530      	adds	r5, #48	; 0x30
 80009f8:	f803 5b01 	strb.w	r5, [r3], #1
            ++n;
        }
    }
    *bf=0;
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
}
 8000a00:	bcf0      	pop	{r4, r5, r6, r7}
 8000a02:	4770      	bx	lr
    while (d!=0) {
        int dgt = num / d;
        num%=d;
        d/=base;
        if (n || dgt>0|| d==0) {
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 8000a04:	2a00      	cmp	r2, #0
 8000a06:	bf0c      	ite	eq
 8000a08:	2757      	moveq	r7, #87	; 0x57
 8000a0a:	2737      	movne	r7, #55	; 0x37
 8000a0c:	2d09      	cmp	r5, #9
 8000a0e:	bfd8      	it	le
 8000a10:	2730      	movle	r7, #48	; 0x30
 8000a12:	197d      	adds	r5, r7, r5
 8000a14:	f803 5b01 	strb.w	r5, [r3], #1
{
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
        d*=base;         
    while (d!=0) {
 8000a18:	2c00      	cmp	r4, #0
 8000a1a:	d0ef      	beq.n	80009fc <uli2a+0x40>
        int dgt = num / d;
        num%=d;
        d/=base;
        if (n || dgt>0|| d==0) {
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
            ++n;
 8000a1c:	3601      	adds	r6, #1
 8000a1e:	fbb0 f5f4 	udiv	r5, r0, r4
 8000a22:	e7d7      	b.n	80009d4 <uli2a+0x18>
 8000a24:	4605      	mov	r5, r0
 8000a26:	e7d4      	b.n	80009d2 <uli2a+0x16>

08000a28 <ui2a>:
}

#endif

static void ui2a(unsigned int num, unsigned int base, int uc,uint8_t * bf)
{
 8000a28:	b4f0      	push	{r4, r5, r6, r7}
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
 8000a2a:	2401      	movs	r4, #1
 8000a2c:	4288      	cmp	r0, r1
 8000a2e:	d32f      	bcc.n	8000a90 <ui2a+0x68>
        d*=base;        
 8000a30:	fb01 f404 	mul.w	r4, r1, r4

static void ui2a(unsigned int num, unsigned int base, int uc,uint8_t * bf)
{
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
 8000a34:	fbb0 f5f4 	udiv	r5, r0, r4
 8000a38:	428d      	cmp	r5, r1
 8000a3a:	d2f9      	bcs.n	8000a30 <ui2a+0x8>
        d*=base;        
    while (d!=0) {
 8000a3c:	b1a4      	cbz	r4, 8000a68 <ui2a+0x40>
        int dgt = num / d;
        num%= d;
        d/=base;
        if (n || dgt>0 || d==0) {
 8000a3e:	2600      	movs	r6, #0
 8000a40:	1c37      	adds	r7, r6, #0
 8000a42:	bf18      	it	ne
 8000a44:	2701      	movne	r7, #1
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	bfc8      	it	gt
 8000a4a:	f047 0701 	orrgt.w	r7, r7, #1
    unsigned int d=1;
    while (num/d >= base)
        d*=base;        
    while (d!=0) {
        int dgt = num / d;
        num%= d;
 8000a4e:	fb04 0015 	mls	r0, r4, r5, r0
        d/=base;
 8000a52:	fbb4 f4f1 	udiv	r4, r4, r1
        if (n || dgt>0 || d==0) {
 8000a56:	b95f      	cbnz	r7, 8000a70 <ui2a+0x48>
 8000a58:	b11c      	cbz	r4, 8000a62 <ui2a+0x3a>
 8000a5a:	463e      	mov	r6, r7
 8000a5c:	fbb0 f5f4 	udiv	r5, r0, r4
 8000a60:	e7ee      	b.n	8000a40 <ui2a+0x18>
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 8000a62:	3530      	adds	r5, #48	; 0x30
 8000a64:	f803 5b01 	strb.w	r5, [r3], #1
            ++n;
        }
    }
    *bf=0;
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
}
 8000a6c:	bcf0      	pop	{r4, r5, r6, r7}
 8000a6e:	4770      	bx	lr
    while (d!=0) {
        int dgt = num / d;
        num%= d;
        d/=base;
        if (n || dgt>0 || d==0) {
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	bf0c      	ite	eq
 8000a74:	2757      	moveq	r7, #87	; 0x57
 8000a76:	2737      	movne	r7, #55	; 0x37
 8000a78:	2d09      	cmp	r5, #9
 8000a7a:	bfd8      	it	le
 8000a7c:	2730      	movle	r7, #48	; 0x30
 8000a7e:	197d      	adds	r5, r7, r5
 8000a80:	f803 5b01 	strb.w	r5, [r3], #1
{
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
        d*=base;        
    while (d!=0) {
 8000a84:	2c00      	cmp	r4, #0
 8000a86:	d0ef      	beq.n	8000a68 <ui2a+0x40>
        int dgt = num / d;
        num%= d;
        d/=base;
        if (n || dgt>0 || d==0) {
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
            ++n;
 8000a88:	3601      	adds	r6, #1
 8000a8a:	fbb0 f5f4 	udiv	r5, r0, r4
 8000a8e:	e7d7      	b.n	8000a40 <ui2a+0x18>
 8000a90:	4605      	mov	r5, r0
 8000a92:	e7d4      	b.n	8000a3e <ui2a+0x16>

08000a94 <putchw>:
    *nump=num;
    return ch;
}

static void putchw(void* putp,putcf putf,int n, uint8_t z, uint8_t* bf)
{
 8000a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a98:	9d08      	ldr	r5, [sp, #32]
    uint8_t fc=z? '0' : ' ';
    uint8_t ch;
    uint8_t* p=bf;
    while (*p++ && n > 0)
 8000a9a:	782c      	ldrb	r4, [r5, #0]
    *nump=num;
    return ch;
}

static void putchw(void* putp,putcf putf,int n, uint8_t z, uint8_t* bf)
{
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	460f      	mov	r7, r1
 8000aa0:	4690      	mov	r8, r2
    uint8_t fc=z? '0' : ' ';
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	bf0c      	ite	eq
 8000aa6:	f04f 0920 	moveq.w	r9, #32
 8000aaa:	f04f 0930 	movne.w	r9, #48	; 0x30
    uint8_t ch;
    uint8_t* p=bf;
    while (*p++ && n > 0)
 8000aae:	b164      	cbz	r4, 8000aca <putchw+0x36>
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	dd16      	ble.n	8000ae2 <putchw+0x4e>
 8000ab4:	462b      	mov	r3, r5
 8000ab6:	e002      	b.n	8000abe <putchw+0x2a>
 8000ab8:	f1b8 0f00 	cmp.w	r8, #0
 8000abc:	d011      	beq.n	8000ae2 <putchw+0x4e>
 8000abe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
        n--;
 8000ac2:	f108 38ff 	add.w	r8, r8, #4294967295
static void putchw(void* putp,putcf putf,int n, uint8_t z, uint8_t* bf)
{
    uint8_t fc=z? '0' : ' ';
    uint8_t ch;
    uint8_t* p=bf;
    while (*p++ && n > 0)
 8000ac6:	2a00      	cmp	r2, #0
 8000ac8:	d1f6      	bne.n	8000ab8 <putchw+0x24>
        n--;
    while (n-- > 0) 
 8000aca:	f1b8 0f00 	cmp.w	r8, #0
 8000ace:	dd07      	ble.n	8000ae0 <putchw+0x4c>
    *src=p;
    *nump=num;
    return ch;
}

static void putchw(void* putp,putcf putf,int n, uint8_t z, uint8_t* bf)
 8000ad0:	2400      	movs	r4, #0
    uint8_t ch;
    uint8_t* p=bf;
    while (*p++ && n > 0)
        n--;
    while (n-- > 0) 
        putf(putp,fc);
 8000ad2:	4630      	mov	r0, r6
 8000ad4:	4649      	mov	r1, r9
 8000ad6:	3401      	adds	r4, #1
 8000ad8:	47b8      	blx	r7
    uint8_t fc=z? '0' : ' ';
    uint8_t ch;
    uint8_t* p=bf;
    while (*p++ && n > 0)
        n--;
    while (n-- > 0) 
 8000ada:	4544      	cmp	r4, r8
 8000adc:	d1f9      	bne.n	8000ad2 <putchw+0x3e>
 8000ade:	782c      	ldrb	r4, [r5, #0]
        putf(putp,fc);
    while ((ch= *bf++))
 8000ae0:	b134      	cbz	r4, 8000af0 <putchw+0x5c>
        putf(putp,ch);
 8000ae2:	4621      	mov	r1, r4
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	47b8      	blx	r7
    uint8_t* p=bf;
    while (*p++ && n > 0)
        n--;
    while (n-- > 0) 
        putf(putp,fc);
    while ((ch= *bf++))
 8000ae8:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000aec:	2c00      	cmp	r4, #0
 8000aee:	d1f8      	bne.n	8000ae2 <putchw+0x4e>
 8000af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000af4 <putcp>:
    va_end(va);
}

static void putcp(void* p,uint8_t c)
{
    *(*((uint8_t**)p))++ = c;
 8000af4:	6803      	ldr	r3, [r0, #0]
 8000af6:	f803 1b01 	strb.w	r1, [r3], #1
 8000afa:	6003      	str	r3, [r0, #0]
}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <tfp_format>:
    while ((ch= *bf++))
        putf(putp,ch);
}

void tfp_format(void* putp,putcf putf,uint8_t *fmt, va_list va)
{
 8000b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b04:	b087      	sub	sp, #28
 8000b06:	4607      	mov	r7, r0
 8000b08:	4688      	mov	r8, r1
 8000b0a:	4614      	mov	r4, r2
 8000b0c:	461e      	mov	r6, r3
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        li2a(va_arg(va, unsigned long int),bf);
                    else
#endif
                        i2a(va_arg(va, int),bf);
 8000b0e:	f10d 0a0c 	add.w	sl, sp, #12

static void i2a (int num, uint8_t * bf)
{
    if (num<0) {
        num=-num;
        *bf++ = '-';
 8000b12:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
    uint8_t bf[12];

    uint8_t ch;


    while ((ch=*(fmt++))) {
 8000b16:	7821      	ldrb	r1, [r4, #0]
 8000b18:	b139      	cbz	r1, 8000b2a <tfp_format+0x2a>
        if (ch!='%') 
 8000b1a:	2925      	cmp	r1, #37	; 0x25
 8000b1c:	d008      	beq.n	8000b30 <tfp_format+0x30>
    uint8_t bf[12];

    uint8_t ch;


    while ((ch=*(fmt++))) {
 8000b1e:	3401      	adds	r4, #1
        if (ch!='%') 
            putf(putp,ch);
 8000b20:	4638      	mov	r0, r7
 8000b22:	47c0      	blx	r8
    uint8_t bf[12];

    uint8_t ch;


    while ((ch=*(fmt++))) {
 8000b24:	7821      	ldrb	r1, [r4, #0]
 8000b26:	2900      	cmp	r1, #0
 8000b28:	d1f7      	bne.n	8000b1a <tfp_format+0x1a>
                break;
            }
        }
    }
    abort:;
}
 8000b2a:	b007      	add	sp, #28
 8000b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uint8_t lz=0;
#ifdef  PRINTF_LONG_SUPPORT
            uint8_t lng=0;
#endif
            int w=0;
            ch=*(fmt++);
 8000b30:	7861      	ldrb	r1, [r4, #1]
            if (ch=='0') {
 8000b32:	2930      	cmp	r1, #48	; 0x30
 8000b34:	d04b      	beq.n	8000bce <tfp_format+0xce>
            uint8_t lz=0;
#ifdef  PRINTF_LONG_SUPPORT
            uint8_t lng=0;
#endif
            int w=0;
            ch=*(fmt++);
 8000b36:	3402      	adds	r4, #2

    while ((ch=*(fmt++))) {
        if (ch!='%') 
            putf(putp,ch);
        else {
            uint8_t lz=0;
 8000b38:	f04f 0900 	mov.w	r9, #0
            ch=*(fmt++);
            if (ch=='0') {
                ch=*(fmt++);
                lz=1;
            }
            if (ch>='0' && ch<='9') {
 8000b3c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	2500      	movs	r5, #0
 8000b44:	2a09      	cmp	r2, #9
 8000b46:	d91a      	bls.n	8000b7e <tfp_format+0x7e>
        if (ch!='%') 
            putf(putp,ch);
        else {
            uint8_t lz=0;
#ifdef  PRINTF_LONG_SUPPORT
            uint8_t lng=0;
 8000b48:	2200      	movs	r2, #0
            }
            if (ch>='0' && ch<='9') {
                ch=a2i(ch,&fmt,10,&w);
            }
#ifdef  PRINTF_LONG_SUPPORT
            if (ch=='l') {
 8000b4a:	296c      	cmp	r1, #108	; 0x6c
                ch=*(fmt++);
 8000b4c:	bf04      	itt	eq
 8000b4e:	f814 1b01 	ldrbeq.w	r1, [r4], #1
                lng=1;
 8000b52:	2201      	moveq	r2, #1
            }
#endif
            switch (ch) {
 8000b54:	2964      	cmp	r1, #100	; 0x64
 8000b56:	d05d      	beq.n	8000c14 <tfp_format+0x114>
 8000b58:	d827      	bhi.n	8000baa <tfp_format+0xaa>
 8000b5a:	2958      	cmp	r1, #88	; 0x58
 8000b5c:	d043      	beq.n	8000be6 <tfp_format+0xe6>
 8000b5e:	d83b      	bhi.n	8000bd8 <tfp_format+0xd8>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d0e2      	beq.n	8000b2a <tfp_format+0x2a>
 8000b64:	2925      	cmp	r1, #37	; 0x25
 8000b66:	d1d6      	bne.n	8000b16 <tfp_format+0x16>
                break;
                case 's' : 
                putchw(putp,putf,w,0,va_arg(va, uint8_t*));
                break;
                case '%' :
                putf(putp,ch);
 8000b68:	4638      	mov	r0, r7
 8000b6a:	47c0      	blx	r8
 8000b6c:	e7d3      	b.n	8000b16 <tfp_format+0x16>
    int num=0;
    int digit;
    while ((digit=a2d(ch))>=0) {
        if (digit>base) break;
        num=num*base+digit;
        ch=*p++;
 8000b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
    uint8_t* p= *src;
    int num=0;
    int digit;
    while ((digit=a2d(ch))>=0) {
        if (digit>base) break;
        num=num*base+digit;
 8000b72:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000b76:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8000b7a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    ui2a(num,10,0,bf);
}

static int a2d(uint8_t ch)
{
    if (ch>='0' && ch<='9') 
 8000b7e:	b2da      	uxtb	r2, r3
        return ch-'0';
    else if (ch>='a' && ch<='f')
 8000b80:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
    ui2a(num,10,0,bf);
}

static int a2d(uint8_t ch)
{
    if (ch>='0' && ch<='9') 
 8000b84:	2a09      	cmp	r2, #9
        return ch-'0';
    else if (ch>='a' && ch<='f')
 8000b86:	b2c0      	uxtb	r0, r0
    ui2a(num,10,0,bf);
}

static int a2d(uint8_t ch)
{
    if (ch>='0' && ch<='9') 
 8000b88:	d9f1      	bls.n	8000b6e <tfp_format+0x6e>
        return ch-'0';
    else if (ch>='a' && ch<='f')
        return ch-'a'+10;
    else if (ch>='A' && ch<='F')
 8000b8a:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41

static int a2d(uint8_t ch)
{
    if (ch>='0' && ch<='9') 
        return ch-'0';
    else if (ch>='a' && ch<='f')
 8000b8e:	2805      	cmp	r0, #5
        return ch-'a'+10;
    else if (ch>='A' && ch<='F')
 8000b90:	b2db      	uxtb	r3, r3
static int a2d(uint8_t ch)
{
    if (ch>='0' && ch<='9') 
        return ch-'0';
    else if (ch>='a' && ch<='f')
        return ch-'a'+10;
 8000b92:	bf98      	it	ls
 8000b94:	f1a1 0357 	subls.w	r3, r1, #87	; 0x57

static int a2d(uint8_t ch)
{
    if (ch>='0' && ch<='9') 
        return ch-'0';
    else if (ch>='a' && ch<='f')
 8000b98:	d802      	bhi.n	8000ba0 <tfp_format+0xa0>
{
    uint8_t* p= *src;
    int num=0;
    int digit;
    while ((digit=a2d(ch))>=0) {
        if (digit>base) break;
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	dcd4      	bgt.n	8000b48 <tfp_format+0x48>
 8000b9e:	e7e6      	b.n	8000b6e <tfp_format+0x6e>
{
    if (ch>='0' && ch<='9') 
        return ch-'0';
    else if (ch>='a' && ch<='f')
        return ch-'a'+10;
    else if (ch>='A' && ch<='F')
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	d8d1      	bhi.n	8000b48 <tfp_format+0x48>
        return ch-'A'+10;
 8000ba4:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 8000ba8:	e7f7      	b.n	8000b9a <tfp_format+0x9a>
            if (ch=='l') {
                ch=*(fmt++);
                lng=1;
            }
#endif
            switch (ch) {
 8000baa:	2975      	cmp	r1, #117	; 0x75
 8000bac:	d029      	beq.n	8000c02 <tfp_format+0x102>
 8000bae:	2978      	cmp	r1, #120	; 0x78
 8000bb0:	d019      	beq.n	8000be6 <tfp_format+0xe6>
 8000bb2:	2973      	cmp	r1, #115	; 0x73
 8000bb4:	d1af      	bne.n	8000b16 <tfp_format+0x16>
                break;
                case 'c' : 
                putf(putp,(uint8_t)(va_arg(va, int)));
                break;
                case 's' : 
                putchw(putp,putf,w,0,va_arg(va, uint8_t*));
 8000bb6:	f8d6 e000 	ldr.w	lr, [r6]
 8000bba:	4638      	mov	r0, r7
 8000bbc:	4641      	mov	r1, r8
 8000bbe:	462a      	mov	r2, r5
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	3604      	adds	r6, #4
 8000bc4:	f8cd e000 	str.w	lr, [sp]
 8000bc8:	f7ff ff64 	bl	8000a94 <putchw>
                break;
 8000bcc:	e7a3      	b.n	8000b16 <tfp_format+0x16>
            uint8_t lng=0;
#endif
            int w=0;
            ch=*(fmt++);
            if (ch=='0') {
                ch=*(fmt++);
 8000bce:	78a1      	ldrb	r1, [r4, #2]
                lz=1;
 8000bd0:	f04f 0901 	mov.w	r9, #1
            uint8_t lng=0;
#endif
            int w=0;
            ch=*(fmt++);
            if (ch=='0') {
                ch=*(fmt++);
 8000bd4:	3403      	adds	r4, #3
 8000bd6:	e7b1      	b.n	8000b3c <tfp_format+0x3c>
            if (ch=='l') {
                ch=*(fmt++);
                lng=1;
            }
#endif
            switch (ch) {
 8000bd8:	2963      	cmp	r1, #99	; 0x63
 8000bda:	d19c      	bne.n	8000b16 <tfp_format+0x16>
#endif
                    ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
                putchw(putp,putf,w,lz,bf);
                break;
                case 'c' : 
                putf(putp,(uint8_t)(va_arg(va, int)));
 8000bdc:	7831      	ldrb	r1, [r6, #0]
 8000bde:	4638      	mov	r0, r7
 8000be0:	3604      	adds	r6, #4
 8000be2:	47c0      	blx	r8
                break;
 8000be4:	e797      	b.n	8000b16 <tfp_format+0x16>
                    break;
                }
                case 'x': case 'X' : 
#ifdef  PRINTF_LONG_SUPPORT
                if (lng)
                    uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
 8000be6:	6830      	ldr	r0, [r6, #0]
                    putchw(putp,putf,w,lz,bf);
                    break;
                }
                case 'x': case 'X' : 
#ifdef  PRINTF_LONG_SUPPORT
                if (lng)
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	d036      	beq.n	8000c5a <tfp_format+0x15a>
                    uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
 8000bec:	f1a1 0158 	sub.w	r1, r1, #88	; 0x58
 8000bf0:	424a      	negs	r2, r1
 8000bf2:	eb42 0201 	adc.w	r2, r2, r1
 8000bf6:	4653      	mov	r3, sl
 8000bf8:	2110      	movs	r1, #16
 8000bfa:	3604      	adds	r6, #4
 8000bfc:	f7ff fede 	bl	80009bc <uli2a>
 8000c00:	e013      	b.n	8000c2a <tfp_format+0x12a>
                case 0: 
                goto abort;
                case 'u' : {
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        uli2a(va_arg(va, unsigned long int),10,0,bf);
 8000c02:	6830      	ldr	r0, [r6, #0]
            switch (ch) {
                case 0: 
                goto abort;
                case 'u' : {
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
 8000c04:	b31a      	cbz	r2, 8000c4e <tfp_format+0x14e>
                        uli2a(va_arg(va, unsigned long int),10,0,bf);
 8000c06:	210a      	movs	r1, #10
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4653      	mov	r3, sl
 8000c0c:	3604      	adds	r6, #4
 8000c0e:	f7ff fed5 	bl	80009bc <uli2a>
 8000c12:	e00a      	b.n	8000c2a <tfp_format+0x12a>
                    break;
                }
                case 'd' :  {
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        li2a(va_arg(va, unsigned long int),bf);
 8000c14:	6830      	ldr	r0, [r6, #0]
 8000c16:	3604      	adds	r6, #4
                    putchw(putp,putf,w,lz,bf);
                    break;
                }
                case 'd' :  {
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
 8000c18:	b982      	cbnz	r2, 8000c3c <tfp_format+0x13c>
    *bf=0;
}

static void i2a (int num, uint8_t * bf)
{
    if (num<0) {
 8000c1a:	2800      	cmp	r0, #0
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        li2a(va_arg(va, unsigned long int),bf);
                    else
#endif
                        i2a(va_arg(va, int),bf);
 8000c1c:	bfa8      	it	ge
 8000c1e:	4653      	movge	r3, sl
    *bf=0;
}

static void i2a (int num, uint8_t * bf)
{
    if (num<0) {
 8000c20:	db26      	blt.n	8000c70 <tfp_format+0x170>
        num=-num;
        *bf++ = '-';
    }
    ui2a(num,10,0,bf);
 8000c22:	210a      	movs	r1, #10
 8000c24:	2200      	movs	r2, #0
 8000c26:	f7ff feff 	bl	8000a28 <ui2a>
                if (lng)
                    uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
                else
#endif
                    ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
                putchw(putp,putf,w,lz,bf);
 8000c2a:	4638      	mov	r0, r7
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	462a      	mov	r2, r5
 8000c30:	464b      	mov	r3, r9
 8000c32:	f8cd a000 	str.w	sl, [sp]
 8000c36:	f7ff ff2d 	bl	8000a94 <putchw>
                break;
 8000c3a:	e76c      	b.n	8000b16 <tfp_format+0x16>
    *bf=0;
}

static void li2a (long num, uint8_t * bf)
{
    if (num<0) {
 8000c3c:	2800      	cmp	r0, #0
                    break;
                }
                case 'd' :  {
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        li2a(va_arg(va, unsigned long int),bf);
 8000c3e:	bfa8      	it	ge
 8000c40:	4653      	movge	r3, sl
    *bf=0;
}

static void li2a (long num, uint8_t * bf)
{
    if (num<0) {
 8000c42:	db1b      	blt.n	8000c7c <tfp_format+0x17c>
        num=-num;
        *bf++ = '-';
    }
    uli2a(num,10,0,bf);
 8000c44:	210a      	movs	r1, #10
 8000c46:	2200      	movs	r2, #0
 8000c48:	f7ff feb8 	bl	80009bc <uli2a>
 8000c4c:	e7ed      	b.n	8000c2a <tfp_format+0x12a>
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        uli2a(va_arg(va, unsigned long int),10,0,bf);
                    else
#endif
                        ui2a(va_arg(va, unsigned int),10,0,bf);
 8000c4e:	210a      	movs	r1, #10
 8000c50:	4653      	mov	r3, sl
 8000c52:	f7ff fee9 	bl	8000a28 <ui2a>
 8000c56:	3604      	adds	r6, #4
 8000c58:	e7e7      	b.n	8000c2a <tfp_format+0x12a>
#ifdef  PRINTF_LONG_SUPPORT
                if (lng)
                    uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
                else
#endif
                    ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 8000c5a:	f1a1 0358 	sub.w	r3, r1, #88	; 0x58
 8000c5e:	425a      	negs	r2, r3
 8000c60:	eb42 0203 	adc.w	r2, r2, r3
 8000c64:	2110      	movs	r1, #16
 8000c66:	4653      	mov	r3, sl
 8000c68:	f7ff fede 	bl	8000a28 <ui2a>
 8000c6c:	3604      	adds	r6, #4
 8000c6e:	e7dc      	b.n	8000c2a <tfp_format+0x12a>
}

static void i2a (int num, uint8_t * bf)
{
    if (num<0) {
        num=-num;
 8000c70:	4240      	negs	r0, r0
        *bf++ = '-';
 8000c72:	f88d b00c 	strb.w	fp, [sp, #12]
 8000c76:	f10d 030d 	add.w	r3, sp, #13
 8000c7a:	e7d2      	b.n	8000c22 <tfp_format+0x122>
}

static void li2a (long num, uint8_t * bf)
{
    if (num<0) {
        num=-num;
 8000c7c:	4240      	negs	r0, r0
        *bf++ = '-';
 8000c7e:	f88d b00c 	strb.w	fp, [sp, #12]
 8000c82:	f10d 030d 	add.w	r3, sp, #13
 8000c86:	e7dd      	b.n	8000c44 <tfp_format+0x144>

08000c88 <init_printf>:
}


void init_printf(void* putp,void (*putf) (void*,uint8_t))
{
    stdout_putf=putf;
 8000c88:	f240 0340 	movw	r3, #64	; 0x40
 8000c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c90:	6019      	str	r1, [r3, #0]
    stdout_putp=putp;
 8000c92:	6058      	str	r0, [r3, #4]
}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <tfp_printf>:

void tfp_printf(uint8_t *fmt, ...)
{
 8000c98:	b40f      	push	{r0, r1, r2, r3}
 8000c9a:	b500      	push	{lr}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	ab04      	add	r3, sp, #16
    va_list va;
    va_start(va,fmt);
    tfp_format(stdout_putp,stdout_putf,fmt,va);
 8000ca0:	f240 0040 	movw	r0, #64	; 0x40
 8000ca4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    stdout_putf=putf;
    stdout_putp=putp;
}

void tfp_printf(uint8_t *fmt, ...)
{
 8000ca8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va,fmt);
    tfp_format(stdout_putp,stdout_putf,fmt,va);
 8000cac:	6801      	ldr	r1, [r0, #0]
 8000cae:	6840      	ldr	r0, [r0, #4]
}

void tfp_printf(uint8_t *fmt, ...)
{
    va_list va;
    va_start(va,fmt);
 8000cb0:	9301      	str	r3, [sp, #4]
    tfp_format(stdout_putp,stdout_putf,fmt,va);
 8000cb2:	f7ff ff25 	bl	8000b00 <tfp_format>
    va_end(va);
}
 8000cb6:	b003      	add	sp, #12
 8000cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <tft_printf>:

void tft_printf(uint8_t *fmt, ...)
{
 8000cc0:	b40f      	push	{r0, r1, r2, r3}
 8000cc2:	b500      	push	{lr}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	ab04      	add	r3, sp, #16
    va_list va;
    va_start(va,fmt);
    tfp_format(stdout_putp,stdout_puttft,fmt,va);
 8000cc8:	f240 0040 	movw	r0, #64	; 0x40
 8000ccc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    tfp_format(stdout_putp,stdout_putf,fmt,va);
    va_end(va);
}

void tft_printf(uint8_t *fmt, ...)
{
 8000cd0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va,fmt);
    tfp_format(stdout_putp,stdout_puttft,fmt,va);
 8000cd4:	6881      	ldr	r1, [r0, #8]
 8000cd6:	6840      	ldr	r0, [r0, #4]
}

void tft_printf(uint8_t *fmt, ...)
{
    va_list va;
    va_start(va,fmt);
 8000cd8:	9301      	str	r3, [sp, #4]
    tfp_format(stdout_putp,stdout_puttft,fmt,va);
 8000cda:	f7ff ff11 	bl	8000b00 <tfp_format>
    va_end(va);
}
 8000cde:	b003      	add	sp, #12
 8000ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <init_tft_printf>:
    *(*((uint8_t**)p))++ = c;
}

void init_tft_printf(void* putp,void (*putf) (void*,uint8_t))
{
    stdout_puttft=putf;
 8000ce8:	f240 0340 	movw	r3, #64	; 0x40
 8000cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cf0:	6099      	str	r1, [r3, #8]

}
 8000cf2:	4770      	bx	lr

08000cf4 <tfp_sprintf>:
// typedef void (*putctft) (void*,uint8_t);
// static putctft stdout_puttft;


void tfp_sprintf(uint8_t* s,uint8_t *fmt, ...)
{
 8000cf4:	b40e      	push	{r1, r2, r3}
 8000cf6:	b510      	push	{r4, lr}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	ac07      	add	r4, sp, #28
    va_list va;
    va_start(va,fmt);
    tfp_format(&s,putcp,fmt,va);
 8000cfc:	f640 21f5 	movw	r1, #2805	; 0xaf5
// typedef void (*putctft) (void*,uint8_t);
// static putctft stdout_puttft;


void tfp_sprintf(uint8_t* s,uint8_t *fmt, ...)
{
 8000d00:	f854 2b04 	ldr.w	r2, [r4], #4
 8000d04:	9001      	str	r0, [sp, #4]
    va_list va;
    va_start(va,fmt);
    tfp_format(&s,putcp,fmt,va);
 8000d06:	4623      	mov	r3, r4
 8000d08:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000d0c:	a801      	add	r0, sp, #4


void tfp_sprintf(uint8_t* s,uint8_t *fmt, ...)
{
    va_list va;
    va_start(va,fmt);
 8000d0e:	9403      	str	r4, [sp, #12]
    tfp_format(&s,putcp,fmt,va);
 8000d10:	f7ff fef6 	bl	8000b00 <tfp_format>
    va_end(va);
}

static void putcp(void* p,uint8_t c)
{
    *(*((uint8_t**)p))++ = c;
 8000d14:	9b01      	ldr	r3, [sp, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f803 2b01 	strb.w	r2, [r3], #1
 8000d1c:	9301      	str	r3, [sp, #4]
    va_list va;
    va_start(va,fmt);
    tfp_format(&s,putcp,fmt,va);
    putcp(&s,0);
    va_end(va);
}
 8000d1e:	b005      	add	sp, #20
 8000d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d24:	b003      	add	sp, #12
 8000d26:	4770      	bx	lr

08000d28 <initGPIO>:
  6. At this stage you can read/write from/to the memory connected to the NOR/SRAM Bank. 

*/

void initGPIO(void) 
{
 8000d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    init.GPIO_Mode=GPIO_Mode_OUT;
    init.GPIO_Speed=GPIO_Speed_100MHz;
    // init.GPIO_Speed=GPIO_Speed_50MHz;
    // init.GPIO_Speed=GPIO_Speed_2MHz;

    GPIO_Init(GPIOE,&init);
 8000d2c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  6. At this stage you can read/write from/to the memory connected to the NOR/SRAM Bank. 

*/

void initGPIO(void) 
{
 8000d30:	b083      	sub	sp, #12
    init.GPIO_Mode=GPIO_Mode_OUT;
    init.GPIO_Speed=GPIO_Speed_100MHz;
    // init.GPIO_Speed=GPIO_Speed_50MHz;
    // init.GPIO_Speed=GPIO_Speed_2MHz;

    GPIO_Init(GPIOE,&init);
 8000d32:	f2c4 0502 	movt	r5, #16386	; 0x4002
*/

void initGPIO(void) 
{

    GPIO_InitTypeDef init={0};
 8000d36:	2600      	movs	r6, #0

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE,ENABLE);
 8000d38:	2101      	movs	r1, #1
 8000d3a:	2018      	movs	r0, #24
    // init.GPIO_Speed=GPIO_Speed_50MHz;
    // init.GPIO_Speed=GPIO_Speed_2MHz;

    GPIO_Init(GPIOE,&init);

    GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC); // D2
 8000d3c:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 8000d40:	f2c4 0402 	movt	r4, #16386	; 0x4002

// reset

    init.GPIO_Pin=GPIO_Pin_1;                               // reset pin
    init.GPIO_Mode=GPIO_Mode_OUT;
    init.GPIO_Speed=GPIO_Speed_100MHz;
 8000d44:	2703      	movs	r7, #3
    

// reset

    init.GPIO_Pin=GPIO_Pin_1;                               // reset pin
    init.GPIO_Mode=GPIO_Mode_OUT;
 8000d46:	4689      	mov	r9, r1
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE,ENABLE);
    

// reset

    init.GPIO_Pin=GPIO_Pin_1;                               // reset pin
 8000d48:	f04f 0802 	mov.w	r8, #2
*/

void initGPIO(void) 
{

    GPIO_InitTypeDef init={0};
 8000d4c:	9600      	str	r6, [sp, #0]
 8000d4e:	9601      	str	r6, [sp, #4]

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE,ENABLE);
 8000d50:	f001 fecc 	bl	8002aec <RCC_AHB1PeriphClockCmd>
    init.GPIO_Mode=GPIO_Mode_OUT;
    init.GPIO_Speed=GPIO_Speed_100MHz;
    // init.GPIO_Speed=GPIO_Speed_50MHz;
    // init.GPIO_Speed=GPIO_Speed_2MHz;

    GPIO_Init(GPIOE,&init);
 8000d54:	4628      	mov	r0, r5
 8000d56:	4669      	mov	r1, sp
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE,ENABLE);
    

// reset

    init.GPIO_Pin=GPIO_Pin_1;                               // reset pin
 8000d58:	f8cd 8000 	str.w	r8, [sp]
    init.GPIO_Mode=GPIO_Mode_OUT;
 8000d5c:	f88d 9004 	strb.w	r9, [sp, #4]
    init.GPIO_Speed=GPIO_Speed_100MHz;
 8000d60:	f88d 7005 	strb.w	r7, [sp, #5]
    // init.GPIO_Speed=GPIO_Speed_50MHz;
    // init.GPIO_Speed=GPIO_Speed_2MHz;

    GPIO_Init(GPIOE,&init);
 8000d64:	f001 fcb8 	bl	80026d8 <GPIO_Init>

    GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC); // D2
 8000d68:	220c      	movs	r2, #12
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	f001 fd55 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC); // D3
 8000d72:	4620      	mov	r0, r4
 8000d74:	4649      	mov	r1, r9
 8000d76:	220c      	movs	r2, #12
 8000d78:	f001 fd50 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC); // NOE -> RD
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	2104      	movs	r1, #4
 8000d80:	220c      	movs	r2, #12
 8000d82:	f001 fd4b 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC); // NWE -> WR
 8000d86:	4620      	mov	r0, r4
 8000d88:	2105      	movs	r1, #5
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	f001 fd46 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource7, GPIO_AF_FSMC); // NE1 -> CS
 8000d90:	4620      	mov	r0, r4
 8000d92:	2107      	movs	r1, #7
 8000d94:	220c      	movs	r2, #12
 8000d96:	f001 fd41 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC); // D13
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	2108      	movs	r1, #8
 8000d9e:	220c      	movs	r2, #12
 8000da0:	f001 fd3c 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC); // D14
 8000da4:	4620      	mov	r0, r4
 8000da6:	2109      	movs	r1, #9
 8000da8:	220c      	movs	r2, #12
 8000daa:	f001 fd37 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC); // D15
 8000dae:	4620      	mov	r0, r4
 8000db0:	210a      	movs	r1, #10
 8000db2:	220c      	movs	r2, #12
 8000db4:	f001 fd32 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource11, GPIO_AF_FSMC); // A16 -> RS (C/D in ladyada terminology)
 8000db8:	4620      	mov	r0, r4
 8000dba:	210b      	movs	r1, #11
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	f001 fd2d 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC); // D0
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	210e      	movs	r1, #14
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	f001 fd28 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC); // D1
 8000dcc:	4620      	mov	r0, r4
 8000dce:	210f      	movs	r1, #15
 8000dd0:	220c      	movs	r2, #12
 8000dd2:	f001 fd23 	bl	800281c <GPIO_PinAFConfig>

// PORTE

    GPIO_PinAFConfig(GPIOE, GPIO_PinSource7, GPIO_AF_FSMC); // D4
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	2107      	movs	r1, #7
 8000dda:	220c      	movs	r2, #12
 8000ddc:	f001 fd1e 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource8, GPIO_AF_FSMC); // D5
 8000de0:	4628      	mov	r0, r5
 8000de2:	2108      	movs	r1, #8
 8000de4:	220c      	movs	r2, #12
 8000de6:	f001 fd19 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource9, GPIO_AF_FSMC); // D6
 8000dea:	4628      	mov	r0, r5
 8000dec:	2109      	movs	r1, #9
 8000dee:	220c      	movs	r2, #12
 8000df0:	f001 fd14 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource10, GPIO_AF_FSMC); // D7
 8000df4:	4628      	mov	r0, r5
 8000df6:	210a      	movs	r1, #10
 8000df8:	220c      	movs	r2, #12
 8000dfa:	f001 fd0f 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_FSMC); // D8
 8000dfe:	4628      	mov	r0, r5
 8000e00:	210b      	movs	r1, #11
 8000e02:	220c      	movs	r2, #12
 8000e04:	f001 fd0a 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource12, GPIO_AF_FSMC); // D9
 8000e08:	210c      	movs	r1, #12
 8000e0a:	4628      	mov	r0, r5
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	f001 fd05 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource13, GPIO_AF_FSMC); // D10
 8000e12:	4628      	mov	r0, r5
 8000e14:	210d      	movs	r1, #13
 8000e16:	220c      	movs	r2, #12
 8000e18:	f001 fd00 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_FSMC); // D11
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	210e      	movs	r1, #14
 8000e20:	220c      	movs	r2, #12
 8000e22:	f001 fcfb 	bl	800281c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource15, GPIO_AF_FSMC); // D12
 8000e26:	4628      	mov	r0, r5
 8000e28:	220c      	movs	r2, #12
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f001 fcf6 	bl	800281c <GPIO_PinAFConfig>
    // init.GPIO_Speed=GPIO_Speed_50MHz;
    // init.GPIO_Speed=GPIO_Speed_2MHz;
    init.GPIO_OType = GPIO_OType_PP;
    init.GPIO_PuPd = GPIO_PuPd_NOPULL;

    GPIO_Init(GPIOD, &init);
 8000e30:	4669      	mov	r1, sp
 8000e32:	4620      	mov	r0, r4
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource12, GPIO_AF_FSMC); // D9
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource13, GPIO_AF_FSMC); // D10
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_FSMC); // D11
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource15, GPIO_AF_FSMC); // D12

    init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_5 |
 8000e34:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000e38:	9300      	str	r3, [sp, #0]
        GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
        GPIO_Pin_11 | GPIO_Pin_14 | GPIO_Pin_15;
    init.GPIO_Mode = GPIO_Mode_AF;
 8000e3a:	f88d 8004 	strb.w	r8, [sp, #4]
    init.GPIO_Speed = GPIO_Speed_100MHz;
 8000e3e:	f88d 7005 	strb.w	r7, [sp, #5]
    // init.GPIO_Speed=GPIO_Speed_50MHz;
    // init.GPIO_Speed=GPIO_Speed_2MHz;
    init.GPIO_OType = GPIO_OType_PP;
 8000e42:	f88d 6006 	strb.w	r6, [sp, #6]
    init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000e46:	f88d 6007 	strb.w	r6, [sp, #7]

    GPIO_Init(GPIOD, &init);
 8000e4a:	f001 fc45 	bl	80026d8 <GPIO_Init>

// PORTE
    init.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
 8000e4e:	f64f 7380 	movw	r3, #65408	; 0xff80
    // init.GPIO_Speed=GPIO_Speed_50MHz;
    // init.GPIO_Speed=GPIO_Speed_2MHz;
    init.GPIO_OType = GPIO_OType_PP;
    init.GPIO_PuPd = GPIO_PuPd_NOPULL;

    GPIO_Init(GPIOE, &init);
 8000e52:	4628      	mov	r0, r5
 8000e54:	4669      	mov	r1, sp
    init.GPIO_PuPd = GPIO_PuPd_NOPULL;

    GPIO_Init(GPIOD, &init);

// PORTE
    init.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
 8000e56:	9300      	str	r3, [sp, #0]
        GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |
        GPIO_Pin_15;
    init.GPIO_Mode = GPIO_Mode_AF;
 8000e58:	f88d 8004 	strb.w	r8, [sp, #4]
    init.GPIO_Speed = GPIO_Speed_100MHz;
 8000e5c:	f88d 7005 	strb.w	r7, [sp, #5]
    // init.GPIO_Speed=GPIO_Speed_50MHz;
    // init.GPIO_Speed=GPIO_Speed_2MHz;
    init.GPIO_OType = GPIO_OType_PP;
 8000e60:	f88d 6006 	strb.w	r6, [sp, #6]
    init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000e64:	f88d 6007 	strb.w	r6, [sp, #7]

    GPIO_Init(GPIOE, &init);
 8000e68:	f001 fc36 	bl	80026d8 <GPIO_Init>
}
 8000e6c:	b003      	add	sp, #12
 8000e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e72:	bf00      	nop

08000e74 <initFSMC>:
/*
* Initialise NOR/SRAM bank 1
*/

void initFSMC() 
{
 8000e74:	b570      	push	{r4, r5, r6, lr}
    // FSMC and TFTLCD
    fsmcData        =(uint16_t*)  0x60020000; // sets a16
 8000e76:	f240 0260 	movw	r2, #96	; 0x60
 8000e7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000e7e:	2600      	movs	r6, #0
    fsmcRegister    =(uint16_t*)  0x60000000; // clears a16
 8000e80:	f240 0364 	movw	r3, #100	; 0x64
 8000e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
*/

void initFSMC() 
{
    // FSMC and TFTLCD
    fsmcData        =(uint16_t*)  0x60020000; // sets a16
 8000e88:	f2c6 0602 	movt	r6, #24578	; 0x6002
    
    
    FSMC_NORSRAMTimingInitTypeDef timing;//={0};
    FSMC_NORSRAMInitTypeDef init;//={0};

    RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC,ENABLE);
 8000e8c:	2101      	movs	r1, #1
*/

void initFSMC() 
{
    // FSMC and TFTLCD
    fsmcData        =(uint16_t*)  0x60020000; // sets a16
 8000e8e:	6016      	str	r6, [r2, #0]
    fsmcRegister    =(uint16_t*)  0x60000000; // clears a16
 8000e90:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
/*
* Initialise NOR/SRAM bank 1
*/

void initFSMC() 
{
 8000e94:	b096      	sub	sp, #88	; 0x58
    
    
    FSMC_NORSRAMTimingInitTypeDef timing;//={0};
    FSMC_NORSRAMInitTypeDef init;//={0};

    RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC,ENABLE);
 8000e96:	4608      	mov	r0, r1

void initFSMC() 
{
    // FSMC and TFTLCD
    fsmcData        =(uint16_t*)  0x60020000; // sets a16
    fsmcRegister    =(uint16_t*)  0x60000000; // clears a16
 8000e98:	601a      	str	r2, [r3, #0]
    RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC,ENABLE);

    timing.FSMC_AddressSetupTime=2; // want 2 : 
    timing.FSMC_DataSetupTime=5;  // keep
    timing.FSMC_AccessMode=FSMC_AccessMode_B/*FSMC_AccessMode_A*/; // B? This is how he does it in ili9325
    timing.FSMC_CLKDivision=1; //  ?
 8000e9a:	460d      	mov	r5, r1
    
    
    FSMC_NORSRAMTimingInitTypeDef timing;//={0};
    FSMC_NORSRAMInitTypeDef init;//={0};

    RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC,ENABLE);
 8000e9c:	f001 fe4a 	bl	8002b34 <RCC_AHB3PeriphClockCmd>

    timing.FSMC_AddressSetupTime=2; // want 2 : 
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	920f      	str	r2, [sp, #60]	; 0x3c
    timing.FSMC_DataSetupTime=5;  // keep
 8000ea4:	2205      	movs	r2, #5
 8000ea6:	9211      	str	r2, [sp, #68]	; 0x44
    timing.FSMC_AccessMode=FSMC_AccessMode_B/*FSMC_AccessMode_A*/; // B? This is how he does it in ili9325
 8000ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eac:	9215      	str	r2, [sp, #84]	; 0x54
// itiming.nitialise how the FSMC will work and then enable it

    init.FSMC_Bank=FSMC_Bank1_NORSRAM1; // keep
    init.FSMC_DataAddressMux=FSMC_DataAddressMux_Disable; // keep
    init.FSMC_MemoryType=FSMC_MemoryType_SRAM; // keep
    init.FSMC_MemoryDataWidth=FSMC_MemoryDataWidth_16b; // make 8 bit?
 8000eae:	2210      	movs	r2, #16

    timing.FSMC_AddressSetupTime=2; // want 2 : 
    timing.FSMC_DataSetupTime=5;  // keep
    timing.FSMC_AccessMode=FSMC_AccessMode_B/*FSMC_AccessMode_A*/; // B? This is how he does it in ili9325
    timing.FSMC_CLKDivision=1; //  ?
    timing.FSMC_DataLatency=0;
 8000eb0:	2400      	movs	r4, #0
    init.FSMC_WaitSignalActive=FSMC_WaitSignalActive_BeforeWaitState; // keep
    init.FSMC_WriteOperation=FSMC_WriteOperation_Enable; // keep
    init.FSMC_WaitSignal=FSMC_WaitSignal_Disable; // keep
    init.FSMC_ExtendedMode=FSMC_ExtendedMode_Disable; // keep
    init.FSMC_WriteBurst=FSMC_WriteBurst_Disable; // keep 
    init.FSMC_ReadWriteTimingStruct=&timing;
 8000eb2:	ab0f      	add	r3, sp, #60	; 0x3c
// itiming.nitialise how the FSMC will work and then enable it

    init.FSMC_Bank=FSMC_Bank1_NORSRAM1; // keep
    init.FSMC_DataAddressMux=FSMC_DataAddressMux_Disable; // keep
    init.FSMC_MemoryType=FSMC_MemoryType_SRAM; // keep
    init.FSMC_MemoryDataWidth=FSMC_MemoryDataWidth_16b; // make 8 bit?
 8000eb4:	9203      	str	r2, [sp, #12]
    init.FSMC_WriteBurst=FSMC_WriteBurst_Disable; // keep 
    init.FSMC_ReadWriteTimingStruct=&timing;
    init.FSMC_WriteTimingStruct=&timing;
    init.FSMC_AsynchronousWait=FSMC_AsynchronousWait_Disable; // keep

    FSMC_NORSRAMInit(&init);
 8000eb6:	4668      	mov	r0, sp
    init.FSMC_MemoryDataWidth=FSMC_MemoryDataWidth_16b; // make 8 bit?
    init.FSMC_BurstAccessMode=FSMC_BurstAccessMode_Disable; // keep
    init.FSMC_WaitSignalPolarity=FSMC_WaitSignalPolarity_Low;  // keep 
    init.FSMC_WrapMode=FSMC_WrapMode_Disable;  // keep 
    init.FSMC_WaitSignalActive=FSMC_WaitSignalActive_BeforeWaitState; // keep
    init.FSMC_WriteOperation=FSMC_WriteOperation_Enable; // keep
 8000eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC,ENABLE);

    timing.FSMC_AddressSetupTime=2; // want 2 : 
    timing.FSMC_DataSetupTime=5;  // keep
    timing.FSMC_AccessMode=FSMC_AccessMode_B/*FSMC_AccessMode_A*/; // B? This is how he does it in ili9325
    timing.FSMC_CLKDivision=1; //  ?
 8000ebc:	9513      	str	r5, [sp, #76]	; 0x4c
    timing.FSMC_DataLatency=0;
 8000ebe:	9414      	str	r4, [sp, #80]	; 0x50
    timing.FSMC_BusTurnAroundDuration=0;
 8000ec0:	9412      	str	r4, [sp, #72]	; 0x48
    timing.FSMC_AddressHoldTime=0;
 8000ec2:	9410      	str	r4, [sp, #64]	; 0x40
// itiming.nitialise how the FSMC will work and then enable it

    init.FSMC_Bank=FSMC_Bank1_NORSRAM1; // keep
 8000ec4:	9400      	str	r4, [sp, #0]
    init.FSMC_DataAddressMux=FSMC_DataAddressMux_Disable; // keep
 8000ec6:	9401      	str	r4, [sp, #4]
    init.FSMC_MemoryType=FSMC_MemoryType_SRAM; // keep
 8000ec8:	9402      	str	r4, [sp, #8]
    init.FSMC_MemoryDataWidth=FSMC_MemoryDataWidth_16b; // make 8 bit?
    init.FSMC_BurstAccessMode=FSMC_BurstAccessMode_Disable; // keep
 8000eca:	9404      	str	r4, [sp, #16]
    init.FSMC_WaitSignalPolarity=FSMC_WaitSignalPolarity_Low;  // keep 
 8000ecc:	9406      	str	r4, [sp, #24]
    init.FSMC_WrapMode=FSMC_WrapMode_Disable;  // keep 
 8000ece:	9407      	str	r4, [sp, #28]
    init.FSMC_WaitSignalActive=FSMC_WaitSignalActive_BeforeWaitState; // keep
 8000ed0:	9408      	str	r4, [sp, #32]
    init.FSMC_WriteOperation=FSMC_WriteOperation_Enable; // keep
 8000ed2:	9209      	str	r2, [sp, #36]	; 0x24
    init.FSMC_WaitSignal=FSMC_WaitSignal_Disable; // keep
 8000ed4:	940a      	str	r4, [sp, #40]	; 0x28
    init.FSMC_ExtendedMode=FSMC_ExtendedMode_Disable; // keep
 8000ed6:	940b      	str	r4, [sp, #44]	; 0x2c
    init.FSMC_WriteBurst=FSMC_WriteBurst_Disable; // keep 
 8000ed8:	940c      	str	r4, [sp, #48]	; 0x30
    init.FSMC_ReadWriteTimingStruct=&timing;
 8000eda:	930d      	str	r3, [sp, #52]	; 0x34
    init.FSMC_WriteTimingStruct=&timing;
 8000edc:	930e      	str	r3, [sp, #56]	; 0x38
    init.FSMC_AsynchronousWait=FSMC_AsynchronousWait_Disable; // keep
 8000ede:	9405      	str	r4, [sp, #20]

    FSMC_NORSRAMInit(&init);
 8000ee0:	f001 f8c8 	bl	8002074 <FSMC_NORSRAMInit>
    FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1,ENABLE);
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	f001 f960 	bl	80021ac <FSMC_NORSRAMCmd>
}
 8000eec:	b016      	add	sp, #88	; 0x58
 8000eee:	bd70      	pop	{r4, r5, r6, pc}

08000ef0 <uDelay>:
* @retval None
*/
void uDelay (const uint32_t usec)
{
  uint32_t count = 0;
  if (usec==0) return;
 8000ef0:	b180      	cbz	r0, 8000f14 <uDelay+0x24>
  const uint32_t utime = (120 * usec / 7);
 8000ef2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8000ef6:	f644 1325 	movw	r3, #18725	; 0x4925
 8000efa:	00c0      	lsls	r0, r0, #3
 8000efc:	f2c2 4392 	movt	r3, #9362	; 0x2492
 8000f00:	fba3 2300 	umull	r2, r3, r3, r0
 8000f04:	1ac2      	subs	r2, r0, r3
 8000f06:	eb03 0252 	add.w	r2, r3, r2, lsr #1
 8000f0a:	0892      	lsrs	r2, r2, #2
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void uDelay (const uint32_t usec)
{
  uint32_t count = 0;
 8000f0c:	2300      	movs	r3, #0
  if (usec==0) return;
  const uint32_t utime = (120 * usec / 7);
  do
  {
    if ( ++count > utime )
 8000f0e:	3301      	adds	r3, #1
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d2fc      	bcs.n	8000f0e <uDelay+0x1e>
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <delayMillis>:
* Delay for the given milliseconds
*/

void delayMillis(uint32_t millis) 
{
    uDelay(millis * 1000);  
 8000f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1c:	fb03 f000 	mul.w	r0, r3, r0
 8000f20:	f7ff bfe6 	b.w	8000ef0 <uDelay>

08000f24 <reset>:
    }
}


void reset(void) 
{
 8000f24:	b510      	push	{r4, lr}
    GPIO_ResetBits(GPIOE, GPIO_Pin_1);
 8000f26:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000f2a:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000f2e:	2102      	movs	r1, #2
 8000f30:	4620      	mov	r0, r4
 8000f32:	f001 fc63 	bl	80027fc <GPIO_ResetBits>
    // digitalWrite(_reset, LOW);
    delayMillis(2); 
 8000f36:	2002      	movs	r0, #2
 8000f38:	f7ff ffee 	bl	8000f18 <delayMillis>
    
    // digitalWrite(_reset, HIGH);
    GPIO_SetBits(GPIOE, GPIO_Pin_1);
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	2102      	movs	r1, #2
 8000f40:	f001 fc5a 	bl	80027f8 <GPIO_SetBits>
    printf("Reset TFT - \n\r");
 8000f44:	f243 50f4 	movw	r0, #13812	; 0x35f4
 8000f48:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f4c:	f7ff fea4 	bl	8000c98 <tfp_printf>
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 8000f50:	f240 0360 	movw	r3, #96	; 0x60
 8000f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f58:	2200      	movs	r2, #0
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	801a      	strh	r2, [r3, #0]
    // uDelay(0);
    *fsmcData=data<<8;
 8000f5e:	801a      	strh	r2, [r3, #0]
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 8000f60:	801a      	strh	r2, [r3, #0]
    // uDelay(0);
    *fsmcData=data<<8;
 8000f62:	801a      	strh	r2, [r3, #0]
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 8000f64:	801a      	strh	r2, [r3, #0]
    // uDelay(0);
    *fsmcData=data<<8;
 8000f66:	801a      	strh	r2, [r3, #0]
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 8000f68:	801a      	strh	r2, [r3, #0]
    // uDelay(0);
    *fsmcData=data<<8;
 8000f6a:	801a      	strh	r2, [r3, #0]
  // resync
    writeData(0);
    writeData(0);
    writeData(0);  
    writeData(0);
}
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	bf00      	nop

08000f70 <getRotation>:
    }
}

uint8_t getRotation(void) 
{
    return rotation;
 8000f70:	f240 035c 	movw	r3, #92	; 0x5c
 8000f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f78:	7818      	ldrb	r0, [r3, #0]
}
 8000f7a:	4770      	bx	lr

08000f7c <setCursor>:
    writeCommand(0x0022);            // Write Data to GRAM (R22h)
}

void setCursor(uint16_t x, uint16_t y)
{
    cursor_x = x;
 8000f7c:	f240 026a 	movw	r2, #106	; 0x6a
    cursor_y = y;
 8000f80:	f240 0350 	movw	r3, #80	; 0x50
    writeCommand(0x0022);            // Write Data to GRAM (R22h)
}

void setCursor(uint16_t x, uint16_t y)
{
    cursor_x = x;
 8000f84:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cursor_y = y;
 8000f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    writeCommand(0x0022);            // Write Data to GRAM (R22h)
}

void setCursor(uint16_t x, uint16_t y)
{
    cursor_x = x;
 8000f8c:	8010      	strh	r0, [r2, #0]
    cursor_y = y;
 8000f8e:	8019      	strh	r1, [r3, #0]
}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <setTextSize>:

void setTextSize(uint8_t s)
{
    textsize = s;
 8000f94:	f240 036c 	movw	r3, #108	; 0x6c
 8000f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f9c:	7018      	strb	r0, [r3, #0]
}
 8000f9e:	4770      	bx	lr

08000fa0 <setTextColor>:

void setTextColor(uint16_t c)
{
    textcolor = c;
 8000fa0:	f240 0370 	movw	r3, #112	; 0x70
 8000fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fa8:	8018      	strh	r0, [r3, #0]
}
 8000faa:	4770      	bx	lr

08000fac <width>:
uint16_t width(void)
{
    return _width;
 8000fac:	f240 0368 	movw	r3, #104	; 0x68
 8000fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fb4:	8818      	ldrh	r0, [r3, #0]
}
 8000fb6:	4770      	bx	lr

08000fb8 <height>:
uint16_t height(void)
{
    return _height;
 8000fb8:	f240 036e 	movw	r3, #110	; 0x6e
 8000fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fc0:	8818      	ldrh	r0, [r3, #0]
}
 8000fc2:	4770      	bx	lr

08000fc4 <Color565>:


uint16_t Color565(uint8_t r, uint8_t g, uint8_t b)
{
    uint16_t c;
    c = r >> 3;
 8000fc4:	08c0      	lsrs	r0, r0, #3
    c <<= 6;
    c |= g >> 2;
 8000fc6:	0889      	lsrs	r1, r1, #2
 8000fc8:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    c <<= 5;
    c |= b >> 3;
 8000fcc:	08d2      	lsrs	r2, r2, #3

    return c;
 8000fce:	ea42 1040 	orr.w	r0, r2, r0, lsl #5
}
 8000fd2:	4770      	bx	lr

08000fd4 <writeData>:
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 8000fd4:	f240 0360 	movw	r3, #96	; 0x60
 8000fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    // uDelay(0);
    *fsmcData=data<<8;
 8000fdc:	0202      	lsls	r2, r0, #8
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 8000fde:	681b      	ldr	r3, [r3, #0]
    // uDelay(0);
    *fsmcData=data<<8;
 8000fe0:	b292      	uxth	r2, r2
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 8000fe2:	8018      	strh	r0, [r3, #0]
    // uDelay(0);
    *fsmcData=data<<8;
 8000fe4:	801a      	strh	r2, [r3, #0]
    // return retvl;
}
 8000fe6:	4770      	bx	lr

08000fe8 <writeCommand>:
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8000fe8:	f240 0364 	movw	r3, #100	; 0x64
 8000fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    // uDelay(0);
    *fsmcRegister=cmd<<8;
 8000ff0:	0202      	lsls	r2, r0, #8
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8000ff2:	681b      	ldr	r3, [r3, #0]
    // uDelay(0);
    *fsmcRegister=cmd<<8;
 8000ff4:	b292      	uxth	r2, r2
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8000ff6:	8018      	strh	r0, [r3, #0]
    // uDelay(0);
    *fsmcRegister=cmd<<8;
 8000ff8:	801a      	strh	r2, [r3, #0]
}
 8000ffa:	4770      	bx	lr

08000ffc <readData>:
// d[8:15] version
uint16_t readData() 
{
    uint16_t d = 0;

    d = *fsmcData;
 8000ffc:	f240 0360 	movw	r3, #96	; 0x60
 8001000:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	8818      	ldrh	r0, [r3, #0]
    // d <<= 8;
    // uDelay(0);
    d |= *fsmcData>>8;
 8001008:	881b      	ldrh	r3, [r3, #0]
// d[8:15] version
uint16_t readData() 
{
    uint16_t d = 0;

    d = *fsmcData;
 800100a:	b280      	uxth	r0, r0
    // d <<= 8;
    // uDelay(0);
    d |= *fsmcData>>8;
 800100c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    return d;
 8001010:	4318      	orrs	r0, r3
}
 8001012:	4770      	bx	lr

08001014 <readRegister>:
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8001014:	f240 0264 	movw	r2, #100	; 0x64
 8001018:	f2c2 0200 	movt	r2, #8192	; 0x2000
// d[8:15] version
uint16_t readData() 
{
    uint16_t d = 0;

    d = *fsmcData;
 800101c:	f240 0360 	movw	r3, #96	; 0x60
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8001020:	6812      	ldr	r2, [r2, #0]
// d[8:15] version
uint16_t readData() 
{
    uint16_t d = 0;

    d = *fsmcData;
 8001022:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001026:	681b      	ldr	r3, [r3, #0]
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8001028:	8010      	strh	r0, [r2, #0]
    // uDelay(0);
    *fsmcRegister=cmd<<8;
 800102a:	0200      	lsls	r0, r0, #8
 800102c:	b280      	uxth	r0, r0
 800102e:	8010      	strh	r0, [r2, #0]
// d[8:15] version
uint16_t readData() 
{
    uint16_t d = 0;

    d = *fsmcData;
 8001030:	8818      	ldrh	r0, [r3, #0]
    // d <<= 8;
    // uDelay(0);
    d |= *fsmcData>>8;
 8001032:	881b      	ldrh	r3, [r3, #0]
// d[8:15] version
uint16_t readData() 
{
    uint16_t d = 0;

    d = *fsmcData;
 8001034:	b280      	uxth	r0, r0
    // d <<= 8;
    // uDelay(0);
    d |= *fsmcData>>8;
 8001036:	f3c3 2307 	ubfx	r3, r3, #8, #8

uint16_t readRegister(uint16_t addr) 
{
   writeCommand(addr);
   // uDelay(10);
   return readData();
 800103a:	4318      	orrs	r0, r3
}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <writeRegister>:
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8001040:	f240 0364 	movw	r3, #100	; 0x64
 8001044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    // uDelay(0);
    *fsmcRegister=cmd<<8;
 8001048:	0202      	lsls	r2, r0, #8
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 800104a:	681b      	ldr	r3, [r3, #0]
    // uDelay(0);
    *fsmcRegister=cmd<<8;
 800104c:	b292      	uxth	r2, r2
   return readData();
}


void writeRegister(uint16_t addr, uint16_t data) 
{
 800104e:	b510      	push	{r4, lr}
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8001050:	8018      	strh	r0, [r3, #0]
    // uDelay(0);
    *fsmcRegister=cmd<<8;
 8001052:	801a      	strh	r2, [r3, #0]


void writeRegister(uint16_t addr, uint16_t data) 
{
    writeCommand(addr);
    uDelay(10);
 8001054:	200a      	movs	r0, #10
   return readData();
}


void writeRegister(uint16_t addr, uint16_t data) 
{
 8001056:	460c      	mov	r4, r1
    writeCommand(addr);
    uDelay(10);
 8001058:	f7ff ff4a 	bl	8000ef0 <uDelay>
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 800105c:	f240 0360 	movw	r3, #96	; 0x60
 8001060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    // uDelay(0);
    *fsmcData=data<<8;
 8001064:	0222      	lsls	r2, r4, #8
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 8001066:	681b      	ldr	r3, [r3, #0]
    // uDelay(0);
    *fsmcData=data<<8;
 8001068:	b292      	uxth	r2, r2
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 800106a:	801c      	strh	r4, [r3, #0]
    // uDelay(0);
    *fsmcData=data<<8;
 800106c:	801a      	strh	r2, [r3, #0]
void writeRegister(uint16_t addr, uint16_t data) 
{
    writeCommand(addr);
    uDelay(10);
    writeData(data);
}
 800106e:	bd10      	pop	{r4, pc}

08001070 <drawPixel>:


}

void drawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001070:	b570      	push	{r4, r5, r6, lr}
  // check rotation, move pixel around if necessary
  switch (rotation) {
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <drawPixel+0x7c>)
 8001074:	781d      	ldrb	r5, [r3, #0]
 8001076:	2d02      	cmp	r5, #2


}

void drawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001078:	4603      	mov	r3, r0
 800107a:	460c      	mov	r4, r1
 800107c:	4616      	mov	r6, r2
  // check rotation, move pixel around if necessary
  switch (rotation) {
 800107e:	d02d      	beq.n	80010dc <drawPixel+0x6c>
 8001080:	2d03      	cmp	r5, #3
 8001082:	d025      	beq.n	80010d0 <drawPixel+0x60>
 8001084:	2d01      	cmp	r5, #1
  case 1:
    swap(x, y);
    x = TFTWIDTH - x - 1;
 8001086:	bf02      	ittt	eq
 8001088:	f1c1 02ef 	rsbeq	r2, r1, #239	; 0xef
void drawPixel(uint16_t x, uint16_t y, uint16_t color)
{
  // check rotation, move pixel around if necessary
  switch (rotation) {
  case 1:
    swap(x, y);
 800108c:	4604      	moveq	r4, r0
    x = TFTWIDTH - x - 1;
 800108e:	b293      	uxtheq	r3, r2
    swap(x, y);
    y = TFTHEIGHT - y - 1;
    break;
  }
    
  if ((x >= TFTWIDTH) || (y >= TFTHEIGHT)) return;
 8001090:	2bef      	cmp	r3, #239	; 0xef
 8001092:	bf94      	ite	ls
 8001094:	2200      	movls	r2, #0
 8001096:	2201      	movhi	r2, #1
 8001098:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 800109c:	bf28      	it	cs
 800109e:	f042 0201 	orrcs.w	r2, r2, #1
 80010a2:	b9a2      	cbnz	r2, 80010ce <drawPixel+0x5e>
  writeRegister(TFTLCD_GRAM_HOR_AD, x); // GRAM Address Set (Horizontal Address) (R20h)
 80010a4:	4619      	mov	r1, r3
 80010a6:	2020      	movs	r0, #32
 80010a8:	f7ff ffca 	bl	8001040 <writeRegister>
  // uDelay(0);
  writeRegister(TFTLCD_GRAM_VER_AD, y); // GRAM Address Set (Vertical Address) (R21h)
 80010ac:	2021      	movs	r0, #33	; 0x21
 80010ae:	4621      	mov	r1, r4
 80010b0:	f7ff ffc6 	bl	8001040 <writeRegister>
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <drawPixel+0x80>)
 80010b6:	681a      	ldr	r2, [r3, #0]
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <drawPixel+0x84>)
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 80010ba:	2022      	movs	r0, #34	; 0x22
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 80010bc:	681b      	ldr	r3, [r3, #0]
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 80010be:	8010      	strh	r0, [r2, #0]
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
    // uDelay(0);
    *fsmcData=data<<8;
 80010c0:	0231      	lsls	r1, r6, #8
 80010c2:	b289      	uxth	r1, r1
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
    // uDelay(0);
    *fsmcRegister=cmd<<8;
 80010c4:	f44f 5008 	mov.w	r0, #8704	; 0x2200
 80010c8:	8010      	strh	r0, [r2, #0]
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 80010ca:	801e      	strh	r6, [r3, #0]
    // uDelay(0);
    *fsmcData=data<<8;
 80010cc:	8019      	strh	r1, [r3, #0]
 80010ce:	bd70      	pop	{r4, r5, r6, pc}
    x = TFTWIDTH - x - 1;
    y = TFTHEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = TFTHEIGHT - y - 1;
 80010d0:	f5c0 739e 	rsb	r3, r0, #316	; 0x13c
 80010d4:	1cda      	adds	r2, r3, #3
 80010d6:	b294      	uxth	r4, r2
  case 2:
    x = TFTWIDTH - x - 1;
    y = TFTHEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
 80010d8:	460b      	mov	r3, r1
    y = TFTHEIGHT - y - 1;
    break;
 80010da:	e7d9      	b.n	8001090 <drawPixel+0x20>
    swap(x, y);
    x = TFTWIDTH - x - 1;
    break;
  case 2:
    x = TFTWIDTH - x - 1;
    y = TFTHEIGHT - y - 1;
 80010dc:	f5c1 749e 	rsb	r4, r1, #316	; 0x13c
  case 1:
    swap(x, y);
    x = TFTWIDTH - x - 1;
    break;
  case 2:
    x = TFTWIDTH - x - 1;
 80010e0:	f1c0 03ef 	rsb	r3, r0, #239	; 0xef
    y = TFTHEIGHT - y - 1;
 80010e4:	3403      	adds	r4, #3
  case 1:
    swap(x, y);
    x = TFTWIDTH - x - 1;
    break;
  case 2:
    x = TFTWIDTH - x - 1;
 80010e6:	b29b      	uxth	r3, r3
    y = TFTHEIGHT - y - 1;
 80010e8:	b2a4      	uxth	r4, r4
    break;
 80010ea:	e7d1      	b.n	8001090 <drawPixel+0x20>
 80010ec:	2000005c 	.word	0x2000005c
 80010f0:	20000064 	.word	0x20000064
 80010f4:	20000060 	.word	0x20000060

080010f8 <drawCircleHelper>:

  drawCircleHelper(x0, y0, r, 0xF, color);
}

void drawCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t color) 
{
 80010f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int16_t f = 1 - r;
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;
 80010fc:	b294      	uxth	r4, r2

  drawCircleHelper(x0, y0, r, 0xF, color);
}

void drawCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t color) 
{
 80010fe:	b08b      	sub	sp, #44	; 0x2c
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;


    while (x<y) 
 8001100:	b225      	sxth	r5, r4
 8001102:	2d00      	cmp	r5, #0
 8001104:	9502      	str	r5, [sp, #8]

  drawCircleHelper(x0, y0, r, 0xF, color);
}

void drawCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t color) 
{
 8001106:	9004      	str	r0, [sp, #16]
 8001108:	9105      	str	r1, [sp, #20]
 800110a:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;


    while (x<y) 
 800110e:	f340 80a4 	ble.w	800125a <drawCircleHelper+0x162>

void drawCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t color) 
{
    int16_t f = 1 - r;
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
 8001112:	ebc2 31c2 	rsb	r1, r2, r2, lsl #15
 8001116:	0049      	lsls	r1, r1, #1
  drawCircleHelper(x0, y0, r, 0xF, color);
}

void drawCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t color) 
{
    int16_t f = 1 - r;
 8001118:	f1c2 0501 	rsb	r5, r2, #1
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
 800111c:	b289      	uxth	r1, r1
 800111e:	9a05      	ldr	r2, [sp, #20]
 8001120:	9103      	str	r1, [sp, #12]
 8001122:	f003 0104 	and.w	r1, r3, #4
 8001126:	f102 39ff 	add.w	r9, r2, #4294967295
 800112a:	1c57      	adds	r7, r2, #1
 800112c:	f100 38ff 	add.w	r8, r0, #4294967295
 8001130:	f003 0202 	and.w	r2, r3, #2
 8001134:	f100 0a01 	add.w	sl, r0, #1
 8001138:	9106      	str	r1, [sp, #24]
 800113a:	f003 0108 	and.w	r1, r3, #8
 800113e:	f003 0301 	and.w	r3, r3, #1
  drawCircleHelper(x0, y0, r, 0xF, color);
}

void drawCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t color) 
{
    int16_t f = 1 - r;
 8001142:	b2ad      	uxth	r5, r5
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
 8001144:	9208      	str	r2, [sp, #32]
 8001146:	9109      	str	r1, [sp, #36]	; 0x24
 8001148:	9307      	str	r3, [sp, #28]
 800114a:	fa1f f989 	uxth.w	r9, r9
 800114e:	fa1f f888 	uxth.w	r8, r8
 8001152:	b2bf      	uxth	r7, r7
 8001154:	fa1f fa8a 	uxth.w	sl, sl
    int16_t x = 0;
 8001158:	2600      	movs	r6, #0
 800115a:	e01a      	b.n	8001192 <drawCircleHelper+0x9a>
        if (cornername & 0x4) 
        {
            drawPixel(x0 + x, y0 + y, color);
            drawPixel(x0 + y, y0 + x, color);
        } 
        if (cornername & 0x2) 
 800115c:	9b08      	ldr	r3, [sp, #32]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d141      	bne.n	80011e6 <drawCircleHelper+0xee>
        {
            drawPixel(x0 + x, y0 - y, color);
            drawPixel(x0 + y, y0 - x, color);
        }
        if (cornername & 0x8) 
 8001162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001164:	2b00      	cmp	r3, #0
 8001166:	d152      	bne.n	800120e <drawCircleHelper+0x116>
        {
            drawPixel(x0 - y, y0 + x, color);
            drawPixel(x0 - x, y0 + y, color);
        }
        if (cornername & 0x1) 
 8001168:	9b07      	ldr	r3, [sp, #28]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d163      	bne.n	8001236 <drawCircleHelper+0x13e>
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;


    while (x<y) 
 800116e:	9902      	ldr	r1, [sp, #8]
 8001170:	b233      	sxth	r3, r6
            drawPixel(x0 - x, y0 + y, color);
        }
        if (cornername & 0x1) 
        {
            drawPixel(x0 - y, y0 - x, color);
            drawPixel(x0 - x, y0 - y, color);
 8001172:	3701      	adds	r7, #1
 8001174:	f109 39ff 	add.w	r9, r9, #4294967295
 8001178:	f108 38ff 	add.w	r8, r8, #4294967295
 800117c:	f10a 0a01 	add.w	sl, sl, #1
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;


    while (x<y) 
 8001180:	4299      	cmp	r1, r3
            drawPixel(x0 - x, y0 + y, color);
        }
        if (cornername & 0x1) 
        {
            drawPixel(x0 - y, y0 - x, color);
            drawPixel(x0 - x, y0 - y, color);
 8001182:	fa1f f989 	uxth.w	r9, r9
 8001186:	fa1f f888 	uxth.w	r8, r8
 800118a:	b2bf      	uxth	r7, r7
 800118c:	fa1f fa8a 	uxth.w	sl, sl
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;


    while (x<y) 
 8001190:	dd63      	ble.n	800125a <drawCircleHelper+0x162>
    {
        if (f >= 0)
 8001192:	042b      	lsls	r3, r5, #16
 8001194:	d40a      	bmi.n	80011ac <drawCircleHelper+0xb4>
        {
            y--;
            ddF_y += 2;
 8001196:	9a03      	ldr	r2, [sp, #12]
 8001198:	1c93      	adds	r3, r2, #2
 800119a:	b29b      	uxth	r3, r3

    while (x<y) 
    {
        if (f >= 0)
        {
            y--;
 800119c:	3c01      	subs	r4, #1
            ddF_y += 2;
            f += ddF_y;
 800119e:	195d      	adds	r5, r3, r5

    while (x<y) 
    {
        if (f >= 0)
        {
            y--;
 80011a0:	b2a4      	uxth	r4, r4
            ddF_y += 2;
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	9303      	str	r3, [sp, #12]
 80011a6:	b223      	sxth	r3, r4
            f += ddF_y;
 80011a8:	b2ad      	uxth	r5, r5
 80011aa:	9302      	str	r3, [sp, #8]
        }
        x++;
 80011ac:	3601      	adds	r6, #1
 80011ae:	b2b6      	uxth	r6, r6
  drawPixel(x0-r, y0, color);

  drawCircleHelper(x0, y0, r, 0xF, color);
}

void drawCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t color) 
 80011b0:	eb05 0546 	add.w	r5, r5, r6, lsl #1
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
        if (cornername & 0x4) 
 80011b4:	9b06      	ldr	r3, [sp, #24]
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
 80011b6:	3501      	adds	r5, #1
 80011b8:	b2ad      	uxth	r5, r5
        if (cornername & 0x4) 
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0ce      	beq.n	800115c <drawCircleHelper+0x64>
        {
            drawPixel(x0 + x, y0 + y, color);
 80011be:	9a05      	ldr	r2, [sp, #20]
 80011c0:	b2a3      	uxth	r3, r4
 80011c2:	1899      	adds	r1, r3, r2
 80011c4:	b289      	uxth	r1, r1
 80011c6:	465a      	mov	r2, fp
 80011c8:	4650      	mov	r0, sl
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	f7ff ff50 	bl	8001070 <drawPixel>
            drawPixel(x0 + y, y0 + x, color);
 80011d0:	9904      	ldr	r1, [sp, #16]
 80011d2:	9b01      	ldr	r3, [sp, #4]
 80011d4:	185b      	adds	r3, r3, r1
 80011d6:	b298      	uxth	r0, r3
 80011d8:	4639      	mov	r1, r7
 80011da:	465a      	mov	r2, fp
 80011dc:	f7ff ff48 	bl	8001070 <drawPixel>
        } 
        if (cornername & 0x2) 
 80011e0:	9b08      	ldr	r3, [sp, #32]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0bd      	beq.n	8001162 <drawCircleHelper+0x6a>
        {
            drawPixel(x0 + x, y0 - y, color);
 80011e6:	9a05      	ldr	r2, [sp, #20]
 80011e8:	b2a3      	uxth	r3, r4
 80011ea:	1ad1      	subs	r1, r2, r3
 80011ec:	b289      	uxth	r1, r1
 80011ee:	465a      	mov	r2, fp
 80011f0:	4650      	mov	r0, sl
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	f7ff ff3c 	bl	8001070 <drawPixel>
            drawPixel(x0 + y, y0 - x, color);
 80011f8:	9904      	ldr	r1, [sp, #16]
 80011fa:	9b01      	ldr	r3, [sp, #4]
 80011fc:	185b      	adds	r3, r3, r1
 80011fe:	b298      	uxth	r0, r3
 8001200:	4649      	mov	r1, r9
 8001202:	465a      	mov	r2, fp
 8001204:	f7ff ff34 	bl	8001070 <drawPixel>
        }
        if (cornername & 0x8) 
 8001208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0ac      	beq.n	8001168 <drawCircleHelper+0x70>
        {
            drawPixel(x0 - y, y0 + x, color);
 800120e:	9904      	ldr	r1, [sp, #16]
 8001210:	b2a3      	uxth	r3, r4
 8001212:	1ac8      	subs	r0, r1, r3
 8001214:	b280      	uxth	r0, r0
 8001216:	4639      	mov	r1, r7
 8001218:	465a      	mov	r2, fp
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	f7ff ff28 	bl	8001070 <drawPixel>
            drawPixel(x0 - x, y0 + y, color);
 8001220:	9a05      	ldr	r2, [sp, #20]
 8001222:	9b01      	ldr	r3, [sp, #4]
 8001224:	189b      	adds	r3, r3, r2
 8001226:	b299      	uxth	r1, r3
 8001228:	4640      	mov	r0, r8
 800122a:	465a      	mov	r2, fp
 800122c:	f7ff ff20 	bl	8001070 <drawPixel>
        }
        if (cornername & 0x1) 
 8001230:	9b07      	ldr	r3, [sp, #28]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d09b      	beq.n	800116e <drawCircleHelper+0x76>
        {
            drawPixel(x0 - y, y0 - x, color);
 8001236:	9904      	ldr	r1, [sp, #16]
 8001238:	b2a3      	uxth	r3, r4
 800123a:	1ac8      	subs	r0, r1, r3
 800123c:	465a      	mov	r2, fp
 800123e:	4649      	mov	r1, r9
 8001240:	b280      	uxth	r0, r0
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	f7ff ff14 	bl	8001070 <drawPixel>
            drawPixel(x0 - x, y0 - y, color);
 8001248:	9a05      	ldr	r2, [sp, #20]
 800124a:	9b01      	ldr	r3, [sp, #4]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	b299      	uxth	r1, r3
 8001250:	4640      	mov	r0, r8
 8001252:	465a      	mov	r2, fp
 8001254:	f7ff ff0c 	bl	8001070 <drawPixel>
 8001258:	e789      	b.n	800116e <drawCircleHelper+0x76>
        }
    }
}
 800125a:	b00b      	add	sp, #44	; 0x2c
 800125c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001260 <drawCircle>:


// draw a circle outline

void drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) 
{
 8001260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001262:	460d      	mov	r5, r1
  drawPixel(x0, y0+r, color);
 8001264:	1851      	adds	r1, r2, r1


// draw a circle outline

void drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) 
{
 8001266:	b083      	sub	sp, #12
 8001268:	4614      	mov	r4, r2
  drawPixel(x0, y0+r, color);
 800126a:	b289      	uxth	r1, r1
 800126c:	461a      	mov	r2, r3


// draw a circle outline

void drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) 
{
 800126e:	461f      	mov	r7, r3
 8001270:	4606      	mov	r6, r0
  drawPixel(x0, y0+r, color);
 8001272:	f7ff fefd 	bl	8001070 <drawPixel>
  drawPixel(x0, y0-r, color);
 8001276:	1b29      	subs	r1, r5, r4
 8001278:	4630      	mov	r0, r6
 800127a:	463a      	mov	r2, r7
 800127c:	b289      	uxth	r1, r1
 800127e:	f7ff fef7 	bl	8001070 <drawPixel>
  drawPixel(x0+r, y0, color);
 8001282:	19a0      	adds	r0, r4, r6
 8001284:	4629      	mov	r1, r5
 8001286:	463a      	mov	r2, r7
 8001288:	b280      	uxth	r0, r0
 800128a:	f7ff fef1 	bl	8001070 <drawPixel>
  drawPixel(x0-r, y0, color);
 800128e:	1b30      	subs	r0, r6, r4
 8001290:	4629      	mov	r1, r5
 8001292:	463a      	mov	r2, r7
 8001294:	b280      	uxth	r0, r0
 8001296:	f7ff feeb 	bl	8001070 <drawPixel>

  drawCircleHelper(x0, y0, r, 0xF, color);
 800129a:	4630      	mov	r0, r6
 800129c:	4629      	mov	r1, r5
 800129e:	4622      	mov	r2, r4
 80012a0:	230f      	movs	r3, #15
 80012a2:	9700      	str	r7, [sp, #0]
 80012a4:	f7ff ff28 	bl	80010f8 <drawCircleHelper>
}
 80012a8:	b003      	add	sp, #12
 80012aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012ac <drawLine>:
    writeRegister(TFTLCD_ENTRY_MOD, 0x1030);
}

// bresenham's algorithm - thx wikpedia
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) 
{
 80012ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

// // need abs
uint16_t abs(int32_t _numIn)
{
    if (_numIn<0)
 80012b0:	ebb3 0801 	subs.w	r8, r3, r1
    writeRegister(TFTLCD_ENTRY_MOD, 0x1030);
}

// bresenham's algorithm - thx wikpedia
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) 
{
 80012b4:	b083      	sub	sp, #12
 80012b6:	4617      	mov	r7, r2
// // need abs
uint16_t abs(int32_t _numIn)
{
    if (_numIn<0)
    {
      return( (uint16_t)(_numIn*=-1));
 80012b8:	bf48      	it	mi
 80012ba:	f1c8 0800 	rsbmi	r8, r8, #0
    writeRegister(TFTLCD_ENTRY_MOD, 0x1030);
}

// bresenham's algorithm - thx wikpedia
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) 
{
 80012be:	460c      	mov	r4, r1
}

// // need abs
uint16_t abs(int32_t _numIn)
{
    if (_numIn<0)
 80012c0:	1a39      	subs	r1, r7, r0
    writeRegister(TFTLCD_ENTRY_MOD, 0x1030);
}

// bresenham's algorithm - thx wikpedia
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) 
{
 80012c2:	4605      	mov	r5, r0
 80012c4:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
    {
      return( (uint16_t)(_numIn*=-1));
    }
    else
    {
        return ((uint16_t)_numIn);
 80012c8:	fa1f f888 	uxth.w	r8, r8
// bresenham's algorithm - thx wikpedia
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) 
{
  // if you're in rotation 1 or 3, we need to swap the X and Y's

    int16_t steep = abs((int32_t) y1 - (int32_t)y0) > abs((int32_t)x1 - (int32_t)x0);
 80012cc:	4682      	mov	sl, r0
    {
      return( (uint16_t)(_numIn*=-1));
    }
    else
    {
        return ((uint16_t)_numIn);
 80012ce:	bf58      	it	pl
 80012d0:	b289      	uxthpl	r1, r1
}

// // need abs
uint16_t abs(int32_t _numIn)
{
    if (_numIn<0)
 80012d2:	d457      	bmi.n	8001384 <drawLine+0xd8>
// bresenham's algorithm - thx wikpedia
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) 
{
  // if you're in rotation 1 or 3, we need to swap the X and Y's

    int16_t steep = abs((int32_t) y1 - (int32_t)y0) > abs((int32_t)x1 - (int32_t)x0);
 80012d4:	4588      	cmp	r8, r1
 80012d6:	bf94      	ite	ls
 80012d8:	f04f 0800 	movls.w	r8, #0
 80012dc:	f04f 0801 	movhi.w	r8, #1
    if (steep) 
 80012e0:	f1b8 0f00 	cmp.w	r8, #0
 80012e4:	d147      	bne.n	8001376 <drawLine+0xca>
 80012e6:	461a      	mov	r2, r3
 80012e8:	46a2      	mov	sl, r4
    {
        swap(x0, y0);
        swap(x1, y1);
    }

    if (x0 > x1) {
 80012ea:	42bd      	cmp	r5, r7
 80012ec:	bfd5      	itete	le
 80012ee:	4651      	movle	r1, sl
 80012f0:	4620      	movgt	r0, r4
 80012f2:	4692      	movle	sl, r2
 80012f4:	4629      	movgt	r1, r5
 80012f6:	bfd1      	iteee	le
 80012f8:	460a      	movle	r2, r1
        swap(x0, x1);
        swap(y0, y1);
 80012fa:	461c      	movgt	r4, r3
    {
        swap(x0, y0);
        swap(x1, y1);
    }

    if (x0 > x1) {
 80012fc:	463d      	movgt	r5, r7
        swap(x0, x1);
        swap(y0, y1);
 80012fe:	4603      	movgt	r3, r0
    {
        swap(x0, y0);
        swap(x1, y1);
    }

    if (x0 > x1) {
 8001300:	bfc8      	it	gt
 8001302:	460f      	movgt	r7, r1
}

// // need abs
uint16_t abs(int32_t _numIn)
{
    if (_numIn<0)
 8001304:	ebba 0a02 	subs.w	sl, sl, r2
    int16_t err = dx / 2;
    int16_t ystep;

    if (y0 < y1) 
    {
        ystep = 1;
 8001308:	f64f 72ff 	movw	r2, #65535	; 0xffff
// // need abs
uint16_t abs(int32_t _numIn)
{
    if (_numIn<0)
    {
      return( (uint16_t)(_numIn*=-1));
 800130c:	bf48      	it	mi
 800130e:	f1ca 0a00 	rsbmi	sl, sl, #0
    int16_t err = dx / 2;
    int16_t ystep;

    if (y0 < y1) 
    {
        ystep = 1;
 8001312:	429c      	cmp	r4, r3
 8001314:	bfb8      	it	lt
 8001316:	2201      	movlt	r2, #1
    else 
    {
        ystep = -1;
    }

    for (; x0<=x1; x0++) 
 8001318:	42bd      	cmp	r5, r7
    {
      return( (uint16_t)(_numIn*=-1));
    }
    else
    {
        return ((uint16_t)_numIn);
 800131a:	fa1f fa8a 	uxth.w	sl, sl
    int16_t err = dx / 2;
    int16_t ystep;

    if (y0 < y1) 
    {
        ystep = 1;
 800131e:	9201      	str	r2, [sp, #4]
    else 
    {
        ystep = -1;
    }

    for (; x0<=x1; x0++) 
 8001320:	dc26      	bgt.n	8001370 <drawLine+0xc4>
        swap(x0, x1);
        swap(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8001322:	ebc5 0b07 	rsb	fp, r5, r7
 8001326:	fa1f fb8b 	uxth.w	fp, fp
  //dy = ABS(y1 - y0);
    dy = abs((int32_t)y1 -(int32_t)y0);

    int16_t err = dx / 2;
 800132a:	fa0f f68b 	sxth.w	r6, fp
 800132e:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8001332:	f3c6 064f 	ubfx	r6, r6, #1, #16
        {
            drawPixel(y0, x0, color);
        }
        else 
        {
            drawPixel(x0, y0, color);
 8001336:	b2a3      	uxth	r3, r4
 8001338:	b2aa      	uxth	r2, r5

    for (; x0<=x1; x0++) 
    {
        if (steep) 
        {
            drawPixel(y0, x0, color);
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
        ystep = -1;
    }

    for (; x0<=x1; x0++) 
    {
        if (steep) 
 800133e:	f1b8 0f00 	cmp.w	r8, #0
 8001342:	d101      	bne.n	8001348 <drawLine+0x9c>
        {
            drawPixel(y0, x0, color);
        }
        else 
        {
            drawPixel(x0, y0, color);
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	464a      	mov	r2, r9
        }
        err -= dy;
 800134a:	ebca 0606 	rsb	r6, sl, r6
        {
            drawPixel(y0, x0, color);
        }
        else 
        {
            drawPixel(x0, y0, color);
 800134e:	f7ff fe8f 	bl	8001070 <drawPixel>
        }
        err -= dy;
 8001352:	b2b3      	uxth	r3, r6
 8001354:	b29e      	uxth	r6, r3
    else 
    {
        ystep = -1;
    }

    for (; x0<=x1; x0++) 
 8001356:	3501      	adds	r5, #1
        else 
        {
            drawPixel(x0, y0, color);
        }
        err -= dy;
        if (err < 0) 
 8001358:	0432      	lsls	r2, r6, #16
        {
            y0 += ystep;
 800135a:	bf42      	ittt	mi
 800135c:	9a01      	ldrmi	r2, [sp, #4]
            err += dx;
 800135e:	eb03 060b 	addmi.w	r6, r3, fp
            drawPixel(x0, y0, color);
        }
        err -= dy;
        if (err < 0) 
        {
            y0 += ystep;
 8001362:	18a4      	addmi	r4, r4, r2
    else 
    {
        ystep = -1;
    }

    for (; x0<=x1; x0++) 
 8001364:	b22d      	sxth	r5, r5
            drawPixel(x0, y0, color);
        }
        err -= dy;
        if (err < 0) 
        {
            y0 += ystep;
 8001366:	bf44      	itt	mi
 8001368:	b224      	sxthmi	r4, r4
            err += dx;
 800136a:	b2b6      	uxthmi	r6, r6
    else 
    {
        ystep = -1;
    }

    for (; x0<=x1; x0++) 
 800136c:	42af      	cmp	r7, r5
 800136e:	dae2      	bge.n	8001336 <drawLine+0x8a>
        {
            y0 += ystep;
            err += dx;
        }
    }
}
 8001370:	b003      	add	sp, #12
 8001372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) 
{
  // if you're in rotation 1 or 3, we need to swap the X and Y's

    int16_t steep = abs((int32_t) y1 - (int32_t)y0) > abs((int32_t)x1 - (int32_t)x0);
    if (steep) 
 8001376:	4638      	mov	r0, r7
 8001378:	4629      	mov	r1, r5
    {
        swap(x0, y0);
        swap(x1, y1);
 800137a:	461f      	mov	r7, r3
  // if you're in rotation 1 or 3, we need to swap the X and Y's

    int16_t steep = abs((int32_t) y1 - (int32_t)y0) > abs((int32_t)x1 - (int32_t)x0);
    if (steep) 
    {
        swap(x0, y0);
 800137c:	4625      	mov	r5, r4
        swap(x1, y1);
 800137e:	4603      	mov	r3, r0
  // if you're in rotation 1 or 3, we need to swap the X and Y's

    int16_t steep = abs((int32_t) y1 - (int32_t)y0) > abs((int32_t)x1 - (int32_t)x0);
    if (steep) 
    {
        swap(x0, y0);
 8001380:	460c      	mov	r4, r1
 8001382:	e7b2      	b.n	80012ea <drawLine+0x3e>
// // need abs
uint16_t abs(int32_t _numIn)
{
    if (_numIn<0)
    {
      return( (uint16_t)(_numIn*=-1));
 8001384:	4249      	negs	r1, r1
 8001386:	b289      	uxth	r1, r1
 8001388:	e7a4      	b.n	80012d4 <drawLine+0x28>
 800138a:	bf00      	nop

0800138c <drawTriangle>:
    }
}

// draw a triangle!
void drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 800138c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001390:	b082      	sub	sp, #8
    drawLine(x0, y0, x1, y1, color);
 8001392:	fa0f f980 	sxth.w	r9, r0
    }
}

// draw a triangle!
void drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001396:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 800139a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
 800139e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
    drawLine(x0, y0, x1, y1, color);
 80013a2:	fa0f fa81 	sxth.w	sl, r1
 80013a6:	b216      	sxth	r6, r2
 80013a8:	b21f      	sxth	r7, r3
 80013aa:	4648      	mov	r0, r9
 80013ac:	4651      	mov	r1, sl
 80013ae:	4632      	mov	r2, r6
 80013b0:	463b      	mov	r3, r7
    drawLine(x1, y1, x2, y2, color);
 80013b2:	fa0f f888 	sxth.w	r8, r8
 80013b6:	b22d      	sxth	r5, r5
}

// draw a triangle!
void drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
    drawLine(x0, y0, x1, y1, color);
 80013b8:	9400      	str	r4, [sp, #0]
 80013ba:	f7ff ff77 	bl	80012ac <drawLine>
    drawLine(x1, y1, x2, y2, color);
 80013be:	4639      	mov	r1, r7
 80013c0:	462a      	mov	r2, r5
 80013c2:	4643      	mov	r3, r8
 80013c4:	4630      	mov	r0, r6
 80013c6:	9400      	str	r4, [sp, #0]
 80013c8:	f7ff ff70 	bl	80012ac <drawLine>
    drawLine(x2, y2, x0, y0, color); 
 80013cc:	4628      	mov	r0, r5
 80013ce:	4641      	mov	r1, r8
 80013d0:	464a      	mov	r2, r9
 80013d2:	4653      	mov	r3, sl
 80013d4:	940a      	str	r4, [sp, #40]	; 0x28
}
 80013d6:	b002      	add	sp, #8
 80013d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
// draw a triangle!
void drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
 80013dc:	f7ff bf66 	b.w	80012ac <drawLine>

080013e0 <drawFastLine>:
    drawFastLine(x,y,length,color,0);
}


void drawFastLine(uint16_t x, uint16_t y, uint16_t length, uint16_t color, uint8_t rotflag)
{
 80013e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t newentrymod;

    switch (rotation) 
 80013e4:	4c34      	ldr	r4, [pc, #208]	; (80014b8 <drawFastLine+0xd8>)
    drawFastLine(x,y,length,color,0);
}


void drawFastLine(uint16_t x, uint16_t y, uint16_t length, uint16_t color, uint8_t rotflag)
{
 80013e6:	f89d c018 	ldrb.w	ip, [sp, #24]
    uint16_t newentrymod;

    switch (rotation) 
 80013ea:	7827      	ldrb	r7, [r4, #0]
    drawFastLine(x,y,length,color,0);
}


void drawFastLine(uint16_t x, uint16_t y, uint16_t length, uint16_t color, uint8_t rotflag)
{
 80013ec:	4605      	mov	r5, r0
 80013ee:	460c      	mov	r4, r1
 80013f0:	4616      	mov	r6, r2
 80013f2:	4698      	mov	r8, r3
    uint16_t newentrymod;

    switch (rotation) 
 80013f4:	2f03      	cmp	r7, #3
 80013f6:	d811      	bhi.n	800141c <drawFastLine+0x3c>
 80013f8:	e8df f007 	tbb	[pc, r7]
 80013fc:	37024654 	.word	0x37024654
        else 
            newentrymod = 0x1028;   // we want a 'horizontal line'
        break;
        case 2:
        x = TFTWIDTH - x - 1;
        y = TFTHEIGHT - y - 1;
 8001400:	f5c1 749e 	rsb	r4, r1, #316	; 0x13c
            newentrymod = 0x1000;   // we want a 'vertical line'
        else 
            newentrymod = 0x1028;   // we want a 'horizontal line'
        break;
        case 2:
        x = TFTWIDTH - x - 1;
 8001404:	f1c0 05ef 	rsb	r5, r0, #239	; 0xef
        y = TFTHEIGHT - y - 1;
 8001408:	3403      	adds	r4, #3
        if (rotflag)
            newentrymod = 0x1008;   // we want a 'vertical line'
 800140a:	f241 0e08 	movw	lr, #4104	; 0x1008
            newentrymod = 0x1000;   // we want a 'vertical line'
        else 
            newentrymod = 0x1028;   // we want a 'horizontal line'
        break;
        case 2:
        x = TFTWIDTH - x - 1;
 800140e:	b2ad      	uxth	r5, r5
        y = TFTHEIGHT - y - 1;
 8001410:	b2a4      	uxth	r4, r4
        if (rotflag)
            newentrymod = 0x1008;   // we want a 'vertical line'
 8001412:	f1bc 0f00 	cmp.w	ip, #0
 8001416:	bf08      	it	eq
 8001418:	f44f 5e81 	moveq.w	lr, #4128	; 0x1020
        else 
            newentrymod = 0x1008;   // we want a 'horizontal line'
        break;
    }

    writeRegister(TFTLCD_ENTRY_MOD, newentrymod);
 800141c:	4671      	mov	r1, lr
 800141e:	2003      	movs	r0, #3
 8001420:	f7ff fe0e 	bl	8001040 <writeRegister>

    writeRegister(TFTLCD_GRAM_HOR_AD, x); // GRAM Address Set (Horizontal Address) (R20h)
 8001424:	2020      	movs	r0, #32
 8001426:	4629      	mov	r1, r5
 8001428:	f7ff fe0a 	bl	8001040 <writeRegister>
    writeRegister(TFTLCD_GRAM_VER_AD, y); // GRAM Address Set (Vertical Address) (R21h)
 800142c:	2021      	movs	r0, #33	; 0x21
 800142e:	4621      	mov	r1, r4
 8001430:	f7ff fe06 	bl	8001040 <writeRegister>
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8001434:	4b21      	ldr	r3, [pc, #132]	; (80014bc <drawFastLine+0xdc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2222      	movs	r2, #34	; 0x22
 800143a:	801a      	strh	r2, [r3, #0]
    // uDelay(0);
    *fsmcRegister=cmd<<8;
 800143c:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8001440:	801a      	strh	r2, [r3, #0]

    writeRegister(TFTLCD_GRAM_HOR_AD, x); // GRAM Address Set (Horizontal Address) (R20h)
    writeRegister(TFTLCD_GRAM_VER_AD, y); // GRAM Address Set (Vertical Address) (R21h)
    writeCommand(TFTLCD_RW_GRAM);  // Write Data to GRAM (R22h)

    while (length--) 
 8001442:	b15e      	cbz	r6, 800145c <drawFastLine+0x7c>
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <drawFastLine+0xe0>)
 8001446:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b292      	uxth	r2, r2
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
    // uDelay(0);
    *fsmcData=data<<8;
 800144e:	3e01      	subs	r6, #1
 8001450:	b2b6      	uxth	r6, r6
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 8001452:	f8a3 8000 	strh.w	r8, [r3]
    // uDelay(0);
    *fsmcData=data<<8;
 8001456:	801a      	strh	r2, [r3, #0]

    writeRegister(TFTLCD_GRAM_HOR_AD, x); // GRAM Address Set (Horizontal Address) (R20h)
    writeRegister(TFTLCD_GRAM_VER_AD, y); // GRAM Address Set (Vertical Address) (R21h)
    writeCommand(TFTLCD_RW_GRAM);  // Write Data to GRAM (R22h)

    while (length--) 
 8001458:	2e00      	cmp	r6, #0
 800145a:	d1f8      	bne.n	800144e <drawFastLine+0x6e>
        writeData(color); 
    }

  // set back to default

    writeRegister(TFTLCD_ENTRY_MOD, 0x1030);
 800145c:	2003      	movs	r0, #3
 800145e:	f241 0130 	movw	r1, #4144	; 0x1030
}
 8001462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        writeData(color); 
    }

  // set back to default

    writeRegister(TFTLCD_ENTRY_MOD, 0x1030);
 8001466:	f7ff bdeb 	b.w	8001040 <writeRegister>
        else 
            newentrymod = 0x1020;   // we want a 'horizontal line'
        break;
        case 3:
        swap(x,y);
        y = TFTHEIGHT - y - 1;
 800146a:	f5c0 739e 	rsb	r3, r0, #316	; 0x13c
 800146e:	3303      	adds	r3, #3
 8001470:	b29b      	uxth	r3, r3
            newentrymod = 0x1008;   // we want a 'vertical line'
        else 
            newentrymod = 0x1020;   // we want a 'horizontal line'
        break;
        case 3:
        swap(x,y);
 8001472:	460d      	mov	r5, r1
        y = TFTHEIGHT - y - 1;
        if (rotflag)
            newentrymod = 0x1030;   // we want a 'vertical line'
 8001474:	f241 0e30 	movw	lr, #4144	; 0x1030
        else 
            newentrymod = 0x1020;   // we want a 'horizontal line'
        break;
        case 3:
        swap(x,y);
        y = TFTHEIGHT - y - 1;
 8001478:	461c      	mov	r4, r3
        if (rotflag)
 800147a:	f1bc 0f00 	cmp.w	ip, #0
 800147e:	d1cd      	bne.n	800141c <drawFastLine+0x3c>
            newentrymod = 0x1030;   // we want a 'vertical line'
        else 
            newentrymod = 0x1008;   // we want a 'horizontal line'
 8001480:	f241 0e08 	movw	lr, #4104	; 0x1008
        else 
            newentrymod = 0x1020;   // we want a 'horizontal line'
        break;
        case 3:
        swap(x,y);
        y = TFTHEIGHT - y - 1;
 8001484:	461c      	mov	r4, r3
 8001486:	e7c9      	b.n	800141c <drawFastLine+0x3c>
            newentrymod = 0x1030;   // we want a 'horizontal line'
        break;
        case 1:
        swap(x, y);
    // first up fix the X
        x = TFTWIDTH - x - 1;
 8001488:	f1c1 03ef 	rsb	r3, r1, #239	; 0xef
 800148c:	b29b      	uxth	r3, r3
            newentrymod = 0x1028;   // we want a 'vertical line'
        else 
            newentrymod = 0x1030;   // we want a 'horizontal line'
        break;
        case 1:
        swap(x, y);
 800148e:	4604      	mov	r4, r0
    // first up fix the X
        x = TFTWIDTH - x - 1;
        if (rotflag)
            newentrymod = 0x1000;   // we want a 'vertical line'
 8001490:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
            newentrymod = 0x1030;   // we want a 'horizontal line'
        break;
        case 1:
        swap(x, y);
    // first up fix the X
        x = TFTWIDTH - x - 1;
 8001494:	461d      	mov	r5, r3
        if (rotflag)
 8001496:	f1bc 0f00 	cmp.w	ip, #0
 800149a:	d1bf      	bne.n	800141c <drawFastLine+0x3c>
            newentrymod = 0x1000;   // we want a 'vertical line'
        else 
            newentrymod = 0x1028;   // we want a 'horizontal line'
 800149c:	f241 0e28 	movw	lr, #4136	; 0x1028
            newentrymod = 0x1030;   // we want a 'horizontal line'
        break;
        case 1:
        swap(x, y);
    // first up fix the X
        x = TFTWIDTH - x - 1;
 80014a0:	461d      	mov	r5, r3
 80014a2:	e7bb      	b.n	800141c <drawFastLine+0x3c>

    switch (rotation) 
    {
        case 0:
        if (rotflag)
            newentrymod = 0x1028;   // we want a 'vertical line'
 80014a4:	f241 0328 	movw	r3, #4136	; 0x1028
 80014a8:	f241 0e30 	movw	lr, #4144	; 0x1030
 80014ac:	f1bc 0f00 	cmp.w	ip, #0
 80014b0:	bf18      	it	ne
 80014b2:	469e      	movne	lr, r3
 80014b4:	e7b2      	b.n	800141c <drawFastLine+0x3c>
 80014b6:	bf00      	nop
 80014b8:	2000005c 	.word	0x2000005c
 80014bc:	20000064 	.word	0x20000064
 80014c0:	20000060 	.word	0x20000060

080014c4 <drawHorizontalLine>:

    drawFastLine(x,y,length,color,1);
}

void drawHorizontalLine(uint16_t x, uint16_t y, uint16_t length, uint16_t color)
{
 80014c4:	b510      	push	{r4, lr}
    if (y >= _height) return;
 80014c6:	4c05      	ldr	r4, [pc, #20]	; (80014dc <drawHorizontalLine+0x18>)
 80014c8:	8824      	ldrh	r4, [r4, #0]
 80014ca:	428c      	cmp	r4, r1

    drawFastLine(x,y,length,color,1);
}

void drawHorizontalLine(uint16_t x, uint16_t y, uint16_t length, uint16_t color)
{
 80014cc:	b082      	sub	sp, #8
    if (y >= _height) return;
 80014ce:	d903      	bls.n	80014d8 <drawHorizontalLine+0x14>
    drawFastLine(x,y,length,color,0);
 80014d0:	2400      	movs	r4, #0
 80014d2:	9400      	str	r4, [sp, #0]
 80014d4:	f7ff ff84 	bl	80013e0 <drawFastLine>
}
 80014d8:	b002      	add	sp, #8
 80014da:	bd10      	pop	{r4, pc}
 80014dc:	2000006e 	.word	0x2000006e

080014e0 <fillRect>:
    }
}

// fill a rectangle
void fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) 
{
 80014e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014e4:	461c      	mov	r4, r3
 80014e6:	4607      	mov	r7, r0
 80014e8:	4616      	mov	r6, r2
 80014ea:	f8bd 8018 	ldrh.w	r8, [sp, #24]
  // smarter version
    while (h--)
 80014ee:	b90b      	cbnz	r3, 80014f4 <fillRect+0x14>
 80014f0:	e00f      	b.n	8001512 <fillRect+0x32>
        drawHorizontalLine(x, y++, w, fillcolor);
 80014f2:	4629      	mov	r1, r5
 80014f4:	3c01      	subs	r4, #1
 80014f6:	f101 0e01 	add.w	lr, r1, #1
 80014fa:	4638      	mov	r0, r7
 80014fc:	4632      	mov	r2, r6
 80014fe:	4643      	mov	r3, r8
 8001500:	b2a4      	uxth	r4, r4
 8001502:	fa1f f58e 	uxth.w	r5, lr
 8001506:	f7ff ffdd 	bl	80014c4 <drawHorizontalLine>

// fill a rectangle
void fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) 
{
  // smarter version
    while (h--)
 800150a:	2c00      	cmp	r4, #0
 800150c:	d1f1      	bne.n	80014f2 <fillRect+0x12>
 800150e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001516:	bf00      	nop

08001518 <drawChar>:
//     }
//     write('\n');
// }
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size)
{
 8001518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//         idx++;
//     }
//     write('\n');
// }
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size)
 800151c:	4c20      	ldr	r4, [pc, #128]	; (80015a0 <drawChar+0x88>)
{
 800151e:	b085      	sub	sp, #20
            {
                if (size == 1) // default size
                    drawPixel(x+i, y+j, color);
                else 
                {  // big size
                    fillRect(x+i*size, y+j*size, size, size, color);
 8001520:	eb02 0282 	add.w	r2, r2, r2, lsl #2
//     }
//     write('\n');
// }
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size)
{
 8001524:	4682      	mov	sl, r0
//         idx++;
//     }
//     write('\n');
// }
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size)
 8001526:	1d20      	adds	r0, r4, #4
 8001528:	f102 3bff 	add.w	fp, r2, #4294967295
 800152c:	1810      	adds	r0, r2, r0
{
 800152e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8001532:	9102      	str	r1, [sp, #8]
 8001534:	4699      	mov	r9, r3
//         idx++;
//     }
//     write('\n');
// }
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size)
 8001536:	44a3      	add	fp, r4
 8001538:	9003      	str	r0, [sp, #12]
 800153a:	46d0      	mov	r8, sl
{
    uint8_t i,j;
    
    for ( i =0; i<5; i++ ) 
    {
        uint8_t line = *(font+(c*5)+i);
 800153c:	f81b 5f01 	ldrb.w	r5, [fp, #1]!
            {
                if (size == 1) // default size
                    drawPixel(x+i, y+j, color);
                else 
                {  // big size
                    fillRect(x+i*size, y+j*size, size, size, color);
 8001540:	9e02      	ldr	r6, [sp, #8]
 8001542:	2400      	movs	r4, #0
 8001544:	e00d      	b.n	8001562 <drawChar+0x4a>
 8001546:	4640      	mov	r0, r8
 8001548:	4631      	mov	r1, r6
 800154a:	463a      	mov	r2, r7
 800154c:	463b      	mov	r3, r7
 800154e:	f8cd 9000 	str.w	r9, [sp]
 8001552:	f7ff ffc5 	bl	80014e0 <fillRect>
                } 
            }
            line >>= 1;
 8001556:	3401      	adds	r4, #1
 8001558:	19f6      	adds	r6, r6, r7
 800155a:	086d      	lsrs	r5, r5, #1
    uint8_t i,j;
    
    for ( i =0; i<5; i++ ) 
    {
        uint8_t line = *(font+(c*5)+i);
        for (j = 0; j<8; j++) 
 800155c:	2c08      	cmp	r4, #8
                else 
                {  // big size
                    fillRect(x+i*size, y+j*size, size, size, color);
                } 
            }
            line >>= 1;
 800155e:	b2b6      	uxth	r6, r6
    uint8_t i,j;
    
    for ( i =0; i<5; i++ ) 
    {
        uint8_t line = *(font+(c*5)+i);
        for (j = 0; j<8; j++) 
 8001560:	d010      	beq.n	8001584 <drawChar+0x6c>
        {
            if (line & 0x1) 
 8001562:	07e9      	lsls	r1, r5, #31
 8001564:	d5f7      	bpl.n	8001556 <drawChar+0x3e>
            {
                if (size == 1) // default size
 8001566:	2f01      	cmp	r7, #1
 8001568:	d1ed      	bne.n	8001546 <drawChar+0x2e>
//         idx++;
//     }
//     write('\n');
// }
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size)
 800156a:	9b02      	ldr	r3, [sp, #8]
 800156c:	1919      	adds	r1, r3, r4
        for (j = 0; j<8; j++) 
        {
            if (line & 0x1) 
            {
                if (size == 1) // default size
                    drawPixel(x+i, y+j, color);
 800156e:	b289      	uxth	r1, r1
 8001570:	4650      	mov	r0, sl
 8001572:	464a      	mov	r2, r9
                else 
                {  // big size
                    fillRect(x+i*size, y+j*size, size, size, color);
                } 
            }
            line >>= 1;
 8001574:	3401      	adds	r4, #1
        for (j = 0; j<8; j++) 
        {
            if (line & 0x1) 
            {
                if (size == 1) // default size
                    drawPixel(x+i, y+j, color);
 8001576:	f7ff fd7b 	bl	8001070 <drawPixel>
                else 
                {  // big size
                    fillRect(x+i*size, y+j*size, size, size, color);
                } 
            }
            line >>= 1;
 800157a:	19f6      	adds	r6, r6, r7
 800157c:	086d      	lsrs	r5, r5, #1
    uint8_t i,j;
    
    for ( i =0; i<5; i++ ) 
    {
        uint8_t line = *(font+(c*5)+i);
        for (j = 0; j<8; j++) 
 800157e:	2c08      	cmp	r4, #8
                else 
                {  // big size
                    fillRect(x+i*size, y+j*size, size, size, color);
                } 
            }
            line >>= 1;
 8001580:	b2b6      	uxth	r6, r6
    uint8_t i,j;
    
    for ( i =0; i<5; i++ ) 
    {
        uint8_t line = *(font+(c*5)+i);
        for (j = 0; j<8; j++) 
 8001582:	d1ee      	bne.n	8001562 <drawChar+0x4a>
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size)
{
    uint8_t i,j;
    
    for ( i =0; i<5; i++ ) 
 8001584:	9b03      	ldr	r3, [sp, #12]
    {
        uint8_t line = *(font+(c*5)+i);
        for (j = 0; j<8; j++) 
 8001586:	f10a 0a01 	add.w	sl, sl, #1
 800158a:	44b8      	add	r8, r7
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size)
{
    uint8_t i,j;
    
    for ( i =0; i<5; i++ ) 
 800158c:	459b      	cmp	fp, r3
    {
        uint8_t line = *(font+(c*5)+i);
        for (j = 0; j<8; j++) 
 800158e:	fa1f fa8a 	uxth.w	sl, sl
 8001592:	fa1f f888 	uxth.w	r8, r8
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size)
{
    uint8_t i,j;
    
    for ( i =0; i<5; i++ ) 
 8001596:	d1d1      	bne.n	800153c <drawChar+0x24>
                } 
            }
            line >>= 1;
        }
    }
}
 8001598:	b005      	add	sp, #20
 800159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800159e:	bf00      	nop
 80015a0:	08002fd8 	.word	0x08002fd8

080015a4 <drawString>:
        cursor_x += textsize*6;
    }
}

void drawString(uint16_t x, uint16_t y, char *c, uint16_t color, uint8_t size)
{
 80015a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015a8:	4615      	mov	r5, r2
 80015aa:	b083      	sub	sp, #12
    while (c[0] != 0)
 80015ac:	7812      	ldrb	r2, [r2, #0]
        cursor_x += textsize*6;
    }
}

void drawString(uint16_t x, uint16_t y, char *c, uint16_t color, uint8_t size)
{
 80015ae:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 80015b2:	4604      	mov	r4, r0
 80015b4:	4688      	mov	r8, r1
 80015b6:	461f      	mov	r7, r3
    while (c[0] != 0)
 80015b8:	b17a      	cbz	r2, 80015da <drawString+0x36>
 80015ba:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 80015be:	ea4f 0949 	mov.w	r9, r9, lsl #1
    {
        drawChar(x, y, c[0], color, size);
 80015c2:	4620      	mov	r0, r4
 80015c4:	4641      	mov	r1, r8
 80015c6:	463b      	mov	r3, r7
 80015c8:	9600      	str	r6, [sp, #0]
 80015ca:	f7ff ffa5 	bl	8001518 <drawChar>
    }
}

void drawString(uint16_t x, uint16_t y, char *c, uint16_t color, uint8_t size)
{
    while (c[0] != 0)
 80015ce:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    {
        drawChar(x, y, c[0], color, size);
        x += size*6;
 80015d2:	444c      	add	r4, r9
 80015d4:	b2a4      	uxth	r4, r4
    }
}

void drawString(uint16_t x, uint16_t y, char *c, uint16_t color, uint8_t size)
{
    while (c[0] != 0)
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d1f3      	bne.n	80015c2 <drawString+0x1e>
    {
        drawChar(x, y, c[0], color, size);
        x += size*6;
        c++;
    }
}
 80015da:	b003      	add	sp, #12
 80015dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080015e0 <write>:
{
    return _height;
}

void write(uint8_t c) 
{
 80015e0:	b570      	push	{r4, r5, r6, lr}
    if (c == '\n') 
 80015e2:	280a      	cmp	r0, #10
{
    return _height;
}

void write(uint8_t c) 
{
 80015e4:	b082      	sub	sp, #8
 80015e6:	4602      	mov	r2, r0
    if (c == '\n') 
 80015e8:	d015      	beq.n	8001616 <write+0x36>
    {
        cursor_y += textsize*8;
        cursor_x = 0;
    } 
    else if (c == '\r')
 80015ea:	280d      	cmp	r0, #13
 80015ec:	d011      	beq.n	8001612 <write+0x32>
    {
    // skip em
    }
    else
    {
        drawChar(cursor_x, cursor_y, c, textcolor, textsize);
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <write+0x4c>)
 80015f0:	4d0f      	ldr	r5, [pc, #60]	; (8001630 <write+0x50>)
 80015f2:	4c10      	ldr	r4, [pc, #64]	; (8001634 <write+0x54>)
 80015f4:	8819      	ldrh	r1, [r3, #0]
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <write+0x58>)
 80015f8:	782e      	ldrb	r6, [r5, #0]
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	8820      	ldrh	r0, [r4, #0]
 80015fe:	9600      	str	r6, [sp, #0]
 8001600:	f7ff ff8a 	bl	8001518 <drawChar>
        cursor_x += textsize*6;
 8001604:	782b      	ldrb	r3, [r5, #0]
 8001606:	8822      	ldrh	r2, [r4, #0]
 8001608:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800160c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001610:	8023      	strh	r3, [r4, #0]
    }
}
 8001612:	b002      	add	sp, #8
 8001614:	bd70      	pop	{r4, r5, r6, pc}

void write(uint8_t c) 
{
    if (c == '\n') 
    {
        cursor_y += textsize*8;
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <write+0x4c>)
 8001618:	4905      	ldr	r1, [pc, #20]	; (8001630 <write+0x50>)
 800161a:	881a      	ldrh	r2, [r3, #0]
 800161c:	7809      	ldrb	r1, [r1, #0]
 800161e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001622:	801a      	strh	r2, [r3, #0]
        cursor_x = 0;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <write+0x54>)
 8001626:	2200      	movs	r2, #0
 8001628:	801a      	strh	r2, [r3, #0]
 800162a:	e7f2      	b.n	8001612 <write+0x32>
 800162c:	20000050 	.word	0x20000050
 8001630:	2000006c 	.word	0x2000006c
 8001634:	2000006a 	.word	0x2000006a
 8001638:	20000070 	.word	0x20000070

0800163c <tft_putc>:
        c++;
    }
}
void tft_putc(void *p, uint8_t c)
{
    write (c);
 800163c:	4608      	mov	r0, r1
 800163e:	f7ff bfcf 	b.w	80015e0 <write>
 8001642:	bf00      	nop

08001644 <fillTriangle>:
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
{
 8001644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001648:	461d      	mov	r5, r3
 800164a:	b085      	sub	sp, #20
    if (y0 > y1)
 800164c:	42a9      	cmp	r1, r5
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
{
 800164e:	9201      	str	r2, [sp, #4]
 8001650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001652:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
    if (y0 > y1)
 8001656:	dd05      	ble.n	8001664 <fillTriangle+0x20>
    {
        swap(y0, y1); swap(x0, x1);
 8001658:	b20c      	sxth	r4, r1
 800165a:	b202      	sxth	r2, r0
 800165c:	4629      	mov	r1, r5
 800165e:	9801      	ldr	r0, [sp, #4]
 8001660:	9201      	str	r2, [sp, #4]
 8001662:	4625      	mov	r5, r4
    }
    if (y1 > y2)
 8001664:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8001666:	42a5      	cmp	r5, r4
 8001668:	dd05      	ble.n	8001676 <fillTriangle+0x32>
    {
        swap(y2, y1); swap(x2, x1);
 800166a:	b21a      	sxth	r2, r3
 800166c:	b224      	sxth	r4, r4
 800166e:	950f      	str	r5, [sp, #60]	; 0x3c
 8001670:	9b01      	ldr	r3, [sp, #4]
 8001672:	9201      	str	r2, [sp, #4]
 8001674:	4625      	mov	r5, r4
    }
    if (y0 > y1)
 8001676:	42a9      	cmp	r1, r5
 8001678:	dd05      	ble.n	8001686 <fillTriangle+0x42>
    {
        swap(y0, y1); swap(x0, x1);
 800167a:	b20c      	sxth	r4, r1
 800167c:	b202      	sxth	r2, r0
 800167e:	4629      	mov	r1, r5
 8001680:	9801      	ldr	r0, [sp, #4]
 8001682:	9201      	str	r2, [sp, #4]
 8001684:	4625      	mov	r5, r4
    sx2=(int32_t)x0 * (int32_t)1000; // Use fixed point math for x axis values
    sx1 = sx2;
    sy=y0;

  // Calculate interpolation deltas
    if (y1-y0 > 0) dx1=((x1-x0)*1000)/(y1-y0);
 8001686:	1a6a      	subs	r2, r5, r1
 8001688:	2a00      	cmp	r2, #0
 800168a:	bfc8      	it	gt
 800168c:	9f01      	ldrgt	r7, [sp, #4]
    }

    int32_t dx1, dx2, dx3; // Interpolation deltas
    int32_t sx1, sx2, sy; // Scanline co-ordinates

    sx2=(int32_t)x0 * (int32_t)1000; // Use fixed point math for x axis values
 800168e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    sx1 = sx2;
    sy=y0;

  // Calculate interpolation deltas
    if (y1-y0 > 0) dx1=((x1-x0)*1000)/(y1-y0);
 8001692:	bfc8      	it	gt
 8001694:	ebc0 0607 	rsbgt	r6, r0, r7
    }

    int32_t dx1, dx2, dx3; // Interpolation deltas
    int32_t sx1, sx2, sy; // Scanline co-ordinates

    sx2=(int32_t)x0 * (int32_t)1000; // Use fixed point math for x axis values
 8001698:	fb04 fb00 	mul.w	fp, r4, r0
    sx1 = sx2;
    sy=y0;

  // Calculate interpolation deltas
    if (y1-y0 > 0) dx1=((x1-x0)*1000)/(y1-y0);
 800169c:	bfc6      	itte	gt
 800169e:	4374      	mulgt	r4, r6
 80016a0:	fb94 f4f2 	sdivgt	r4, r4, r2
    else dx1=0;
 80016a4:	2400      	movle	r4, #0
 80016a6:	9400      	str	r4, [sp, #0]
    if (y2-y0 > 0) dx2=((x2-x0)*1000)/(y2-y0);
 80016a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80016aa:	1a62      	subs	r2, r4, r1
 80016ac:	2a00      	cmp	r2, #0
 80016ae:	bfc4      	itt	gt
 80016b0:	f44f 7a7a 	movgt.w	sl, #1000	; 0x3e8
 80016b4:	ebc0 0003 	rsbgt	r0, r0, r3
    else dx2=0;
    if (y2-y1 > 0) dx3=((x2-x1)*1000)/(y2-y1);
 80016b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    sy=y0;

  // Calculate interpolation deltas
    if (y1-y0 > 0) dx1=((x1-x0)*1000)/(y1-y0);
    else dx1=0;
    if (y2-y0 > 0) dx2=((x2-x0)*1000)/(y2-y0);
 80016ba:	bfc4      	itt	gt
 80016bc:	fb0a fa00 	mulgt.w	sl, sl, r0
 80016c0:	fb9a faf2 	sdivgt	sl, sl, r2
    else dx2=0;
    if (y2-y1 > 0) dx3=((x2-x1)*1000)/(y2-y1);
 80016c4:	ebc5 0204 	rsb	r2, r5, r4

  // Calculate interpolation deltas
    if (y1-y0 > 0) dx1=((x1-x0)*1000)/(y1-y0);
    else dx1=0;
    if (y2-y0 > 0) dx2=((x2-x0)*1000)/(y2-y0);
    else dx2=0;
 80016c8:	bfd8      	it	le
 80016ca:	f04f 0a00 	movle.w	sl, #0
    if (y2-y1 > 0) dx3=((x2-x1)*1000)/(y2-y1);
 80016ce:	2a00      	cmp	r2, #0
 80016d0:	f340 80aa 	ble.w	8001828 <fillTriangle+0x1e4>
 80016d4:	9f01      	ldr	r7, [sp, #4]
 80016d6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80016da:	1bdb      	subs	r3, r3, r7
 80016dc:	fb08 f303 	mul.w	r3, r8, r3
 80016e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80016e4:	9303      	str	r3, [sp, #12]
    else dx3=0;

  // Render scanlines (horizontal lines are the fastest rendering method)
    if (dx1 > dx2)
 80016e6:	9f00      	ldr	r7, [sp, #0]
 80016e8:	4557      	cmp	r7, sl
 80016ea:	dc51      	bgt.n	8001790 <fillTriangle+0x14c>
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
    }
    else
    {
        for(; sy<=y1; sy++, sx1+=dx1, sx2+=dx2)
 80016ec:	42a9      	cmp	r1, r5
 80016ee:	dc22      	bgt.n	8001736 <fillTriangle+0xf2>
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 80016f0:	9c00      	ldr	r4, [sp, #0]
    }
    else
    {
        for(; sy<=y1; sy++, sx1+=dx1, sx2+=dx2)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 80016f2:	f644 58d3 	movw	r8, #19923	; 0x4dd3
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 80016f6:	ebc4 040a 	rsb	r4, r4, sl
 80016fa:	9402      	str	r4, [sp, #8]
 80016fc:	460f      	mov	r7, r1
 80016fe:	465e      	mov	r6, fp
 8001700:	2400      	movs	r4, #0
    }
    else
    {
        for(; sy<=y1; sy++, sx1+=dx1, sx2+=dx2)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 8001702:	f2c1 0862 	movt	r8, #4194	; 0x1062
 8001706:	17f1      	asrs	r1, r6, #31
 8001708:	fb88 2006 	smull	r2, r0, r8, r6
 800170c:	fb88 3204 	smull	r3, r2, r8, r4
 8001710:	17e3      	asrs	r3, r4, #31
 8001712:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
 8001716:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 800171a:	b280      	uxth	r0, r0
 800171c:	b2b9      	uxth	r1, r7
 800171e:	b292      	uxth	r2, r2
 8001720:	464b      	mov	r3, r9
 8001722:	f7ff fecf 	bl	80014c4 <drawHorizontalLine>
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
    }
    else
    {
        for(; sy<=y1; sy++, sx1+=dx1, sx2+=dx2)
 8001726:	3701      	adds	r7, #1
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 8001728:	9800      	ldr	r0, [sp, #0]
 800172a:	9a02      	ldr	r2, [sp, #8]
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
    }
    else
    {
        for(; sy<=y1; sy++, sx1+=dx1, sx2+=dx2)
 800172c:	42bd      	cmp	r5, r7
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 800172e:	4406      	add	r6, r0
 8001730:	44d3      	add	fp, sl
 8001732:	4414      	add	r4, r2
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
    }
    else
    {
        for(; sy<=y1; sy++, sx1+=dx1, sx2+=dx2)
 8001734:	dae7      	bge.n	8001706 <fillTriangle+0xc2>
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
        sx1 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx3, sx2+=dx2)
 8001736:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8001738:	42a5      	cmp	r5, r4
 800173a:	dc26      	bgt.n	800178a <fillTriangle+0x146>
    {
        for(; sy<=y1; sy++, sx1+=dx1, sx2+=dx2)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
        sx1 = x1*1000;
 800173c:	9f01      	ldr	r7, [sp, #4]
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 800173e:	9c03      	ldr	r4, [sp, #12]
        }
        sx1 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx3, sx2+=dx2)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 8001740:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    {
        for(; sy<=y1; sy++, sx1+=dx1, sx2+=dx2)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
        sx1 = x1*1000;
 8001744:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001748:	fb06 f607 	mul.w	r6, r6, r7
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 800174c:	ebc4 0a0a 	rsb	sl, r4, sl
        }
        sx1 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx3, sx2+=dx2)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 8001750:	f644 57d3 	movw	r7, #19923	; 0x4dd3
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 8001754:	ebc6 040b 	rsb	r4, r6, fp
        }
        sx1 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx3, sx2+=dx2)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 8001758:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800175c:	f2c1 0762 	movt	r7, #4194	; 0x1062
 8001760:	17f1      	asrs	r1, r6, #31
 8001762:	fb87 2006 	smull	r2, r0, r7, r6
 8001766:	fb87 3204 	smull	r3, r2, r7, r4
 800176a:	17e3      	asrs	r3, r4, #31
 800176c:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
 8001770:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 8001774:	b2a9      	uxth	r1, r5
 8001776:	b280      	uxth	r0, r0
 8001778:	b292      	uxth	r2, r2
 800177a:	464b      	mov	r3, r9
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
        sx1 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx3, sx2+=dx2)
 800177c:	3501      	adds	r5, #1
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 800177e:	f7ff fea1 	bl	80014c4 <drawHorizontalLine>
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
        sx1 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx3, sx2+=dx2)
 8001782:	45a8      	cmp	r8, r5
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 8001784:	445e      	add	r6, fp
 8001786:	4454      	add	r4, sl
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
        sx1 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx3, sx2+=dx2)
 8001788:	daea      	bge.n	8001760 <fillTriangle+0x11c>
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
    }
}
 800178a:	b005      	add	sp, #20
 800178c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else dx3=0;

  // Render scanlines (horizontal lines are the fastest rendering method)
    if (dx1 > dx2)
    {
        for(; sy<=y1; sy++, sx1+=dx2, sx2+=dx1)
 8001790:	42a9      	cmp	r1, r5
 8001792:	bfc8      	it	gt
 8001794:	465c      	movgt	r4, fp
 8001796:	dc1f      	bgt.n	80017d8 <fillTriangle+0x194>
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 8001798:	9c00      	ldr	r4, [sp, #0]
  // Render scanlines (horizontal lines are the fastest rendering method)
    if (dx1 > dx2)
    {
        for(; sy<=y1; sy++, sx1+=dx2, sx2+=dx1)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 800179a:	f644 58d3 	movw	r8, #19923	; 0x4dd3
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 800179e:	ebca 0304 	rsb	r3, sl, r4
 80017a2:	460f      	mov	r7, r1
 80017a4:	465c      	mov	r4, fp
 80017a6:	2600      	movs	r6, #0
  // Render scanlines (horizontal lines are the fastest rendering method)
    if (dx1 > dx2)
    {
        for(; sy<=y1; sy++, sx1+=dx2, sx2+=dx1)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 80017a8:	f2c1 0862 	movt	r8, #4194	; 0x1062
 80017ac:	469b      	mov	fp, r3
 80017ae:	17e1      	asrs	r1, r4, #31
 80017b0:	fb88 2004 	smull	r2, r0, r8, r4
 80017b4:	fb88 3206 	smull	r3, r2, r8, r6
 80017b8:	17f3      	asrs	r3, r6, #31
 80017ba:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
 80017be:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 80017c2:	b2b9      	uxth	r1, r7
 80017c4:	b280      	uxth	r0, r0
 80017c6:	b292      	uxth	r2, r2
 80017c8:	464b      	mov	r3, r9
    else dx3=0;

  // Render scanlines (horizontal lines are the fastest rendering method)
    if (dx1 > dx2)
    {
        for(; sy<=y1; sy++, sx1+=dx2, sx2+=dx1)
 80017ca:	3701      	adds	r7, #1
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 80017cc:	f7ff fe7a 	bl	80014c4 <drawHorizontalLine>
    else dx3=0;

  // Render scanlines (horizontal lines are the fastest rendering method)
    if (dx1 > dx2)
    {
        for(; sy<=y1; sy++, sx1+=dx2, sx2+=dx1)
 80017d0:	42bd      	cmp	r5, r7
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 80017d2:	4454      	add	r4, sl
 80017d4:	445e      	add	r6, fp
    else dx3=0;

  // Render scanlines (horizontal lines are the fastest rendering method)
    if (dx1 > dx2)
    {
        for(; sy<=y1; sy++, sx1+=dx2, sx2+=dx1)
 80017d6:	daea      	bge.n	80017ae <fillTriangle+0x16a>
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
        sx2 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx2, sx2+=dx3)
 80017d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80017da:	42bd      	cmp	r5, r7
 80017dc:	dcd5      	bgt.n	800178a <fillTriangle+0x146>
    {
        for(; sy<=y1; sy++, sx1+=dx2, sx2+=dx1)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
        sx2 = x1*1000;
 80017de:	9f01      	ldr	r7, [sp, #4]
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 80017e0:	9803      	ldr	r0, [sp, #12]
        }
        sx2 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx2, sx2+=dx3)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 80017e2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
    {
        for(; sy<=y1; sy++, sx1+=dx2, sx2+=dx1)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
        sx2 = x1*1000;
 80017e6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80017ea:	fb06 f607 	mul.w	r6, r6, r7
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx2, sx2+=dx3)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 80017ee:	f644 57d3 	movw	r7, #19923	; 0x4dd3
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 80017f2:	ebca 0800 	rsb	r8, sl, r0
 80017f6:	1b36      	subs	r6, r6, r4
        }
        sx2 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx2, sx2+=dx3)
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 80017f8:	f2c1 0762 	movt	r7, #4194	; 0x1062
 80017fc:	17e1      	asrs	r1, r4, #31
 80017fe:	fb87 2004 	smull	r2, r0, r7, r4
 8001802:	fb87 3206 	smull	r3, r2, r7, r6
 8001806:	17f3      	asrs	r3, r6, #31
 8001808:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
 800180c:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 8001810:	b2a9      	uxth	r1, r5
 8001812:	b280      	uxth	r0, r0
 8001814:	b292      	uxth	r2, r2
 8001816:	464b      	mov	r3, r9
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
        sx2 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx2, sx2+=dx3)
 8001818:	3501      	adds	r5, #1
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
 800181a:	f7ff fe53 	bl	80014c4 <drawHorizontalLine>
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
        sx2 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx2, sx2+=dx3)
 800181e:	45ab      	cmp	fp, r5
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color); 
}

void fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint16_t color)
 8001820:	4454      	add	r4, sl
 8001822:	4446      	add	r6, r8
        {
            drawHorizontalLine(sx1/1000, sy, (sx2-sx1)/1000, color);
        }
        sx2 = x1*1000;
        sy = y1;
        for(; sy<=y2; sy++, sx1+=dx2, sx2+=dx3)
 8001824:	daea      	bge.n	80017fc <fillTriangle+0x1b8>
 8001826:	e7b0      	b.n	800178a <fillTriangle+0x146>
    if (y1-y0 > 0) dx1=((x1-x0)*1000)/(y1-y0);
    else dx1=0;
    if (y2-y0 > 0) dx2=((x2-x0)*1000)/(y2-y0);
    else dx2=0;
    if (y2-y1 > 0) dx3=((x2-x1)*1000)/(y2-y1);
    else dx3=0;
 8001828:	2400      	movs	r4, #0
 800182a:	9403      	str	r4, [sp, #12]
 800182c:	e75b      	b.n	80016e6 <fillTriangle+0xa2>
 800182e:	bf00      	nop

08001830 <drawVerticalLine>:
    while (h--)
        drawHorizontalLine(x, y++, w, fillcolor);
}

void drawVerticalLine(uint16_t x, uint16_t y, uint16_t length, uint16_t color)
{
 8001830:	b510      	push	{r4, lr}
    if (x >= _width) return;
 8001832:	4c05      	ldr	r4, [pc, #20]	; (8001848 <drawVerticalLine+0x18>)
 8001834:	8824      	ldrh	r4, [r4, #0]
 8001836:	4284      	cmp	r4, r0
    while (h--)
        drawHorizontalLine(x, y++, w, fillcolor);
}

void drawVerticalLine(uint16_t x, uint16_t y, uint16_t length, uint16_t color)
{
 8001838:	b082      	sub	sp, #8
    if (x >= _width) return;
 800183a:	d903      	bls.n	8001844 <drawVerticalLine+0x14>

    drawFastLine(x,y,length,color,1);
 800183c:	2401      	movs	r4, #1
 800183e:	9400      	str	r4, [sp, #0]
 8001840:	f7ff fdce 	bl	80013e0 <drawFastLine>
}
 8001844:	b002      	add	sp, #8
 8001846:	bd10      	pop	{r4, pc}
 8001848:	20000068 	.word	0x20000068

0800184c <fillCircleHelper>:
    fillCircleHelper(x0, y0, r, 3, 0, color);
}

// used to do circles and roundrects!
void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color) 
{
 800184c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001850:	b089      	sub	sp, #36	; 0x24
    int16_t f = 1 - r;
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;
 8001852:	b297      	uxth	r7, r2

    while (x<y)
 8001854:	fa0f fb87 	sxth.w	fp, r7
    fillCircleHelper(x0, y0, r, 3, 0, color);
}

// used to do circles and roundrects!
void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color) 
{
 8001858:	9002      	str	r0, [sp, #8]
 800185a:	f8bd 004c 	ldrh.w	r0, [sp, #76]	; 0x4c
 800185e:	9106      	str	r1, [sp, #24]
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;

    while (x<y)
 8001860:	f1bb 0f00 	cmp.w	fp, #0
    fillCircleHelper(x0, y0, r, 3, 0, color);
}

// used to do circles and roundrects!
void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color) 
{
 8001864:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8001868:	9003      	str	r0, [sp, #12]
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;

    while (x<y)
 800186a:	f340 8089 	ble.w	8001980 <fillCircleHelper+0x134>
// used to do circles and roundrects!
void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color) 
{
    int16_t f = 1 - r;
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
 800186e:	ebc2 3cc2 	rsb	ip, r2, r2, lsl #15
}

// used to do circles and roundrects!
void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color) 
{
    int16_t f = 1 - r;
 8001872:	f1c2 0401 	rsb	r4, r2, #1
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
 8001876:	9a06      	ldr	r2, [sp, #24]
 8001878:	2501      	movs	r5, #1
 800187a:	f101 0903 	add.w	r9, r1, #3
 800187e:	f003 0001 	and.w	r0, r3, #1
 8001882:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001886:	f102 38ff 	add.w	r8, r2, #4294967295
 800188a:	f003 0302 	and.w	r3, r3, #2
        ddF_x += 2;
        f += ddF_x;

        if (cornername & 0x1)
        {
            drawVerticalLine(x0+x, y0-y, 2*y+1+delta, color);
 800188e:	1949      	adds	r1, r1, r5
}

// used to do circles and roundrects!
void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color) 
{
    int16_t f = 1 - r;
 8001890:	b2a4      	uxth	r4, r4
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
 8001892:	fa1f fc8c 	uxth.w	ip, ip
 8001896:	9004      	str	r0, [sp, #16]
 8001898:	9305      	str	r3, [sp, #20]
 800189a:	fa1f f888 	uxth.w	r8, r8
 800189e:	fa1f f989 	uxth.w	r9, r9
 80018a2:	2603      	movs	r6, #3
        ddF_x += 2;
        f += ddF_x;

        if (cornername & 0x1)
        {
            drawVerticalLine(x0+x, y0-y, 2*y+1+delta, color);
 80018a4:	9107      	str	r1, [sp, #28]
 80018a6:	e012      	b.n	80018ce <fillCircleHelper+0x82>
            drawVerticalLine(x0+y, y0-x, 2*x+1+delta, color);
        }
        if (cornername & 0x2)
 80018a8:	9805      	ldr	r0, [sp, #20]
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d147      	bne.n	800193e <fillCircleHelper+0xf2>
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;

    while (x<y)
 80018ae:	fa0f fa8a 	sxth.w	sl, sl
            drawVerticalLine(x0+y, y0-x, 2*x+1+delta, color);
        }
        if (cornername & 0x2)
        {
            drawVerticalLine(x0-x, y0-y, 2*y+1+delta, color);
            drawVerticalLine(x0-y, y0-x, 2*x+1+delta, color);
 80018b2:	3501      	adds	r5, #1
 80018b4:	3602      	adds	r6, #2
 80018b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80018ba:	f109 0902 	add.w	r9, r9, #2
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;

    while (x<y)
 80018be:	45d3      	cmp	fp, sl
            drawVerticalLine(x0+y, y0-x, 2*x+1+delta, color);
        }
        if (cornername & 0x2)
        {
            drawVerticalLine(x0-x, y0-y, 2*y+1+delta, color);
            drawVerticalLine(x0-y, y0-x, 2*x+1+delta, color);
 80018c0:	b2ad      	uxth	r5, r5
 80018c2:	b2b6      	uxth	r6, r6
 80018c4:	fa1f f888 	uxth.w	r8, r8
 80018c8:	fa1f f989 	uxth.w	r9, r9
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;

    while (x<y)
 80018cc:	dd58      	ble.n	8001980 <fillCircleHelper+0x134>
    {
        if (f >= 0)
 80018ce:	f414 4f00 	tst.w	r4, #32768	; 0x8000
        {
            y--;
            ddF_y += 2;
 80018d2:	f10c 0302 	add.w	r3, ip, #2
    int16_t x = 0;
    int16_t y = r;

    while (x<y)
    {
        if (f >= 0)
 80018d6:	d109      	bne.n	80018ec <fillCircleHelper+0xa0>
        {
            y--;
            ddF_y += 2;
 80018d8:	fa1f fc83 	uxth.w	ip, r3

    while (x<y)
    {
        if (f >= 0)
        {
            y--;
 80018dc:	3f01      	subs	r7, #1
            ddF_y += 2;
            f += ddF_y;
 80018de:	4464      	add	r4, ip

    while (x<y)
    {
        if (f >= 0)
        {
            y--;
 80018e0:	b2bf      	uxth	r7, r7
            ddF_y += 2;
            f += ddF_y;
 80018e2:	b2a4      	uxth	r4, r4
    while (x<y)
    {
        if (f >= 0)
        {
            y--;
            ddF_y += 2;
 80018e4:	fa1f fc8c 	uxth.w	ip, ip
 80018e8:	fa0f fb87 	sxth.w	fp, r7
        }
        x++;
        ddF_x += 2;
        f += ddF_x;

        if (cornername & 0x1)
 80018ec:	9a04      	ldr	r2, [sp, #16]
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
 80018ee:	1934      	adds	r4, r6, r4
        {
            y--;
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
 80018f0:	fa1f fa85 	uxth.w	sl, r5
        ddF_x += 2;
        f += ddF_x;
 80018f4:	b2a4      	uxth	r4, r4

        if (cornername & 0x1)
 80018f6:	2a00      	cmp	r2, #0
 80018f8:	d0d6      	beq.n	80018a8 <fillCircleHelper+0x5c>
    drawVerticalLine(x0, y0-r, 2*r+1, color);
    fillCircleHelper(x0, y0, r, 3, 0, color);
}

// used to do circles and roundrects!
void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color) 
 80018fa:	f8dd e008 	ldr.w	lr, [sp, #8]
        ddF_x += 2;
        f += ddF_x;

        if (cornername & 0x1)
        {
            drawVerticalLine(x0+x, y0-y, 2*y+1+delta, color);
 80018fe:	9a06      	ldr	r2, [sp, #24]
 8001900:	f8cd c000 	str.w	ip, [sp]
    drawVerticalLine(x0, y0-r, 2*r+1, color);
    fillCircleHelper(x0, y0, r, 3, 0, color);
}

// used to do circles and roundrects!
void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color) 
 8001904:	eb05 000e 	add.w	r0, r5, lr
        ddF_x += 2;
        f += ddF_x;

        if (cornername & 0x1)
        {
            drawVerticalLine(x0+x, y0-y, 2*y+1+delta, color);
 8001908:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800190c:	b2bb      	uxth	r3, r7
 800190e:	1ad1      	subs	r1, r2, r3
 8001910:	eb0e 0243 	add.w	r2, lr, r3, lsl #1
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	b280      	uxth	r0, r0
 8001918:	b289      	uxth	r1, r1
 800191a:	b292      	uxth	r2, r2
 800191c:	9b03      	ldr	r3, [sp, #12]
 800191e:	f7ff ff87 	bl	8001830 <drawVerticalLine>
            drawVerticalLine(x0+y, y0-x, 2*x+1+delta, color);
 8001922:	9a01      	ldr	r2, [sp, #4]
 8001924:	9b02      	ldr	r3, [sp, #8]
 8001926:	18d0      	adds	r0, r2, r3
 8001928:	b280      	uxth	r0, r0
 800192a:	4641      	mov	r1, r8
 800192c:	464a      	mov	r2, r9
 800192e:	9b03      	ldr	r3, [sp, #12]
 8001930:	f7ff ff7e 	bl	8001830 <drawVerticalLine>
        }
        if (cornername & 0x2)
 8001934:	9805      	ldr	r0, [sp, #20]
        f += ddF_x;

        if (cornername & 0x1)
        {
            drawVerticalLine(x0+x, y0-y, 2*y+1+delta, color);
            drawVerticalLine(x0+y, y0-x, 2*x+1+delta, color);
 8001936:	f8dd c000 	ldr.w	ip, [sp]
        }
        if (cornername & 0x2)
 800193a:	2800      	cmp	r0, #0
 800193c:	d0b7      	beq.n	80018ae <fillCircleHelper+0x62>
    drawVerticalLine(x0, y0-r, 2*r+1, color);
    fillCircleHelper(x0, y0, r, 3, 0, color);
}

// used to do circles and roundrects!
void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color) 
 800193e:	9b02      	ldr	r3, [sp, #8]
            drawVerticalLine(x0+x, y0-y, 2*y+1+delta, color);
            drawVerticalLine(x0+y, y0-x, 2*x+1+delta, color);
        }
        if (cornername & 0x2)
        {
            drawVerticalLine(x0-x, y0-y, 2*y+1+delta, color);
 8001940:	f8dd e018 	ldr.w	lr, [sp, #24]
 8001944:	f8cd c000 	str.w	ip, [sp]
    drawVerticalLine(x0, y0-r, 2*r+1, color);
    fillCircleHelper(x0, y0, r, 3, 0, color);
}

// used to do circles and roundrects!
void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color) 
 8001948:	1b58      	subs	r0, r3, r5
            drawVerticalLine(x0+x, y0-y, 2*y+1+delta, color);
            drawVerticalLine(x0+y, y0-x, 2*x+1+delta, color);
        }
        if (cornername & 0x2)
        {
            drawVerticalLine(x0-x, y0-y, 2*y+1+delta, color);
 800194a:	9b07      	ldr	r3, [sp, #28]
 800194c:	b2ba      	uxth	r2, r7
 800194e:	ebc2 010e 	rsb	r1, r2, lr
 8001952:	9201      	str	r2, [sp, #4]
 8001954:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8001958:	b280      	uxth	r0, r0
 800195a:	b289      	uxth	r1, r1
 800195c:	b292      	uxth	r2, r2
 800195e:	9b03      	ldr	r3, [sp, #12]
 8001960:	f7ff ff66 	bl	8001830 <drawVerticalLine>
            drawVerticalLine(x0-y, y0-x, 2*x+1+delta, color);
 8001964:	9a01      	ldr	r2, [sp, #4]
 8001966:	f8dd e008 	ldr.w	lr, [sp, #8]
 800196a:	9b03      	ldr	r3, [sp, #12]
 800196c:	ebc2 000e 	rsb	r0, r2, lr
 8001970:	b280      	uxth	r0, r0
 8001972:	4641      	mov	r1, r8
 8001974:	464a      	mov	r2, r9
 8001976:	f7ff ff5b 	bl	8001830 <drawVerticalLine>
 800197a:	f8dd c000 	ldr.w	ip, [sp]
 800197e:	e796      	b.n	80018ae <fillCircleHelper+0x62>
        }
    }
}
 8001980:	b009      	add	sp, #36	; 0x24
 8001982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001986:	bf00      	nop

08001988 <fillRoundRect>:
}


// fill a rounded rectangle
void fillRoundRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t r, uint16_t color)
{
 8001988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800198c:	b083      	sub	sp, #12
 800198e:	4616      	mov	r6, r2
 8001990:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8001994:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
  // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 8001998:	ebc4 3ac4 	rsb	sl, r4, r4, lsl #15
 800199c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80019a0:	eb04 0b00 	add.w	fp, r4, r0
 80019a4:	fa1f fa8a 	uxth.w	sl, sl
 80019a8:	fa1f fb8b 	uxth.w	fp, fp
 80019ac:	4452      	add	r2, sl
}


// fill a rounded rectangle
void fillRoundRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t r, uint16_t color)
{
 80019ae:	4607      	mov	r7, r0
  // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 80019b0:	b292      	uxth	r2, r2
 80019b2:	4658      	mov	r0, fp
}


// fill a rounded rectangle
void fillRoundRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t r, uint16_t color)
{
 80019b4:	4688      	mov	r8, r1
 80019b6:	4699      	mov	r9, r3
  // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 80019b8:	9500      	str	r5, [sp, #0]
 80019ba:	f7ff fd91 	bl	80014e0 <fillRect>

  // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 80019be:	1e78      	subs	r0, r7, #1
 80019c0:	1830      	adds	r0, r6, r0
 80019c2:	44a0      	add	r8, r4
 80019c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80019c8:	fa1f f888 	uxth.w	r8, r8
 80019cc:	1b00      	subs	r0, r0, r4
 80019ce:	44ca      	add	sl, r9
 80019d0:	fa1f f78a 	uxth.w	r7, sl
 80019d4:	4641      	mov	r1, r8
 80019d6:	4622      	mov	r2, r4
 80019d8:	2301      	movs	r3, #1
 80019da:	b280      	uxth	r0, r0
 80019dc:	9700      	str	r7, [sp, #0]
 80019de:	9501      	str	r5, [sp, #4]
 80019e0:	f7ff ff34 	bl	800184c <fillCircleHelper>
    fillCircleHelper(x+r, y+r, r, 2, h-2*r-1, color);
 80019e4:	4658      	mov	r0, fp
 80019e6:	4641      	mov	r1, r8
 80019e8:	4622      	mov	r2, r4
 80019ea:	2302      	movs	r3, #2
 80019ec:	970c      	str	r7, [sp, #48]	; 0x30
 80019ee:	950d      	str	r5, [sp, #52]	; 0x34
}
 80019f0:	b003      	add	sp, #12
 80019f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // smarter version
    fillRect(x+r, y, w-2*r, h, color);

  // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
    fillCircleHelper(x+r, y+r, r, 2, h-2*r-1, color);
 80019f6:	f7ff bf29 	b.w	800184c <fillCircleHelper>
 80019fa:	bf00      	nop

080019fc <drawRoundRect>:
    drawVerticalLine(x+w-1, y, h, color);
}

// draw a rounded rectangle
void drawRoundRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t r, uint16_t color)
{
 80019fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a00:	b085      	sub	sp, #20
 8001a02:	4694      	mov	ip, r2
 8001a04:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8001a08:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
  // smarter version
    drawHorizontalLine(x+r, y, w-2*r, color);
 8001a0c:	f8cd c008 	str.w	ip, [sp, #8]
 8001a10:	ebc4 3ac4 	rsb	sl, r4, r4, lsl #15
 8001a14:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8001a18:	fa1f fa8a 	uxth.w	sl, sl
 8001a1c:	eb04 0800 	add.w	r8, r4, r0
 8001a20:	eb0a 0902 	add.w	r9, sl, r2
 8001a24:	fa1f f888 	uxth.w	r8, r8
 8001a28:	fa1f f989 	uxth.w	r9, r9
    drawVerticalLine(x+w-1, y, h, color);
}

// draw a rounded rectangle
void drawRoundRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t r, uint16_t color)
{
 8001a2c:	460e      	mov	r6, r1
 8001a2e:	469b      	mov	fp, r3
 8001a30:	4607      	mov	r7, r0
  // smarter version
    drawHorizontalLine(x+r, y, w-2*r, color);
 8001a32:	464a      	mov	r2, r9
 8001a34:	4640      	mov	r0, r8
 8001a36:	462b      	mov	r3, r5
 8001a38:	f7ff fd44 	bl	80014c4 <drawHorizontalLine>
    drawHorizontalLine(x+r, y+h-1, w-2*r, color);
 8001a3c:	1e73      	subs	r3, r6, #1
 8001a3e:	445b      	add	r3, fp
 8001a40:	b29b      	uxth	r3, r3
    drawVerticalLine(x, y+r, h-2*r, color);
 8001a42:	19a6      	adds	r6, r4, r6
 8001a44:	44da      	add	sl, fp
 8001a46:	b2b6      	uxth	r6, r6
// draw a rounded rectangle
void drawRoundRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t r, uint16_t color)
{
  // smarter version
    drawHorizontalLine(x+r, y, w-2*r, color);
    drawHorizontalLine(x+r, y+h-1, w-2*r, color);
 8001a48:	9303      	str	r3, [sp, #12]
 8001a4a:	4640      	mov	r0, r8
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	464a      	mov	r2, r9
 8001a50:	462b      	mov	r3, r5
    drawVerticalLine(x, y+r, h-2*r, color);
 8001a52:	fa1f fa8a 	uxth.w	sl, sl
// draw a rounded rectangle
void drawRoundRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t r, uint16_t color)
{
  // smarter version
    drawHorizontalLine(x+r, y, w-2*r, color);
    drawHorizontalLine(x+r, y+h-1, w-2*r, color);
 8001a56:	f7ff fd35 	bl	80014c4 <drawHorizontalLine>
    drawVerticalLine(x, y+r, h-2*r, color);
 8001a5a:	4638      	mov	r0, r7
 8001a5c:	4631      	mov	r1, r6
 8001a5e:	4652      	mov	r2, sl
 8001a60:	462b      	mov	r3, r5
 8001a62:	f7ff fee5 	bl	8001830 <drawVerticalLine>
    drawVerticalLine(x+w-1, y+r, h-2*r, color);
 8001a66:	f8dd c008 	ldr.w	ip, [sp, #8]
 8001a6a:	3f01      	subs	r7, #1
 8001a6c:	4467      	add	r7, ip
 8001a6e:	b2bf      	uxth	r7, r7
 8001a70:	4638      	mov	r0, r7
 8001a72:	4631      	mov	r1, r6
 8001a74:	4652      	mov	r2, sl
 8001a76:	462b      	mov	r3, r5
  // draw four corners
    drawCircleHelper(x+r, y+r, r, 1, color);
    drawCircleHelper(x+w-r-1, y+r, r, 2, color);
 8001a78:	1b3f      	subs	r7, r7, r4
{
  // smarter version
    drawHorizontalLine(x+r, y, w-2*r, color);
    drawHorizontalLine(x+r, y+h-1, w-2*r, color);
    drawVerticalLine(x, y+r, h-2*r, color);
    drawVerticalLine(x+w-1, y+r, h-2*r, color);
 8001a7a:	f7ff fed9 	bl	8001830 <drawVerticalLine>
  // draw four corners
    drawCircleHelper(x+r, y+r, r, 1, color);
    drawCircleHelper(x+w-r-1, y+r, r, 2, color);
 8001a7e:	b2bf      	uxth	r7, r7
    drawHorizontalLine(x+r, y, w-2*r, color);
    drawHorizontalLine(x+r, y+h-1, w-2*r, color);
    drawVerticalLine(x, y+r, h-2*r, color);
    drawVerticalLine(x+w-1, y+r, h-2*r, color);
  // draw four corners
    drawCircleHelper(x+r, y+r, r, 1, color);
 8001a80:	4640      	mov	r0, r8
 8001a82:	4631      	mov	r1, r6
 8001a84:	4622      	mov	r2, r4
 8001a86:	2301      	movs	r3, #1
 8001a88:	9500      	str	r5, [sp, #0]
 8001a8a:	f7ff fb35 	bl	80010f8 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r, r, 2, color);
 8001a8e:	4638      	mov	r0, r7
 8001a90:	4631      	mov	r1, r6
 8001a92:	4622      	mov	r2, r4
 8001a94:	2302      	movs	r3, #2
 8001a96:	9500      	str	r5, [sp, #0]
 8001a98:	f7ff fb2e 	bl	80010f8 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001a9c:	9b03      	ldr	r3, [sp, #12]
 8001a9e:	9500      	str	r5, [sp, #0]
 8001aa0:	1b1e      	subs	r6, r3, r4
 8001aa2:	b2b6      	uxth	r6, r6
 8001aa4:	4631      	mov	r1, r6
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	4638      	mov	r0, r7
 8001aac:	f7ff fb24 	bl	80010f8 <drawCircleHelper>
    drawCircleHelper(x+r, y+h-r-1, r, 8, color);
 8001ab0:	4640      	mov	r0, r8
 8001ab2:	4631      	mov	r1, r6
 8001ab4:	4622      	mov	r2, r4
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	950e      	str	r5, [sp, #56]	; 0x38
}
 8001aba:	b005      	add	sp, #20
 8001abc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    drawVerticalLine(x+w-1, y+r, h-2*r, color);
  // draw four corners
    drawCircleHelper(x+r, y+r, r, 1, color);
    drawCircleHelper(x+w-r-1, y+r, r, 2, color);
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
    drawCircleHelper(x+r, y+h-r-1, r, 8, color);
 8001ac0:	f7ff bb1a 	b.w	80010f8 <drawCircleHelper>

08001ac4 <drawRect>:
    return c;
}

// draw a rectangle
void drawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8001acc:	460d      	mov	r5, r1
 8001ace:	4698      	mov	r8, r3
  // smarter version
    drawHorizontalLine(x, y, w, color);
 8001ad0:	4623      	mov	r3, r4
    return c;
}

// draw a rectangle
void drawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001ad2:	4606      	mov	r6, r0
 8001ad4:	4617      	mov	r7, r2
  // smarter version
    drawHorizontalLine(x, y, w, color);
 8001ad6:	f7ff fcf5 	bl	80014c4 <drawHorizontalLine>
    drawHorizontalLine(x, y+h-1, w, color);
 8001ada:	1e69      	subs	r1, r5, #1
 8001adc:	4441      	add	r1, r8
 8001ade:	4630      	mov	r0, r6
 8001ae0:	463a      	mov	r2, r7
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	b289      	uxth	r1, r1
 8001ae6:	f7ff fced 	bl	80014c4 <drawHorizontalLine>
    drawVerticalLine(x, y, h, color);
 8001aea:	4630      	mov	r0, r6
 8001aec:	4629      	mov	r1, r5
 8001aee:	4642      	mov	r2, r8
 8001af0:	4623      	mov	r3, r4
 8001af2:	f7ff fe9d 	bl	8001830 <drawVerticalLine>
    drawVerticalLine(x+w-1, y, h, color);
 8001af6:	3e01      	subs	r6, #1
 8001af8:	19bf      	adds	r7, r7, r6
 8001afa:	b2b8      	uxth	r0, r7
 8001afc:	4629      	mov	r1, r5
 8001afe:	4642      	mov	r2, r8
 8001b00:	4623      	mov	r3, r4
}
 8001b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
{
  // smarter version
    drawHorizontalLine(x, y, w, color);
    drawHorizontalLine(x, y+h-1, w, color);
    drawVerticalLine(x, y, h, color);
    drawVerticalLine(x+w-1, y, h, color);
 8001b06:	f7ff be93 	b.w	8001830 <drawVerticalLine>
 8001b0a:	bf00      	nop

08001b0c <fillCircle>:
    fillCircleHelper(x+r, y+r, r, 2, h-2*r-1, color);
}

// fill a circle
void fillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)
{
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0e:	4614      	mov	r4, r2
 8001b10:	b083      	sub	sp, #12
 8001b12:	460d      	mov	r5, r1
 8001b14:	4606      	mov	r6, r0
    writeRegister(TFTLCD_ENTRY_MOD, 0x1030);
 8001b16:	f241 0130 	movw	r1, #4144	; 0x1030
 8001b1a:	2003      	movs	r0, #3
    fillCircleHelper(x+r, y+r, r, 2, h-2*r-1, color);
}

// fill a circle
void fillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)
{
 8001b1c:	461f      	mov	r7, r3
    writeRegister(TFTLCD_ENTRY_MOD, 0x1030);
 8001b1e:	f7ff fa8f 	bl	8001040 <writeRegister>
    drawVerticalLine(x0, y0-r, 2*r+1, color);
 8001b22:	0062      	lsls	r2, r4, #1
 8001b24:	3201      	adds	r2, #1
 8001b26:	1b29      	subs	r1, r5, r4
 8001b28:	463b      	mov	r3, r7
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	b289      	uxth	r1, r1
 8001b2e:	b292      	uxth	r2, r2
 8001b30:	f7ff fe7e 	bl	8001830 <drawVerticalLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8001b34:	2300      	movs	r3, #0
 8001b36:	e88d 0088 	stmia.w	sp, {r3, r7}
 8001b3a:	4630      	mov	r0, r6
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	4622      	mov	r2, r4
 8001b40:	2303      	movs	r3, #3
 8001b42:	f7ff fe83 	bl	800184c <fillCircleHelper>
}
 8001b46:	b003      	add	sp, #12
 8001b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4a:	bf00      	nop

08001b4c <goTo>:
    goTo(0,0);
}

void goTo(int x, int y) 
{
    writeRegister(0x0020, x);     // GRAM Address Set (Horizontal Address) (R20h)
 8001b4c:	b283      	uxth	r3, r0
{
    goTo(0,0);
}

void goTo(int x, int y) 
{
 8001b4e:	b510      	push	{r4, lr}
    writeRegister(0x0020, x);     // GRAM Address Set (Horizontal Address) (R20h)
 8001b50:	2020      	movs	r0, #32
{
    goTo(0,0);
}

void goTo(int x, int y) 
{
 8001b52:	460c      	mov	r4, r1
    writeRegister(0x0020, x);     // GRAM Address Set (Horizontal Address) (R20h)
 8001b54:	4619      	mov	r1, r3
 8001b56:	f7ff fa73 	bl	8001040 <writeRegister>
    writeRegister(0x0021, y);     // GRAM Address Set (Vertical Address) (R21h)
 8001b5a:	b2a1      	uxth	r1, r4
 8001b5c:	2021      	movs	r0, #33	; 0x21
 8001b5e:	f7ff fa6f 	bl	8001040 <writeRegister>
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8001b62:	f240 0364 	movw	r3, #100	; 0x64
 8001b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b6a:	2222      	movs	r2, #34	; 0x22
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	801a      	strh	r2, [r3, #0]
    // uDelay(0);
    *fsmcRegister=cmd<<8;
 8001b70:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8001b74:	801a      	strh	r2, [r3, #0]
void goTo(int x, int y) 
{
    writeRegister(0x0020, x);     // GRAM Address Set (Horizontal Address) (R20h)
    writeRegister(0x0021, y);     // GRAM Address Set (Vertical Address) (R21h)
    writeCommand(0x0022);            // Write Data to GRAM (R22h)
}
 8001b76:	bd10      	pop	{r4, pc}

08001b78 <goHome>:
{
    return rotation;
}
void goHome(void) 
{
    goTo(0,0);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	f7ff bfe6 	b.w	8001b4c <goTo>

08001b80 <fillScreen>:
    }
}


void fillScreen(uint16_t color) 
{
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b82:	4606      	mov	r6, r0
    goHome();
 8001b84:	f7ff fff8 	bl	8001b78 <goHome>
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <fillScreen+0x24>)
 8001b8a:	0237      	lsls	r7, r6, #8
 8001b8c:	681d      	ldr	r5, [r3, #0]
 8001b8e:	b2bf      	uxth	r7, r7
 8001b90:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
    i *= 240;


    while (i--) 
    {
        uDelay(0);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff f9ab 	bl	8000ef0 <uDelay>

    i = 320;
    i *= 240;


    while (i--) 
 8001b9a:	3c01      	subs	r4, #1
{
    
    
    // *retvl=(uint8_t)data >> 8;
    // *(retvl+1)=(uint8_t)data;
    *fsmcData=data;
 8001b9c:	802e      	strh	r6, [r5, #0]
    // uDelay(0);
    *fsmcData=data<<8;
 8001b9e:	802f      	strh	r7, [r5, #0]

    i = 320;
    i *= 240;


    while (i--) 
 8001ba0:	d1f8      	bne.n	8001b94 <fillScreen+0x14>
        uDelay(0);
        writeData(color); 
    }


}
 8001ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ba4:	20000060 	.word	0x20000060

08001ba8 <setRotation>:
    writeData(0);  
    writeData(0);
}

void setRotation(uint8_t x)
{
 8001ba8:	b510      	push	{r4, lr}
    writeRegister(TFTLCD_ENTRY_MOD, 0x1030);
 8001baa:	f241 0130 	movw	r1, #4144	; 0x1030
    writeData(0);  
    writeData(0);
}

void setRotation(uint8_t x)
{
 8001bae:	4604      	mov	r4, r0
    writeRegister(TFTLCD_ENTRY_MOD, 0x1030);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f7ff fa45 	bl	8001040 <writeRegister>

    x %= 4;  // cant be higher than 3
 8001bb6:	f004 0403 	and.w	r4, r4, #3
    rotation = x;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <setRotation+0x40>)
    switch (x) {
 8001bbc:	2c02      	cmp	r4, #2
void setRotation(uint8_t x)
{
    writeRegister(TFTLCD_ENTRY_MOD, 0x1030);

    x %= 4;  // cant be higher than 3
    rotation = x;
 8001bbe:	701c      	strb	r4, [r3, #0]
        case 1:
        _width = TFTHEIGHT; 
        _height = TFTWIDTH;
        break;
        case 2:
        _width = TFTWIDTH; 
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <setRotation+0x44>)
{
    writeRegister(TFTLCD_ENTRY_MOD, 0x1030);

    x %= 4;  // cant be higher than 3
    rotation = x;
    switch (x) {
 8001bc2:	d003      	beq.n	8001bcc <setRotation+0x24>
 8001bc4:	2c03      	cmp	r4, #3
 8001bc6:	d008      	beq.n	8001bda <setRotation+0x32>
 8001bc8:	2c01      	cmp	r4, #1
 8001bca:	d006      	beq.n	8001bda <setRotation+0x32>
        case 1:
        _width = TFTHEIGHT; 
        _height = TFTWIDTH;
        break;
        case 2:
        _width = TFTWIDTH; 
 8001bcc:	22f0      	movs	r2, #240	; 0xf0
 8001bce:	801a      	strh	r2, [r3, #0]
        _height = TFTHEIGHT;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <setRotation+0x48>)
 8001bd2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bd6:	801a      	strh	r2, [r3, #0]
        break;
 8001bd8:	bd10      	pop	{r4, pc}
        case 3:
        _width = TFTHEIGHT; 
 8001bda:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bde:	801a      	strh	r2, [r3, #0]
        _height = TFTWIDTH;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <setRotation+0x48>)
 8001be2:	22f0      	movs	r2, #240	; 0xf0
 8001be4:	801a      	strh	r2, [r3, #0]
 8001be6:	bd10      	pop	{r4, pc}
 8001be8:	2000005c 	.word	0x2000005c
 8001bec:	20000068 	.word	0x20000068
 8001bf0:	2000006e 	.word	0x2000006e

08001bf4 <initDisplay>:
// }



void initDisplay(void) 
{
 8001bf4:	b538      	push	{r3, r4, r5, lr}
    uint16_t a, d;
    uint8_t i;
    rotation = 0;
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <initDisplay+0xb4>)
 8001bf8:	2400      	movs	r4, #0
 8001bfa:	701c      	strb	r4, [r3, #0]
    _width = TFTWIDTH;
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <initDisplay+0xb8>)
 8001bfe:	22f0      	movs	r2, #240	; 0xf0
 8001c00:	801a      	strh	r2, [r3, #0]
    _height = TFTHEIGHT;
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <initDisplay+0xbc>)
 8001c04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c08:	801a      	strh	r2, [r3, #0]


    cursor_y = cursor_x = 0;
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <initDisplay+0xc0>)
 8001c0c:	801c      	strh	r4, [r3, #0]
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <initDisplay+0xc4>)
 8001c10:	801c      	strh	r4, [r3, #0]
    textsize = 1;
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <initDisplay+0xc8>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
    textcolor = 0xFFFF;
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <initDisplay+0xcc>)
 8001c1a:	f04f 32ff 	mov.w	r2, #4294967295
    GPIO_SetBits(GPIOE, GPIO_Pin_1);
 8001c1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c22:	2102      	movs	r1, #2
    _height = TFTHEIGHT;


    cursor_y = cursor_x = 0;
    textsize = 1;
    textcolor = 0xFFFF;
 8001c24:	801a      	strh	r2, [r3, #0]
    GPIO_SetBits(GPIOE, GPIO_Pin_1);
 8001c26:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c2a:	f000 fde5 	bl	80027f8 <GPIO_SetBits>
    delayMillis(2); 
 8001c2e:	2002      	movs	r0, #2
 8001c30:	f7ff f972 	bl	8000f18 <delayMillis>
    reset();
 8001c34:	f7ff f976 	bl	8000f24 <reset>
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <initDisplay+0xd0>)
    reset();
  
  
  
  uint16_t identifier = readRegister(0x0);
  printf ("TFTLCD Driver ID: 0x%04X\r\n",identifier);
 8001c3a:	4823      	ldr	r0, [pc, #140]	; (8001cc8 <initDisplay+0xd4>)
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8001c3c:	681a      	ldr	r2, [r3, #0]
// d[8:15] version
uint16_t readData() 
{
    uint16_t d = 0;

    d = *fsmcData;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <initDisplay+0xd8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
//     *fsmcRegister=cmd;
// }
// d[8:15] version
void writeCommand(uint16_t cmd) 
{
    *fsmcRegister=cmd;
 8001c42:	8014      	strh	r4, [r2, #0]
    // uDelay(0);
    *fsmcRegister=cmd<<8;
 8001c44:	8014      	strh	r4, [r2, #0]
// d[8:15] version
uint16_t readData() 
{
    uint16_t d = 0;

    d = *fsmcData;
 8001c46:	881c      	ldrh	r4, [r3, #0]
    // d <<= 8;
    // uDelay(0);
    d |= *fsmcData>>8;
 8001c48:	881b      	ldrh	r3, [r3, #0]
// d[8:15] version
uint16_t readData() 
{
    uint16_t d = 0;

    d = *fsmcData;
 8001c4a:	b2a4      	uxth	r4, r4
    // d <<= 8;
    // uDelay(0);
    d |= *fsmcData>>8;
 8001c4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001c50:	431c      	orrs	r4, r3
    reset();
  
  
  
  uint16_t identifier = readRegister(0x0);
  printf ("TFTLCD Driver ID: 0x%04X\r\n",identifier);
 8001c52:	4621      	mov	r1, r4
 8001c54:	f7ff f820 	bl	8000c98 <tfp_printf>
  if (identifier == 0x9325) 
 8001c58:	f249 3325 	movw	r3, #37669	; 0x9325
 8001c5c:	429c      	cmp	r4, r3
 8001c5e:	d01f      	beq.n	8001ca0 <initDisplay+0xac>
  {
    printf("Found ILI9325");
  } else if (identifier == 0x9328) {
 8001c60:	f249 3328 	movw	r3, #37672	; 0x9328
 8001c64:	429c      	cmp	r4, r3
 8001c66:	d004      	beq.n	8001c72 <initDisplay+0x7e>
    printf("Found ILI9328\r\n");
  } else {
    printf("Unknown driver chip\r\n");
 8001c68:	4819      	ldr	r0, [pc, #100]	; (8001cd0 <initDisplay+0xdc>)
            writeRegister(a, d);
      //printf("addr: %d data: 0x%04X\r\n",a,d); 
      
        }
    }
}
 8001c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  {
    printf("Found ILI9325");
  } else if (identifier == 0x9328) {
    printf("Found ILI9328\r\n");
  } else {
    printf("Unknown driver chip\r\n");
 8001c6e:	f7ff b813 	b.w	8000c98 <tfp_printf>
  printf ("TFTLCD Driver ID: 0x%04X\r\n",identifier);
  if (identifier == 0x9325) 
  {
    printf("Found ILI9325");
  } else if (identifier == 0x9328) {
    printf("Found ILI9328\r\n");
 8001c72:	4818      	ldr	r0, [pc, #96]	; (8001cd4 <initDisplay+0xe0>)
 8001c74:	f7ff f810 	bl	8000c98 <tfp_printf>
    printf("Unknown driver chip\r\n");
    
    return;
  }
    for (i = 0; i < sizeof(_regValues) / 4; i++) {
        a = *(_regValues + i*2);
 8001c78:	4c17      	ldr	r4, [pc, #92]	; (8001cd8 <initDisplay+0xe4>)
//     millisecondCounter++;
// }



void initDisplay(void) 
 8001c7a:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
 8001c7e:	e004      	b.n	8001c8a <initDisplay+0x96>
        d = *(_regValues + i*2 + 1);

        if (a == 0xFF) {
            delayMillis(d);
        } else {
            writeRegister(a, d);
 8001c80:	3404      	adds	r4, #4
 8001c82:	f7ff f9dd 	bl	8001040 <writeRegister>
  } else {
    printf("Unknown driver chip\r\n");
    
    return;
  }
    for (i = 0; i < sizeof(_regValues) / 4; i++) {
 8001c86:	42ac      	cmp	r4, r5
 8001c88:	d009      	beq.n	8001c9e <initDisplay+0xaa>
        a = *(_regValues + i*2);
 8001c8a:	8820      	ldrh	r0, [r4, #0]
        d = *(_regValues + i*2 + 1);
 8001c8c:	8861      	ldrh	r1, [r4, #2]

        if (a == 0xFF) {
 8001c8e:	28ff      	cmp	r0, #255	; 0xff
 8001c90:	d1f6      	bne.n	8001c80 <initDisplay+0x8c>
            delayMillis(d);
 8001c92:	4608      	mov	r0, r1
        } else {
            writeRegister(a, d);
 8001c94:	3404      	adds	r4, #4
    for (i = 0; i < sizeof(_regValues) / 4; i++) {
        a = *(_regValues + i*2);
        d = *(_regValues + i*2 + 1);

        if (a == 0xFF) {
            delayMillis(d);
 8001c96:	f7ff f93f 	bl	8000f18 <delayMillis>
  } else {
    printf("Unknown driver chip\r\n");
    
    return;
  }
    for (i = 0; i < sizeof(_regValues) / 4; i++) {
 8001c9a:	42ac      	cmp	r4, r5
 8001c9c:	d1f5      	bne.n	8001c8a <initDisplay+0x96>
            writeRegister(a, d);
      //printf("addr: %d data: 0x%04X\r\n",a,d); 
      
        }
    }
}
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
  
  uint16_t identifier = readRegister(0x0);
  printf ("TFTLCD Driver ID: 0x%04X\r\n",identifier);
  if (identifier == 0x9325) 
  {
    printf("Found ILI9325");
 8001ca0:	480e      	ldr	r0, [pc, #56]	; (8001cdc <initDisplay+0xe8>)
 8001ca2:	f7fe fff9 	bl	8000c98 <tfp_printf>
 8001ca6:	e7e7      	b.n	8001c78 <initDisplay+0x84>
 8001ca8:	2000005c 	.word	0x2000005c
 8001cac:	20000068 	.word	0x20000068
 8001cb0:	2000006e 	.word	0x2000006e
 8001cb4:	2000006a 	.word	0x2000006a
 8001cb8:	20000050 	.word	0x20000050
 8001cbc:	2000006c 	.word	0x2000006c
 8001cc0:	20000070 	.word	0x20000070
 8001cc4:	20000064 	.word	0x20000064
 8001cc8:	08003604 	.word	0x08003604
 8001ccc:	20000060 	.word	0x20000060
 8001cd0:	08003640 	.word	0x08003640
 8001cd4:	08003630 	.word	0x08003630
 8001cd8:	080034d4 	.word	0x080034d4
 8001cdc:	08003620 	.word	0x08003620

08001ce0 <abs>:
}

// // need abs
uint16_t abs(int32_t _numIn)
{
    if (_numIn<0)
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	db01      	blt.n	8001ce8 <abs+0x8>
    {
      return( (uint16_t)(_numIn*=-1));
    }
    else
    {
        return ((uint16_t)_numIn);
 8001ce4:	b280      	uxth	r0, r0
    }
}
 8001ce6:	4770      	bx	lr
// // need abs
uint16_t abs(int32_t _numIn)
{
    if (_numIn<0)
    {
      return( (uint16_t)(_numIn*=-1));
 8001ce8:	4240      	negs	r0, r0
 8001cea:	b280      	uxth	r0, r0
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop

08001cf0 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8001cf0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8001cf2:	f243 54a0 	movw	r4, #13728	; 0x35a0
 8001cf6:	f6c0 0400 	movt	r4, #2048	; 0x800
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	4605      	mov	r5, r0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8001cfe:	2101      	movs	r1, #1
 8001d00:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8001d04:	f000 fef2 	bl	8002aec <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8001d08:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8001d0c:	f240 0314 	movw	r3, #20
 8001d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8001d14:	8a22      	ldrh	r2, [r4, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8001d16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8001d1a:	9200      	str	r2, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001d22:	2200      	movs	r2, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001d24:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8001d28:	4669      	mov	r1, sp
  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001d2a:	2302      	movs	r3, #2
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001d2c:	f88d 2006 	strb.w	r2, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001d30:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8001d34:	f000 fcd0 	bl	80026d8 <GPIO_Init>
}
 8001d38:	b003      	add	sp, #12
 8001d3a:	bd30      	pop	{r4, r5, pc}

08001d3c <STM_EVAL_LEDOn>:
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8001d3c:	f243 53a0 	movw	r3, #13728	; 0x35a0
 8001d40:	f240 0214 	movw	r2, #20
 8001d44:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001d48:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001d4c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001d50:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8001d54:	8a1b      	ldrh	r3, [r3, #16]
 8001d56:	8313      	strh	r3, [r2, #24]
}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop

08001d5c <STM_EVAL_LEDOff>:
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8001d5c:	f243 53a0 	movw	r3, #13728	; 0x35a0
 8001d60:	f240 0214 	movw	r2, #20
 8001d64:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001d68:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001d6c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001d70:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8001d74:	8a1b      	ldrh	r3, [r3, #16]
 8001d76:	8353      	strh	r3, [r2, #26]
}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop

08001d7c <STM_EVAL_LEDToggle>:
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8001d7c:	f240 0314 	movw	r3, #20
 8001d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d84:	f243 52a0 	movw	r2, #13728	; 0x35a0
 8001d88:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001d8c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d90:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8001d94:	6959      	ldr	r1, [r3, #20]
 8001d96:	8a12      	ldrh	r2, [r2, #16]
 8001d98:	404a      	eors	r2, r1
 8001d9a:	615a      	str	r2, [r3, #20]
}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop

08001da0 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8001da0:	b530      	push	{r4, r5, lr}
 8001da2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8001da4:	2001      	movs	r0, #1
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8001da6:	b087      	sub	sp, #28
 8001da8:	460d      	mov	r5, r1
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8001daa:	4601      	mov	r1, r0
 8001dac:	f000 fe9e 	bl	8002aec <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001db0:	2101      	movs	r1, #1
 8001db2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001db6:	f000 fee1 	bl	8002b7c <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <STM_EVAL_PBInit+0x7c>)
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8001dbc:	a906      	add	r1, sp, #24
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8001dbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8001dc2:	2301      	movs	r3, #1
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8001dc4:	6920      	ldr	r0, [r4, #16]
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8001dc6:	f841 3d14 	str.w	r3, [r1, #-20]!
  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001dca:	2400      	movs	r4, #0
 8001dcc:	f88d 4008 	strb.w	r4, [sp, #8]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001dd0:	f88d 400b 	strb.w	r4, [sp, #11]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8001dd4:	f000 fc80 	bl	80026d8 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8001dd8:	2d01      	cmp	r5, #1
 8001dda:	d001      	beq.n	8001de0 <STM_EVAL_PBInit+0x40>
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure); 
  }
}
 8001ddc:	b007      	add	sp, #28
 8001dde:	bd30      	pop	{r4, r5, pc}
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);

  if (Button_Mode == BUTTON_MODE_EXTI)
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8001de0:	4621      	mov	r1, r4
 8001de2:	4620      	mov	r0, r4
 8001de4:	f001 f806 	bl	8002df4 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8001de8:	2308      	movs	r3, #8
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);
 8001dea:	a803      	add	r0, sp, #12
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8001dec:	f88d 3011 	strb.w	r3, [sp, #17]
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8001df0:	9503      	str	r5, [sp, #12]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001df2:	f88d 4010 	strb.w	r4, [sp, #16]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001df6:	f88d 5012 	strb.w	r5, [sp, #18]
    EXTI_Init(&EXTI_InitStructure);
 8001dfa:	f000 f8a1 	bl	8001f40 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001dfe:	230f      	movs	r3, #15
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8001e00:	2206      	movs	r2, #6
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure); 
 8001e02:	a805      	add	r0, sp, #20
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8001e04:	f88d 2014 	strb.w	r2, [sp, #20]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001e08:	f88d 3015 	strb.w	r3, [sp, #21]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8001e0c:	f88d 3016 	strb.w	r3, [sp, #22]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001e10:	f88d 5017 	strb.w	r5, [sp, #23]

    NVIC_Init(&NVIC_InitStructure); 
 8001e14:	f000 f81a 	bl	8001e4c <NVIC_Init>
 8001e18:	e7e0      	b.n	8001ddc <STM_EVAL_PBInit+0x3c>
 8001e1a:	bf00      	nop
 8001e1c:	20000014 	.word	0x20000014

08001e20 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8001e20:	b508      	push	{r3, lr}
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001e22:	f240 0314 	movw	r3, #20
 8001e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e2a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001e2e:	2101      	movs	r1, #1
 8001e30:	6918      	ldr	r0, [r3, #16]
 8001e32:	f000 fccd 	bl	80027d0 <GPIO_ReadInputDataBit>
}
 8001e36:	bd08      	pop	{r3, pc}

08001e38 <NVIC_PriorityGroupConfig>:
 8001e38:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001e3c:	f040 60be 	orr.w	r0, r0, #99614720	; 0x5f00000
 8001e40:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e44:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
 8001e48:	60d8      	str	r0, [r3, #12]
 8001e4a:	4770      	bx	lr

08001e4c <NVIC_Init>:
 8001e4c:	78c3      	ldrb	r3, [r0, #3]
 8001e4e:	b430      	push	{r4, r5}
 8001e50:	b97b      	cbnz	r3, 8001e72 <NVIC_Init+0x26>
 8001e52:	7802      	ldrb	r2, [r0, #0]
 8001e54:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001e58:	0951      	lsrs	r1, r2, #5
 8001e5a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e5e:	f002 021f 	and.w	r2, r2, #31
 8001e62:	3120      	adds	r1, #32
 8001e64:	2001      	movs	r0, #1
 8001e66:	fa10 f202 	lsls.w	r2, r0, r2
 8001e6a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001e6e:	bc30      	pop	{r4, r5}
 8001e70:	4770      	bx	lr
 8001e72:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001e76:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e7a:	7842      	ldrb	r2, [r0, #1]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	7885      	ldrb	r5, [r0, #2]
 8001e80:	7801      	ldrb	r1, [r0, #0]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001e88:	f1c3 0404 	rsb	r4, r3, #4
 8001e8c:	b2e4      	uxtb	r4, r4
 8001e8e:	fa12 f404 	lsls.w	r4, r2, r4
 8001e92:	220f      	movs	r2, #15
 8001e94:	411a      	asrs	r2, r3
 8001e96:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001e9a:	b2e4      	uxtb	r4, r4
 8001e9c:	402a      	ands	r2, r5
 8001e9e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001ea2:	18cb      	adds	r3, r1, r3
 8001ea4:	4322      	orrs	r2, r4
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001eac:	7802      	ldrb	r2, [r0, #0]
 8001eae:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001eb2:	0951      	lsrs	r1, r2, #5
 8001eb4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa10 f202 	lsls.w	r2, r0, r2
 8001ec2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001ec6:	e7d2      	b.n	8001e6e <NVIC_Init+0x22>

08001ec8 <NVIC_SetVectorTable>:
 8001ec8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8001ecc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001ed0:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001ed4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001ed8:	4301      	orrs	r1, r0
 8001eda:	6099      	str	r1, [r3, #8]
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop

08001ee0 <NVIC_SystemLPConfig>:
 8001ee0:	b941      	cbnz	r1, 8001ef4 <NVIC_SystemLPConfig+0x14>
 8001ee2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001ee6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	ea22 0000 	bic.w	r0, r2, r0
 8001ef0:	6118      	str	r0, [r3, #16]
 8001ef2:	4770      	bx	lr
 8001ef4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001ef8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	4310      	orrs	r0, r2
 8001f00:	6118      	str	r0, [r3, #16]
 8001f02:	4770      	bx	lr

08001f04 <SysTick_CLKSourceConfig>:
 8001f04:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001f08:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001f0c:	2804      	cmp	r0, #4
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	bf0c      	ite	eq
 8001f12:	f042 0204 	orreq.w	r2, r2, #4
 8001f16:	f022 0204 	bicne.w	r2, r2, #4
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop

08001f20 <EXTI_DeInit>:
 8001f20:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001f24:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f2c0 017f 	movt	r1, #127	; 0x7f
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	6159      	str	r1, [r3, #20]
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop

08001f40 <EXTI_Init>:
 8001f40:	7983      	ldrb	r3, [r0, #6]
 8001f42:	b470      	push	{r4, r5, r6}
 8001f44:	b35b      	cbz	r3, 8001f9e <EXTI_Init+0x5e>
 8001f46:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001f4a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f4e:	6801      	ldr	r1, [r0, #0]
 8001f50:	681e      	ldr	r6, [r3, #0]
 8001f52:	7902      	ldrb	r2, [r0, #4]
 8001f54:	7945      	ldrb	r5, [r0, #5]
 8001f56:	43cc      	mvns	r4, r1
 8001f58:	ea04 0606 	and.w	r6, r4, r6
 8001f5c:	601e      	str	r6, [r3, #0]
 8001f5e:	685e      	ldr	r6, [r3, #4]
 8001f60:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001f64:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8001f68:	4034      	ands	r4, r6
 8001f6a:	605c      	str	r4, [r3, #4]
 8001f6c:	6814      	ldr	r4, [r2, #0]
 8001f6e:	ea44 0101 	orr.w	r1, r4, r1
 8001f72:	6011      	str	r1, [r2, #0]
 8001f74:	6802      	ldr	r2, [r0, #0]
 8001f76:	6898      	ldr	r0, [r3, #8]
 8001f78:	43d1      	mvns	r1, r2
 8001f7a:	ea01 0000 	and.w	r0, r1, r0
 8001f7e:	6098      	str	r0, [r3, #8]
 8001f80:	68d8      	ldr	r0, [r3, #12]
 8001f82:	2d10      	cmp	r5, #16
 8001f84:	ea01 0100 	and.w	r1, r1, r0
 8001f88:	60d9      	str	r1, [r3, #12]
 8001f8a:	d014      	beq.n	8001fb6 <EXTI_Init+0x76>
 8001f8c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001f90:	f505 359e 	add.w	r5, r5, #80896	; 0x13c00
 8001f94:	682b      	ldr	r3, [r5, #0]
 8001f96:	ea43 0202 	orr.w	r2, r3, r2
 8001f9a:	602a      	str	r2, [r5, #0]
 8001f9c:	e009      	b.n	8001fb2 <EXTI_Init+0x72>
 8001f9e:	7903      	ldrb	r3, [r0, #4]
 8001fa0:	6801      	ldr	r1, [r0, #0]
 8001fa2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fa6:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	ea22 0201 	bic.w	r2, r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	bc70      	pop	{r4, r5, r6}
 8001fb4:	4770      	bx	lr
 8001fb6:	6899      	ldr	r1, [r3, #8]
 8001fb8:	4311      	orrs	r1, r2
 8001fba:	6099      	str	r1, [r3, #8]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	ea41 0202 	orr.w	r2, r1, r2
 8001fc2:	60da      	str	r2, [r3, #12]
 8001fc4:	e7f5      	b.n	8001fb2 <EXTI_Init+0x72>
 8001fc6:	bf00      	nop

08001fc8 <EXTI_StructInit>:
 8001fc8:	2300      	movs	r3, #0
 8001fca:	220c      	movs	r2, #12
 8001fcc:	6003      	str	r3, [r0, #0]
 8001fce:	7103      	strb	r3, [r0, #4]
 8001fd0:	7142      	strb	r2, [r0, #5]
 8001fd2:	7183      	strb	r3, [r0, #6]
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop

08001fd8 <EXTI_GenerateSWInterrupt>:
 8001fd8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001fdc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	ea40 0202 	orr.w	r2, r0, r2
 8001fe6:	611a      	str	r2, [r3, #16]
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop

08001fec <EXTI_GetFlagStatus>:
 8001fec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001ff0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	4218      	tst	r0, r3
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2000      	moveq	r0, #0
 8001ffc:	2001      	movne	r0, #1
 8001ffe:	4770      	bx	lr

08002000 <EXTI_ClearFlag>:
 8002000:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002004:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002008:	6158      	str	r0, [r3, #20]
 800200a:	4770      	bx	lr

0800200c <EXTI_GetITStatus>:
 800200c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002010:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	4003      	ands	r3, r0
 800201a:	d004      	beq.n	8002026 <EXTI_GetITStatus+0x1a>
 800201c:	4210      	tst	r0, r2
 800201e:	bf0c      	ite	eq
 8002020:	2000      	moveq	r0, #0
 8002022:	2001      	movne	r0, #1
 8002024:	4770      	bx	lr
 8002026:	4618      	mov	r0, r3
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop

0800202c <EXTI_ClearITPendingBit>:
 800202c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002030:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002034:	6158      	str	r0, [r3, #20]
 8002036:	4770      	bx	lr

08002038 <FSMC_NORSRAMDeInit>:
 8002038:	b410      	push	{r4}
 800203a:	b1a0      	cbz	r0, 8002066 <FSMC_NORSRAMDeInit+0x2e>
 800203c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002040:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002044:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8002048:	f44f 7382 	mov.w	r3, #260	; 0x104
 800204c:	1c44      	adds	r4, r0, #1
 800204e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002052:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8002056:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800205a:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800205e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8002062:	bc10      	pop	{r4}
 8002064:	4770      	bx	lr
 8002066:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800206a:	f243 02db 	movw	r2, #12507	; 0x30db
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e7ea      	b.n	8002048 <FSMC_NORSRAMDeInit+0x10>
 8002072:	bf00      	nop

08002074 <FSMC_NORSRAMInit>:
 8002074:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002078:	6881      	ldr	r1, [r0, #8]
 800207a:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800207e:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8002082:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8002086:	f8d0 c014 	ldr.w	ip, [r0, #20]
 800208a:	6987      	ldr	r7, [r0, #24]
 800208c:	69c6      	ldr	r6, [r0, #28]
 800208e:	6a05      	ldr	r5, [r0, #32]
 8002090:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8002094:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002096:	6803      	ldr	r3, [r0, #0]
 8002098:	ea41 0a0a 	orr.w	sl, r1, sl
 800209c:	ea4a 0909 	orr.w	r9, sl, r9
 80020a0:	ea49 0908 	orr.w	r9, r9, r8
 80020a4:	ea49 090c 	orr.w	r9, r9, ip
 80020a8:	ea49 0707 	orr.w	r7, r9, r7
 80020ac:	ea47 0606 	orr.w	r6, r7, r6
 80020b0:	ea46 0505 	orr.w	r5, r6, r5
 80020b4:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80020b6:	ea45 050b 	orr.w	r5, r5, fp
 80020ba:	4335      	orrs	r5, r6
 80020bc:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80020be:	f04f 4420 	mov.w	r4, #2684354560	; 0xa0000000
 80020c2:	4315      	orrs	r5, r2
 80020c4:	4335      	orrs	r5, r6
 80020c6:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80020ca:	2908      	cmp	r1, #8
 80020cc:	bf02      	ittt	eq
 80020ce:	f854 1023 	ldreq.w	r1, [r4, r3, lsl #2]
 80020d2:	f041 0140 	orreq.w	r1, r1, #64	; 0x40
 80020d6:	f844 1023 	streq.w	r1, [r4, r3, lsl #2]
 80020da:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80020dc:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80020e0:	680d      	ldr	r5, [r1, #0]
 80020e2:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80020e6:	688f      	ldr	r7, [r1, #8]
 80020e8:	68cc      	ldr	r4, [r1, #12]
 80020ea:	690e      	ldr	r6, [r1, #16]
 80020ec:	6949      	ldr	r1, [r1, #20]
 80020ee:	ea48 0505 	orr.w	r5, r8, r5
 80020f2:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
 80020f6:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
 80020fa:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80020fe:	ea45 5506 	orr.w	r5, r5, r6, lsl #20
 8002102:	1c5c      	adds	r4, r3, #1
 8002104:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
 8002108:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800210c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002110:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8002114:	d00a      	beq.n	800212c <FSMC_NORSRAMInit+0xb8>
 8002116:	f44f 7282 	mov.w	r2, #260	; 0x104
 800211a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800211e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002122:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002126:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800212a:	4770      	bx	lr
 800212c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800212e:	6997      	ldr	r7, [r2, #24]
 8002130:	6811      	ldr	r1, [r2, #0]
 8002132:	6856      	ldr	r6, [r2, #4]
 8002134:	6895      	ldr	r5, [r2, #8]
 8002136:	6914      	ldr	r4, [r2, #16]
 8002138:	6950      	ldr	r0, [r2, #20]
 800213a:	ea47 0101 	orr.w	r1, r7, r1
 800213e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 8002142:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8002146:	f44f 7282 	mov.w	r2, #260	; 0x104
 800214a:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 800214e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8002152:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8002156:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800215a:	e7e4      	b.n	8002126 <FSMC_NORSRAMInit+0xb2>

0800215c <FSMC_NORSRAMStructInit>:
 800215c:	b470      	push	{r4, r5, r6}
 800215e:	2602      	movs	r6, #2
 8002160:	6046      	str	r6, [r0, #4]
 8002162:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002164:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002166:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800216a:	6246      	str	r6, [r0, #36]	; 0x24
 800216c:	2300      	movs	r3, #0
 800216e:	220f      	movs	r2, #15
 8002170:	25ff      	movs	r5, #255	; 0xff
 8002172:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8002176:	6003      	str	r3, [r0, #0]
 8002178:	6083      	str	r3, [r0, #8]
 800217a:	60c3      	str	r3, [r0, #12]
 800217c:	6103      	str	r3, [r0, #16]
 800217e:	6143      	str	r3, [r0, #20]
 8002180:	6183      	str	r3, [r0, #24]
 8002182:	61c3      	str	r3, [r0, #28]
 8002184:	6203      	str	r3, [r0, #32]
 8002186:	6286      	str	r6, [r0, #40]	; 0x28
 8002188:	62c3      	str	r3, [r0, #44]	; 0x2c
 800218a:	6303      	str	r3, [r0, #48]	; 0x30
 800218c:	6022      	str	r2, [r4, #0]
 800218e:	6062      	str	r2, [r4, #4]
 8002190:	60a5      	str	r5, [r4, #8]
 8002192:	60e2      	str	r2, [r4, #12]
 8002194:	6122      	str	r2, [r4, #16]
 8002196:	6162      	str	r2, [r4, #20]
 8002198:	61a3      	str	r3, [r4, #24]
 800219a:	600a      	str	r2, [r1, #0]
 800219c:	604a      	str	r2, [r1, #4]
 800219e:	608d      	str	r5, [r1, #8]
 80021a0:	60ca      	str	r2, [r1, #12]
 80021a2:	610a      	str	r2, [r1, #16]
 80021a4:	614a      	str	r2, [r1, #20]
 80021a6:	618b      	str	r3, [r1, #24]
 80021a8:	bc70      	pop	{r4, r5, r6}
 80021aa:	4770      	bx	lr

080021ac <FSMC_NORSRAMCmd>:
 80021ac:	b961      	cbnz	r1, 80021c8 <FSMC_NORSRAMCmd+0x1c>
 80021ae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80021b2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80021b6:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 80021ba:	f2c0 030f 	movt	r3, #15
 80021be:	ea01 0303 	and.w	r3, r1, r3
 80021c2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80021c6:	4770      	bx	lr
 80021c8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80021cc:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80021d0:	f042 0201 	orr.w	r2, r2, #1
 80021d4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop

080021dc <FSMC_NANDDeInit>:
 80021dc:	2810      	cmp	r0, #16
 80021de:	d00b      	beq.n	80021f8 <FSMC_NANDDeInit+0x1c>
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80021e6:	2118      	movs	r1, #24
 80021e8:	6019      	str	r1, [r3, #0]
 80021ea:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80021ee:	2140      	movs	r1, #64	; 0x40
 80021f0:	6059      	str	r1, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	4770      	bx	lr
 80021f8:	2360      	movs	r3, #96	; 0x60
 80021fa:	e7f2      	b.n	80021e2 <FSMC_NANDDeInit+0x6>

080021fc <FSMC_NANDInit>:
 80021fc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002200:	6a03      	ldr	r3, [r0, #32]
 8002202:	6941      	ldr	r1, [r0, #20]
 8002204:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8002208:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800220c:	689f      	ldr	r7, [r3, #8]
 800220e:	685c      	ldr	r4, [r3, #4]
 8002210:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8002214:	69c2      	ldr	r2, [r0, #28]
 8002216:	6906      	ldr	r6, [r0, #16]
 8002218:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800221c:	6855      	ldr	r5, [r2, #4]
 800221e:	f8d2 b000 	ldr.w	fp, [r2]
 8002222:	68d2      	ldr	r2, [r2, #12]
 8002224:	b084      	sub	sp, #16
 8002226:	ea4a 0909 	orr.w	r9, sl, r9
 800222a:	9101      	str	r1, [sp, #4]
 800222c:	6819      	ldr	r1, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	9103      	str	r1, [sp, #12]
 8002232:	043f      	lsls	r7, r7, #16
 8002234:	f049 0908 	orr.w	r9, r9, #8
 8002238:	6981      	ldr	r1, [r0, #24]
 800223a:	6800      	ldr	r0, [r0, #0]
 800223c:	9102      	str	r1, [sp, #8]
 800223e:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
 8002242:	ea49 0808 	orr.w	r8, r9, r8
 8002246:	9c01      	ldr	r4, [sp, #4]
 8002248:	ea48 0806 	orr.w	r8, r8, r6
 800224c:	ea48 2144 	orr.w	r1, r8, r4, lsl #9
 8002250:	9c03      	ldr	r4, [sp, #12]
 8002252:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8002256:	4327      	orrs	r7, r4
 8002258:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
 800225c:	9c02      	ldr	r4, [sp, #8]
 800225e:	ea4c 0b0b 	orr.w	fp, ip, fp
 8002262:	2810      	cmp	r0, #16
 8002264:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
 8002268:	ea4b 6202 	orr.w	r2, fp, r2, lsl #24
 800226c:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
 8002270:	d009      	beq.n	8002286 <FSMC_NANDInit+0x8a>
 8002272:	2080      	movs	r0, #128	; 0x80
 8002274:	f2ca 0000 	movt	r0, #40960	; 0xa000
 8002278:	6001      	str	r1, [r0, #0]
 800227a:	6082      	str	r2, [r0, #8]
 800227c:	60c7      	str	r7, [r0, #12]
 800227e:	b004      	add	sp, #16
 8002280:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002284:	4770      	bx	lr
 8002286:	2360      	movs	r3, #96	; 0x60
 8002288:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800228c:	6019      	str	r1, [r3, #0]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60df      	str	r7, [r3, #12]
 8002292:	e7f4      	b.n	800227e <FSMC_NANDInit+0x82>

08002294 <FSMC_NANDStructInit>:
 8002294:	b430      	push	{r4, r5}
 8002296:	6a01      	ldr	r1, [r0, #32]
 8002298:	69c4      	ldr	r4, [r0, #28]
 800229a:	23fc      	movs	r3, #252	; 0xfc
 800229c:	2200      	movs	r2, #0
 800229e:	2510      	movs	r5, #16
 80022a0:	6005      	str	r5, [r0, #0]
 80022a2:	6042      	str	r2, [r0, #4]
 80022a4:	6082      	str	r2, [r0, #8]
 80022a6:	60c2      	str	r2, [r0, #12]
 80022a8:	6102      	str	r2, [r0, #16]
 80022aa:	6142      	str	r2, [r0, #20]
 80022ac:	6182      	str	r2, [r0, #24]
 80022ae:	6023      	str	r3, [r4, #0]
 80022b0:	6063      	str	r3, [r4, #4]
 80022b2:	60a3      	str	r3, [r4, #8]
 80022b4:	60e3      	str	r3, [r4, #12]
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	604b      	str	r3, [r1, #4]
 80022ba:	608b      	str	r3, [r1, #8]
 80022bc:	60cb      	str	r3, [r1, #12]
 80022be:	bc30      	pop	{r4, r5}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop

080022c4 <FSMC_NANDCmd>:
 80022c4:	b149      	cbz	r1, 80022da <FSMC_NANDCmd+0x16>
 80022c6:	2810      	cmp	r0, #16
 80022c8:	d015      	beq.n	80022f6 <FSMC_NANDCmd+0x32>
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	f042 0204 	orr.w	r2, r2, #4
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	4770      	bx	lr
 80022da:	2810      	cmp	r0, #16
 80022dc:	d013      	beq.n	8002306 <FSMC_NANDCmd+0x42>
 80022de:	2280      	movs	r2, #128	; 0x80
 80022e0:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80022e4:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80022e8:	6811      	ldr	r1, [r2, #0]
 80022ea:	f2c0 030f 	movt	r3, #15
 80022ee:	ea01 0303 	and.w	r3, r1, r3
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4770      	bx	lr
 80022f6:	2360      	movs	r3, #96	; 0x60
 80022f8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f042 0204 	orr.w	r2, r2, #4
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	4770      	bx	lr
 8002306:	2260      	movs	r2, #96	; 0x60
 8002308:	e7ea      	b.n	80022e0 <FSMC_NANDCmd+0x1c>
 800230a:	bf00      	nop

0800230c <FSMC_NANDECCCmd>:
 800230c:	b149      	cbz	r1, 8002322 <FSMC_NANDECCCmd+0x16>
 800230e:	2810      	cmp	r0, #16
 8002310:	d015      	beq.n	800233e <FSMC_NANDECCCmd+0x32>
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	4770      	bx	lr
 8002322:	2810      	cmp	r0, #16
 8002324:	d013      	beq.n	800234e <FSMC_NANDECCCmd+0x42>
 8002326:	2280      	movs	r2, #128	; 0x80
 8002328:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800232c:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8002330:	6811      	ldr	r1, [r2, #0]
 8002332:	f2c0 030f 	movt	r3, #15
 8002336:	ea01 0303 	and.w	r3, r1, r3
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4770      	bx	lr
 800233e:	2360      	movs	r3, #96	; 0x60
 8002340:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	4770      	bx	lr
 800234e:	2260      	movs	r2, #96	; 0x60
 8002350:	e7ea      	b.n	8002328 <FSMC_NANDECCCmd+0x1c>
 8002352:	bf00      	nop

08002354 <FSMC_GetECC>:
 8002354:	2810      	cmp	r0, #16
 8002356:	d004      	beq.n	8002362 <FSMC_GetECC+0xe>
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800235e:	6958      	ldr	r0, [r3, #20]
 8002360:	4770      	bx	lr
 8002362:	2360      	movs	r3, #96	; 0x60
 8002364:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002368:	6958      	ldr	r0, [r3, #20]
 800236a:	4770      	bx	lr

0800236c <FSMC_PCCARDDeInit>:
 800236c:	23a0      	movs	r3, #160	; 0xa0
 800236e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002372:	2118      	movs	r1, #24
 8002374:	6019      	str	r1, [r3, #0]
 8002376:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800237a:	2100      	movs	r1, #0
 800237c:	6059      	str	r1, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop

08002388 <FSMC_PCCARDInit>:
 8002388:	b4f0      	push	{r4, r5, r6, r7}
 800238a:	6807      	ldr	r7, [r0, #0]
 800238c:	6846      	ldr	r6, [r0, #4]
 800238e:	6901      	ldr	r1, [r0, #16]
 8002390:	6942      	ldr	r2, [r0, #20]
 8002392:	68c4      	ldr	r4, [r0, #12]
 8002394:	6885      	ldr	r5, [r0, #8]
 8002396:	23a0      	movs	r3, #160	; 0xa0
 8002398:	f047 0010 	orr.w	r0, r7, #16
 800239c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80023a0:	ea40 2046 	orr.w	r0, r0, r6, lsl #9
 80023a4:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 80023a8:	6018      	str	r0, [r3, #0]
 80023aa:	68a0      	ldr	r0, [r4, #8]
 80023ac:	6866      	ldr	r6, [r4, #4]
 80023ae:	6825      	ldr	r5, [r4, #0]
 80023b0:	68e4      	ldr	r4, [r4, #12]
 80023b2:	0400      	lsls	r0, r0, #16
 80023b4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 80023b8:	4328      	orrs	r0, r5
 80023ba:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80023be:	6098      	str	r0, [r3, #8]
 80023c0:	688e      	ldr	r6, [r1, #8]
 80023c2:	684d      	ldr	r5, [r1, #4]
 80023c4:	680c      	ldr	r4, [r1, #0]
 80023c6:	68c8      	ldr	r0, [r1, #12]
 80023c8:	0431      	lsls	r1, r6, #16
 80023ca:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80023ce:	4321      	orrs	r1, r4
 80023d0:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 80023d4:	60d9      	str	r1, [r3, #12]
 80023d6:	6895      	ldr	r5, [r2, #8]
 80023d8:	6854      	ldr	r4, [r2, #4]
 80023da:	6810      	ldr	r0, [r2, #0]
 80023dc:	68d1      	ldr	r1, [r2, #12]
 80023de:	042a      	lsls	r2, r5, #16
 80023e0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80023e4:	4302      	orrs	r2, r0
 80023e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	bcf0      	pop	{r4, r5, r6, r7}
 80023ee:	4770      	bx	lr

080023f0 <FSMC_PCCARDStructInit>:
 80023f0:	b430      	push	{r4, r5}
 80023f2:	6901      	ldr	r1, [r0, #16]
 80023f4:	68c4      	ldr	r4, [r0, #12]
 80023f6:	6942      	ldr	r2, [r0, #20]
 80023f8:	23fc      	movs	r3, #252	; 0xfc
 80023fa:	2500      	movs	r5, #0
 80023fc:	6005      	str	r5, [r0, #0]
 80023fe:	6045      	str	r5, [r0, #4]
 8002400:	6085      	str	r5, [r0, #8]
 8002402:	6023      	str	r3, [r4, #0]
 8002404:	6063      	str	r3, [r4, #4]
 8002406:	60a3      	str	r3, [r4, #8]
 8002408:	60e3      	str	r3, [r4, #12]
 800240a:	600b      	str	r3, [r1, #0]
 800240c:	604b      	str	r3, [r1, #4]
 800240e:	608b      	str	r3, [r1, #8]
 8002410:	60cb      	str	r3, [r1, #12]
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	6053      	str	r3, [r2, #4]
 8002416:	6093      	str	r3, [r2, #8]
 8002418:	60d3      	str	r3, [r2, #12]
 800241a:	bc30      	pop	{r4, r5}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop

08002420 <FSMC_PCCARDCmd>:
 8002420:	b958      	cbnz	r0, 800243a <FSMC_PCCARDCmd+0x1a>
 8002422:	22a0      	movs	r2, #160	; 0xa0
 8002424:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8002428:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800242c:	6811      	ldr	r1, [r2, #0]
 800242e:	f2c0 030f 	movt	r3, #15
 8002432:	ea01 0303 	and.w	r3, r1, r3
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4770      	bx	lr
 800243a:	23a0      	movs	r3, #160	; 0xa0
 800243c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	f042 0204 	orr.w	r2, r2, #4
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop

0800244c <FSMC_ITConfig>:
 800244c:	b15a      	cbz	r2, 8002466 <FSMC_ITConfig+0x1a>
 800244e:	2810      	cmp	r0, #16
 8002450:	d01e      	beq.n	8002490 <FSMC_ITConfig+0x44>
 8002452:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002456:	d022      	beq.n	800249e <FSMC_ITConfig+0x52>
 8002458:	23a0      	movs	r3, #160	; 0xa0
 800245a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4311      	orrs	r1, r2
 8002462:	6059      	str	r1, [r3, #4]
 8002464:	4770      	bx	lr
 8002466:	2810      	cmp	r0, #16
 8002468:	d00a      	beq.n	8002480 <FSMC_ITConfig+0x34>
 800246a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800246e:	d01d      	beq.n	80024ac <FSMC_ITConfig+0x60>
 8002470:	23a0      	movs	r3, #160	; 0xa0
 8002472:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	ea22 0101 	bic.w	r1, r2, r1
 800247c:	6059      	str	r1, [r3, #4]
 800247e:	4770      	bx	lr
 8002480:	2360      	movs	r3, #96	; 0x60
 8002482:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	ea22 0101 	bic.w	r1, r2, r1
 800248c:	6059      	str	r1, [r3, #4]
 800248e:	4770      	bx	lr
 8002490:	2360      	movs	r3, #96	; 0x60
 8002492:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	4311      	orrs	r1, r2
 800249a:	6059      	str	r1, [r3, #4]
 800249c:	4770      	bx	lr
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4311      	orrs	r1, r2
 80024a8:	6059      	str	r1, [r3, #4]
 80024aa:	4770      	bx	lr
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	ea22 0101 	bic.w	r1, r2, r1
 80024b8:	6059      	str	r1, [r3, #4]
 80024ba:	4770      	bx	lr

080024bc <FSMC_GetFlagStatus>:
 80024bc:	2810      	cmp	r0, #16
 80024be:	d00b      	beq.n	80024d8 <FSMC_GetFlagStatus+0x1c>
 80024c0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80024c4:	d011      	beq.n	80024ea <FSMC_GetFlagStatus+0x2e>
 80024c6:	23a0      	movs	r3, #160	; 0xa0
 80024c8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	420b      	tst	r3, r1
 80024d0:	bf0c      	ite	eq
 80024d2:	2000      	moveq	r0, #0
 80024d4:	2001      	movne	r0, #1
 80024d6:	4770      	bx	lr
 80024d8:	2360      	movs	r3, #96	; 0x60
 80024da:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	420b      	tst	r3, r1
 80024e2:	bf0c      	ite	eq
 80024e4:	2000      	moveq	r0, #0
 80024e6:	2001      	movne	r0, #1
 80024e8:	4770      	bx	lr
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	420b      	tst	r3, r1
 80024f4:	bf0c      	ite	eq
 80024f6:	2000      	moveq	r0, #0
 80024f8:	2001      	movne	r0, #1
 80024fa:	4770      	bx	lr

080024fc <FSMC_ClearFlag>:
 80024fc:	2810      	cmp	r0, #16
 80024fe:	d00a      	beq.n	8002516 <FSMC_ClearFlag+0x1a>
 8002500:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002504:	d00f      	beq.n	8002526 <FSMC_ClearFlag+0x2a>
 8002506:	23a0      	movs	r3, #160	; 0xa0
 8002508:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	ea22 0101 	bic.w	r1, r2, r1
 8002512:	6059      	str	r1, [r3, #4]
 8002514:	4770      	bx	lr
 8002516:	2360      	movs	r3, #96	; 0x60
 8002518:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	ea22 0101 	bic.w	r1, r2, r1
 8002522:	6059      	str	r1, [r3, #4]
 8002524:	4770      	bx	lr
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	ea22 0101 	bic.w	r1, r2, r1
 8002532:	6059      	str	r1, [r3, #4]
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop

08002538 <FSMC_GetITStatus>:
 8002538:	2810      	cmp	r0, #16
 800253a:	d011      	beq.n	8002560 <FSMC_GetITStatus+0x28>
 800253c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002540:	d013      	beq.n	800256a <FSMC_GetITStatus+0x32>
 8002542:	23a0      	movs	r3, #160	; 0xa0
 8002544:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	ea13 02d1 	ands.w	r2, r3, r1, lsr #3
 800254e:	bf0c      	ite	eq
 8002550:	2000      	moveq	r0, #0
 8002552:	2001      	movne	r0, #1
 8002554:	420b      	tst	r3, r1
 8002556:	bf0c      	ite	eq
 8002558:	2000      	moveq	r0, #0
 800255a:	f000 0001 	andne.w	r0, r0, #1
 800255e:	4770      	bx	lr
 8002560:	2360      	movs	r3, #96	; 0x60
 8002562:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	e7ef      	b.n	800254a <FSMC_GetITStatus+0x12>
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	e7ea      	b.n	800254a <FSMC_GetITStatus+0x12>

08002574 <FSMC_ClearITPendingBit>:
 8002574:	2810      	cmp	r0, #16
 8002576:	d00a      	beq.n	800258e <FSMC_ClearITPendingBit+0x1a>
 8002578:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800257c:	d00f      	beq.n	800259e <FSMC_ClearITPendingBit+0x2a>
 800257e:	23a0      	movs	r3, #160	; 0xa0
 8002580:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 800258a:	6059      	str	r1, [r3, #4]
 800258c:	4770      	bx	lr
 800258e:	2360      	movs	r3, #96	; 0x60
 8002590:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 800259a:	6059      	str	r1, [r3, #4]
 800259c:	4770      	bx	lr
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 80025aa:	6059      	str	r1, [r3, #4]
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop

080025b0 <GPIO_DeInit>:
 80025b0:	2300      	movs	r3, #0
 80025b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025b6:	4298      	cmp	r0, r3
 80025b8:	b510      	push	{r4, lr}
 80025ba:	d03c      	beq.n	8002636 <GPIO_DeInit+0x86>
 80025bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025c4:	4298      	cmp	r0, r3
 80025c6:	d040      	beq.n	800264a <GPIO_DeInit+0x9a>
 80025c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025d0:	4298      	cmp	r0, r3
 80025d2:	d044      	beq.n	800265e <GPIO_DeInit+0xae>
 80025d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025dc:	4298      	cmp	r0, r3
 80025de:	d048      	beq.n	8002672 <GPIO_DeInit+0xc2>
 80025e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025e8:	4298      	cmp	r0, r3
 80025ea:	d04c      	beq.n	8002686 <GPIO_DeInit+0xd6>
 80025ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025f4:	4298      	cmp	r0, r3
 80025f6:	d050      	beq.n	800269a <GPIO_DeInit+0xea>
 80025f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002600:	4298      	cmp	r0, r3
 8002602:	d054      	beq.n	80026ae <GPIO_DeInit+0xfe>
 8002604:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002608:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800260c:	4298      	cmp	r0, r3
 800260e:	d058      	beq.n	80026c2 <GPIO_DeInit+0x112>
 8002610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002614:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002618:	4298      	cmp	r0, r3
 800261a:	d000      	beq.n	800261e <GPIO_DeInit+0x6e>
 800261c:	bd10      	pop	{r4, pc}
 800261e:	2101      	movs	r1, #1
 8002620:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002624:	f000 fabc 	bl	8002ba0 <RCC_AHB1PeriphResetCmd>
 8002628:	f44f 7080 	mov.w	r0, #256	; 0x100
 800262c:	2100      	movs	r1, #0
 800262e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002632:	f000 bab5 	b.w	8002ba0 <RCC_AHB1PeriphResetCmd>
 8002636:	2001      	movs	r0, #1
 8002638:	4601      	mov	r1, r0
 800263a:	f000 fab1 	bl	8002ba0 <RCC_AHB1PeriphResetCmd>
 800263e:	2001      	movs	r0, #1
 8002640:	2100      	movs	r1, #0
 8002642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002646:	f000 baab 	b.w	8002ba0 <RCC_AHB1PeriphResetCmd>
 800264a:	2002      	movs	r0, #2
 800264c:	2101      	movs	r1, #1
 800264e:	f000 faa7 	bl	8002ba0 <RCC_AHB1PeriphResetCmd>
 8002652:	2002      	movs	r0, #2
 8002654:	2100      	movs	r1, #0
 8002656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800265a:	f000 baa1 	b.w	8002ba0 <RCC_AHB1PeriphResetCmd>
 800265e:	2004      	movs	r0, #4
 8002660:	2101      	movs	r1, #1
 8002662:	f000 fa9d 	bl	8002ba0 <RCC_AHB1PeriphResetCmd>
 8002666:	2004      	movs	r0, #4
 8002668:	2100      	movs	r1, #0
 800266a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800266e:	f000 ba97 	b.w	8002ba0 <RCC_AHB1PeriphResetCmd>
 8002672:	2008      	movs	r0, #8
 8002674:	2101      	movs	r1, #1
 8002676:	f000 fa93 	bl	8002ba0 <RCC_AHB1PeriphResetCmd>
 800267a:	2008      	movs	r0, #8
 800267c:	2100      	movs	r1, #0
 800267e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002682:	f000 ba8d 	b.w	8002ba0 <RCC_AHB1PeriphResetCmd>
 8002686:	2010      	movs	r0, #16
 8002688:	2101      	movs	r1, #1
 800268a:	f000 fa89 	bl	8002ba0 <RCC_AHB1PeriphResetCmd>
 800268e:	2010      	movs	r0, #16
 8002690:	2100      	movs	r1, #0
 8002692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002696:	f000 ba83 	b.w	8002ba0 <RCC_AHB1PeriphResetCmd>
 800269a:	2020      	movs	r0, #32
 800269c:	2101      	movs	r1, #1
 800269e:	f000 fa7f 	bl	8002ba0 <RCC_AHB1PeriphResetCmd>
 80026a2:	2020      	movs	r0, #32
 80026a4:	2100      	movs	r1, #0
 80026a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026aa:	f000 ba79 	b.w	8002ba0 <RCC_AHB1PeriphResetCmd>
 80026ae:	2040      	movs	r0, #64	; 0x40
 80026b0:	2101      	movs	r1, #1
 80026b2:	f000 fa75 	bl	8002ba0 <RCC_AHB1PeriphResetCmd>
 80026b6:	2040      	movs	r0, #64	; 0x40
 80026b8:	2100      	movs	r1, #0
 80026ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026be:	f000 ba6f 	b.w	8002ba0 <RCC_AHB1PeriphResetCmd>
 80026c2:	2080      	movs	r0, #128	; 0x80
 80026c4:	2101      	movs	r1, #1
 80026c6:	f000 fa6b 	bl	8002ba0 <RCC_AHB1PeriphResetCmd>
 80026ca:	2080      	movs	r0, #128	; 0x80
 80026cc:	2100      	movs	r1, #0
 80026ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026d2:	f000 ba65 	b.w	8002ba0 <RCC_AHB1PeriphResetCmd>
 80026d6:	bf00      	nop

080026d8 <GPIO_Init>:
 80026d8:	2300      	movs	r3, #0
 80026da:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80026de:	680a      	ldr	r2, [r1, #0]
 80026e0:	461c      	mov	r4, r3
 80026e2:	2701      	movs	r7, #1
 80026e4:	f04f 0803 	mov.w	r8, #3
 80026e8:	e003      	b.n	80026f2 <GPIO_Init+0x1a>
 80026ea:	3401      	adds	r4, #1
 80026ec:	3302      	adds	r3, #2
 80026ee:	2c10      	cmp	r4, #16
 80026f0:	d02d      	beq.n	800274e <GPIO_Init+0x76>
 80026f2:	fa17 f504 	lsls.w	r5, r7, r4
 80026f6:	ea05 0602 	and.w	r6, r5, r2
 80026fa:	42ae      	cmp	r6, r5
 80026fc:	d1f5      	bne.n	80026ea <GPIO_Init+0x12>
 80026fe:	f8d0 9000 	ldr.w	r9, [r0]
 8002702:	f891 c004 	ldrb.w	ip, [r1, #4]
 8002706:	fa08 f503 	lsl.w	r5, r8, r3
 800270a:	43ed      	mvns	r5, r5
 800270c:	ea05 0909 	and.w	r9, r5, r9
 8002710:	f8c0 9000 	str.w	r9, [r0]
 8002714:	f8d0 9000 	ldr.w	r9, [r0]
 8002718:	fa0c fa03 	lsl.w	sl, ip, r3
 800271c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002720:	fa5f fc8c 	uxtb.w	ip, ip
 8002724:	ea4a 0909 	orr.w	r9, sl, r9
 8002728:	f1bc 0f01 	cmp.w	ip, #1
 800272c:	f8c0 9000 	str.w	r9, [r0]
 8002730:	d910      	bls.n	8002754 <GPIO_Init+0x7c>
 8002732:	68c6      	ldr	r6, [r0, #12]
 8002734:	f891 c007 	ldrb.w	ip, [r1, #7]
 8002738:	4035      	ands	r5, r6
 800273a:	60c5      	str	r5, [r0, #12]
 800273c:	68c6      	ldr	r6, [r0, #12]
 800273e:	fa0c f503 	lsl.w	r5, ip, r3
 8002742:	3401      	adds	r4, #1
 8002744:	4335      	orrs	r5, r6
 8002746:	3302      	adds	r3, #2
 8002748:	2c10      	cmp	r4, #16
 800274a:	60c5      	str	r5, [r0, #12]
 800274c:	d1d1      	bne.n	80026f2 <GPIO_Init+0x1a>
 800274e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8002752:	4770      	bx	lr
 8002754:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002758:	f891 9005 	ldrb.w	r9, [r1, #5]
 800275c:	f891 c006 	ldrb.w	ip, [r1, #6]
 8002760:	ea05 0a0a 	and.w	sl, r5, sl
 8002764:	f8c0 a008 	str.w	sl, [r0, #8]
 8002768:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800276c:	fa09 f903 	lsl.w	r9, r9, r3
 8002770:	ea49 090a 	orr.w	r9, r9, sl
 8002774:	f8c0 9008 	str.w	r9, [r0, #8]
 8002778:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800277c:	ea29 0606 	bic.w	r6, r9, r6
 8002780:	6046      	str	r6, [r0, #4]
 8002782:	6846      	ldr	r6, [r0, #4]
 8002784:	fa0c fc04 	lsl.w	ip, ip, r4
 8002788:	fa1f fc8c 	uxth.w	ip, ip
 800278c:	ea4c 0606 	orr.w	r6, ip, r6
 8002790:	6046      	str	r6, [r0, #4]
 8002792:	e7ce      	b.n	8002732 <GPIO_Init+0x5a>

08002794 <GPIO_StructInit>:
 8002794:	2300      	movs	r3, #0
 8002796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800279a:	6002      	str	r2, [r0, #0]
 800279c:	7103      	strb	r3, [r0, #4]
 800279e:	7143      	strb	r3, [r0, #5]
 80027a0:	7183      	strb	r3, [r0, #6]
 80027a2:	71c3      	strb	r3, [r0, #7]
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop

080027a8 <GPIO_PinLockConfig>:
 80027a8:	b082      	sub	sp, #8
 80027aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	9b01      	ldr	r3, [sp, #4]
 80027b2:	ea41 0303 	orr.w	r3, r1, r3
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	9b01      	ldr	r3, [sp, #4]
 80027ba:	61c3      	str	r3, [r0, #28]
 80027bc:	61c1      	str	r1, [r0, #28]
 80027be:	9b01      	ldr	r3, [sp, #4]
 80027c0:	61c3      	str	r3, [r0, #28]
 80027c2:	69c3      	ldr	r3, [r0, #28]
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	69c3      	ldr	r3, [r0, #28]
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	b002      	add	sp, #8
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop

080027d0 <GPIO_ReadInputDataBit>:
 80027d0:	6903      	ldr	r3, [r0, #16]
 80027d2:	4219      	tst	r1, r3
 80027d4:	bf0c      	ite	eq
 80027d6:	2000      	moveq	r0, #0
 80027d8:	2001      	movne	r0, #1
 80027da:	4770      	bx	lr

080027dc <GPIO_ReadInputData>:
 80027dc:	6900      	ldr	r0, [r0, #16]
 80027de:	b280      	uxth	r0, r0
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop

080027e4 <GPIO_ReadOutputDataBit>:
 80027e4:	6943      	ldr	r3, [r0, #20]
 80027e6:	4219      	tst	r1, r3
 80027e8:	bf0c      	ite	eq
 80027ea:	2000      	moveq	r0, #0
 80027ec:	2001      	movne	r0, #1
 80027ee:	4770      	bx	lr

080027f0 <GPIO_ReadOutputData>:
 80027f0:	6940      	ldr	r0, [r0, #20]
 80027f2:	b280      	uxth	r0, r0
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop

080027f8 <GPIO_SetBits>:
 80027f8:	8301      	strh	r1, [r0, #24]
 80027fa:	4770      	bx	lr

080027fc <GPIO_ResetBits>:
 80027fc:	8341      	strh	r1, [r0, #26]
 80027fe:	4770      	bx	lr

08002800 <GPIO_WriteBit>:
 8002800:	b90a      	cbnz	r2, 8002806 <GPIO_WriteBit+0x6>
 8002802:	8341      	strh	r1, [r0, #26]
 8002804:	4770      	bx	lr
 8002806:	8301      	strh	r1, [r0, #24]
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop

0800280c <GPIO_Write>:
 800280c:	6141      	str	r1, [r0, #20]
 800280e:	4770      	bx	lr

08002810 <GPIO_ToggleBits>:
 8002810:	6943      	ldr	r3, [r0, #20]
 8002812:	ea81 0303 	eor.w	r3, r1, r3
 8002816:	6143      	str	r3, [r0, #20]
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop

0800281c <GPIO_PinAFConfig>:
 800281c:	08cb      	lsrs	r3, r1, #3
 800281e:	3308      	adds	r3, #8
 8002820:	f001 0107 	and.w	r1, r1, #7
 8002824:	b430      	push	{r4, r5}
 8002826:	0089      	lsls	r1, r1, #2
 8002828:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800282c:	240f      	movs	r4, #15
 800282e:	408c      	lsls	r4, r1
 8002830:	ea25 0404 	bic.w	r4, r5, r4
 8002834:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8002838:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800283c:	fa12 f101 	lsls.w	r1, r2, r1
 8002840:	ea41 0404 	orr.w	r4, r1, r4
 8002844:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8002848:	bc30      	pop	{r4, r5}
 800284a:	4770      	bx	lr

0800284c <RCC_DeInit>:
 800284c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002850:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002854:	2200      	movs	r2, #0
 8002856:	6819      	ldr	r1, [r3, #0]
 8002858:	f041 0101 	orr.w	r1, r1, #1
 800285c:	6019      	str	r1, [r3, #0]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	f243 0110 	movw	r1, #12304	; 0x3010
 8002866:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000
 800286a:	f2c2 4100 	movt	r1, #9216	; 0x2400
 800286e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8002872:	6018      	str	r0, [r3, #0]
 8002874:	6059      	str	r1, [r3, #4]
 8002876:	6819      	ldr	r1, [r3, #0]
 8002878:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800287c:	6019      	str	r1, [r3, #0]
 800287e:	60da      	str	r2, [r3, #12]
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <RCC_HSEConfig>:
 8002884:	f643 0302 	movw	r3, #14338	; 0x3802
 8002888:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	7018      	strb	r0, [r3, #0]
 8002892:	4770      	bx	lr

08002894 <RCC_AdjustHSICalibrationValue>:
 8002894:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002898:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80028a2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop

080028ac <RCC_HSICmd>:
 80028ac:	2300      	movs	r3, #0
 80028ae:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80028b2:	6018      	str	r0, [r3, #0]
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop

080028b8 <RCC_LSEConfig>:
 80028b8:	f643 0370 	movw	r3, #14448	; 0x3870
 80028bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028c0:	2200      	movs	r2, #0
 80028c2:	2801      	cmp	r0, #1
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	d004      	beq.n	80028d4 <RCC_LSEConfig+0x1c>
 80028ca:	2804      	cmp	r0, #4
 80028cc:	d101      	bne.n	80028d2 <RCC_LSEConfig+0x1a>
 80028ce:	2205      	movs	r2, #5
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	4770      	bx	lr
 80028d4:	7018      	strb	r0, [r3, #0]
 80028d6:	4770      	bx	lr

080028d8 <RCC_LSICmd>:
 80028d8:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 80028dc:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80028e0:	6018      	str	r0, [r3, #0]
 80028e2:	4770      	bx	lr

080028e4 <RCC_PLLConfig>:
 80028e4:	4301      	orrs	r1, r0
 80028e6:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80028ea:	9900      	ldr	r1, [sp, #0]
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80028f2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80028fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002900:	6042      	str	r2, [r0, #4]
 8002902:	4770      	bx	lr

08002904 <RCC_PLLCmd>:
 8002904:	2360      	movs	r3, #96	; 0x60
 8002906:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800290a:	6018      	str	r0, [r3, #0]
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop

08002910 <RCC_PLLI2SConfig>:
 8002910:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002914:	0180      	lsls	r0, r0, #6
 8002916:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800291a:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 800291e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 8002922:	4770      	bx	lr

08002924 <RCC_PLLI2SCmd>:
 8002924:	2368      	movs	r3, #104	; 0x68
 8002926:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800292a:	6018      	str	r0, [r3, #0]
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop

08002930 <RCC_ClockSecuritySystemCmd>:
 8002930:	234c      	movs	r3, #76	; 0x4c
 8002932:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8002936:	6018      	str	r0, [r3, #0]
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop

0800293c <RCC_MCO1Config>:
 800293c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002940:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000
 800294a:	ea40 0202 	orr.w	r2, r0, r2
 800294e:	430a      	orrs	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	4770      	bx	lr

08002954 <RCC_MCO2Config>:
 8002954:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002958:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8002962:	ea40 0202 	orr.w	r2, r0, r2
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	4770      	bx	lr

0800296c <RCC_SYSCLKConfig>:
 800296c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002970:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	f022 0203 	bic.w	r2, r2, #3
 800297a:	ea40 0202 	orr.w	r2, r0, r2
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop

08002984 <RCC_GetSYSCLKSource>:
 8002984:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002988:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800298c:	6898      	ldr	r0, [r3, #8]
 800298e:	f000 000c 	and.w	r0, r0, #12
 8002992:	4770      	bx	lr

08002994 <RCC_HCLKConfig>:
 8002994:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002998:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029a2:	ea40 0202 	orr.w	r2, r0, r2
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop

080029ac <RCC_PCLK1Config>:
 80029ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80029b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80029ba:	ea40 0202 	orr.w	r2, r0, r2
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop

080029c4 <RCC_PCLK2Config>:
 80029c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80029c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029d2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop

080029dc <RCC_GetClocksFreq>:
 80029dc:	b410      	push	{r4}
 80029de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80029e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	f002 020c 	and.w	r2, r2, #12
 80029ec:	2a04      	cmp	r2, #4
 80029ee:	bf02      	ittt	eq
 80029f0:	f647 0140 	movweq	r1, #30784	; 0x7840
 80029f4:	f2c0 117d 	movteq	r1, #381	; 0x17d
 80029f8:	6001      	streq	r1, [r0, #0]
 80029fa:	d006      	beq.n	8002a0a <RCC_GetClocksFreq+0x2e>
 80029fc:	2a08      	cmp	r2, #8
 80029fe:	d021      	beq.n	8002a44 <RCC_GetClocksFreq+0x68>
 8002a00:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8002a04:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8002a08:	6001      	str	r1, [r0, #0]
 8002a0a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a12:	f240 0328 	movw	r3, #40	; 0x28
 8002a16:	6894      	ldr	r4, [r2, #8]
 8002a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a1c:	f3c4 1403 	ubfx	r4, r4, #4, #4
 8002a20:	5d1c      	ldrb	r4, [r3, r4]
 8002a22:	40e1      	lsrs	r1, r4
 8002a24:	6041      	str	r1, [r0, #4]
 8002a26:	6894      	ldr	r4, [r2, #8]
 8002a28:	f3c4 2482 	ubfx	r4, r4, #10, #3
 8002a2c:	5d1c      	ldrb	r4, [r3, r4]
 8002a2e:	fa31 f404 	lsrs.w	r4, r1, r4
 8002a32:	6084      	str	r4, [r0, #8]
 8002a34:	6892      	ldr	r2, [r2, #8]
 8002a36:	f3c2 3242 	ubfx	r2, r2, #13, #3
 8002a3a:	5c9b      	ldrb	r3, [r3, r2]
 8002a3c:	40d9      	lsrs	r1, r3
 8002a3e:	60c1      	str	r1, [r0, #12]
 8002a40:	bc10      	pop	{r4}
 8002a42:	4770      	bx	lr
 8002a44:	685c      	ldr	r4, [r3, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8002a4c:	685c      	ldr	r4, [r3, #4]
 8002a4e:	bf15      	itete	ne
 8002a50:	f647 0340 	movwne	r3, #30784	; 0x7840
 8002a54:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
 8002a58:	f2c0 137d 	movtne	r3, #381	; 0x17d
 8002a5c:	f2c0 03f4 	movteq	r3, #244	; 0xf4
 8002a60:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002a64:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a70:	f3c4 1488 	ubfx	r4, r4, #6, #9
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	fb01 f104 	mul.w	r1, r1, r4
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fbb1 f1f3 	udiv	r1, r1, r3
 8002a86:	6001      	str	r1, [r0, #0]
 8002a88:	e7bf      	b.n	8002a0a <RCC_GetClocksFreq+0x2e>
 8002a8a:	bf00      	nop

08002a8c <RCC_RTCCLKConfig>:
 8002a8c:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8002a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a94:	d10d      	bne.n	8002ab2 <RCC_RTCCLKConfig+0x26>
 8002a96:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a9e:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002aa8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002aac:	ea41 0202 	orr.w	r2, r1, r2
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ab6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002aba:	0500      	lsls	r0, r0, #20
 8002abc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002abe:	0d00      	lsrs	r0, r0, #20
 8002ac0:	4310      	orrs	r0, r2
 8002ac2:	6718      	str	r0, [r3, #112]	; 0x70
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop

08002ac8 <RCC_RTCCLKCmd>:
 8002ac8:	f640 633c 	movw	r3, #3644	; 0xe3c
 8002acc:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8002ad0:	6018      	str	r0, [r3, #0]
 8002ad2:	4770      	bx	lr

08002ad4 <RCC_BackupResetCmd>:
 8002ad4:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8002ad8:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8002adc:	6018      	str	r0, [r3, #0]
 8002ade:	4770      	bx	lr

08002ae0 <RCC_I2SCLKConfig>:
 8002ae0:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8002ae4:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8002ae8:	6018      	str	r0, [r3, #0]
 8002aea:	4770      	bx	lr

08002aec <RCC_AHB1PeriphClockCmd>:
 8002aec:	b941      	cbnz	r1, 8002b00 <RCC_AHB1PeriphClockCmd+0x14>
 8002aee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002af2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002af8:	ea22 0000 	bic.w	r0, r2, r0
 8002afc:	6318      	str	r0, [r3, #48]	; 0x30
 8002afe:	4770      	bx	lr
 8002b00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b0a:	4310      	orrs	r0, r2
 8002b0c:	6318      	str	r0, [r3, #48]	; 0x30
 8002b0e:	4770      	bx	lr

08002b10 <RCC_AHB2PeriphClockCmd>:
 8002b10:	b941      	cbnz	r1, 8002b24 <RCC_AHB2PeriphClockCmd+0x14>
 8002b12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b1c:	ea22 0000 	bic.w	r0, r2, r0
 8002b20:	6358      	str	r0, [r3, #52]	; 0x34
 8002b22:	4770      	bx	lr
 8002b24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b2e:	4310      	orrs	r0, r2
 8002b30:	6358      	str	r0, [r3, #52]	; 0x34
 8002b32:	4770      	bx	lr

08002b34 <RCC_AHB3PeriphClockCmd>:
 8002b34:	b941      	cbnz	r1, 8002b48 <RCC_AHB3PeriphClockCmd+0x14>
 8002b36:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b40:	ea22 0000 	bic.w	r0, r2, r0
 8002b44:	6398      	str	r0, [r3, #56]	; 0x38
 8002b46:	4770      	bx	lr
 8002b48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b52:	4310      	orrs	r0, r2
 8002b54:	6398      	str	r0, [r3, #56]	; 0x38
 8002b56:	4770      	bx	lr

08002b58 <RCC_APB1PeriphClockCmd>:
 8002b58:	b941      	cbnz	r1, 8002b6c <RCC_APB1PeriphClockCmd+0x14>
 8002b5a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b64:	ea22 0000 	bic.w	r0, r2, r0
 8002b68:	6418      	str	r0, [r3, #64]	; 0x40
 8002b6a:	4770      	bx	lr
 8002b6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b76:	4310      	orrs	r0, r2
 8002b78:	6418      	str	r0, [r3, #64]	; 0x40
 8002b7a:	4770      	bx	lr

08002b7c <RCC_APB2PeriphClockCmd>:
 8002b7c:	b941      	cbnz	r1, 8002b90 <RCC_APB2PeriphClockCmd+0x14>
 8002b7e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b88:	ea22 0000 	bic.w	r0, r2, r0
 8002b8c:	6458      	str	r0, [r3, #68]	; 0x44
 8002b8e:	4770      	bx	lr
 8002b90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b9a:	4310      	orrs	r0, r2
 8002b9c:	6458      	str	r0, [r3, #68]	; 0x44
 8002b9e:	4770      	bx	lr

08002ba0 <RCC_AHB1PeriphResetCmd>:
 8002ba0:	b941      	cbnz	r1, 8002bb4 <RCC_AHB1PeriphResetCmd+0x14>
 8002ba2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ba6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	ea22 0000 	bic.w	r0, r2, r0
 8002bb0:	6118      	str	r0, [r3, #16]
 8002bb2:	4770      	bx	lr
 8002bb4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002bb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	4310      	orrs	r0, r2
 8002bc0:	6118      	str	r0, [r3, #16]
 8002bc2:	4770      	bx	lr

08002bc4 <RCC_AHB2PeriphResetCmd>:
 8002bc4:	b941      	cbnz	r1, 8002bd8 <RCC_AHB2PeriphResetCmd+0x14>
 8002bc6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002bca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	ea22 0000 	bic.w	r0, r2, r0
 8002bd4:	6158      	str	r0, [r3, #20]
 8002bd6:	4770      	bx	lr
 8002bd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002bdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	4310      	orrs	r0, r2
 8002be4:	6158      	str	r0, [r3, #20]
 8002be6:	4770      	bx	lr

08002be8 <RCC_AHB3PeriphResetCmd>:
 8002be8:	b941      	cbnz	r1, 8002bfc <RCC_AHB3PeriphResetCmd+0x14>
 8002bea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002bee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	ea22 0000 	bic.w	r0, r2, r0
 8002bf8:	6198      	str	r0, [r3, #24]
 8002bfa:	4770      	bx	lr
 8002bfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	4310      	orrs	r0, r2
 8002c08:	6198      	str	r0, [r3, #24]
 8002c0a:	4770      	bx	lr

08002c0c <RCC_APB1PeriphResetCmd>:
 8002c0c:	b941      	cbnz	r1, 8002c20 <RCC_APB1PeriphResetCmd+0x14>
 8002c0e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c16:	6a1a      	ldr	r2, [r3, #32]
 8002c18:	ea22 0000 	bic.w	r0, r2, r0
 8002c1c:	6218      	str	r0, [r3, #32]
 8002c1e:	4770      	bx	lr
 8002c20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c28:	6a1a      	ldr	r2, [r3, #32]
 8002c2a:	4310      	orrs	r0, r2
 8002c2c:	6218      	str	r0, [r3, #32]
 8002c2e:	4770      	bx	lr

08002c30 <RCC_APB2PeriphResetCmd>:
 8002c30:	b941      	cbnz	r1, 8002c44 <RCC_APB2PeriphResetCmd+0x14>
 8002c32:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3c:	ea22 0000 	bic.w	r0, r2, r0
 8002c40:	6258      	str	r0, [r3, #36]	; 0x24
 8002c42:	4770      	bx	lr
 8002c44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c4e:	4310      	orrs	r0, r2
 8002c50:	6258      	str	r0, [r3, #36]	; 0x24
 8002c52:	4770      	bx	lr

08002c54 <RCC_AHB1PeriphClockLPModeCmd>:
 8002c54:	b941      	cbnz	r1, 8002c68 <RCC_AHB1PeriphClockLPModeCmd+0x14>
 8002c56:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c60:	ea22 0000 	bic.w	r0, r2, r0
 8002c64:	6518      	str	r0, [r3, #80]	; 0x50
 8002c66:	4770      	bx	lr
 8002c68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c72:	4310      	orrs	r0, r2
 8002c74:	6518      	str	r0, [r3, #80]	; 0x50
 8002c76:	4770      	bx	lr

08002c78 <RCC_AHB2PeriphClockLPModeCmd>:
 8002c78:	b941      	cbnz	r1, 8002c8c <RCC_AHB2PeriphClockLPModeCmd+0x14>
 8002c7a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c84:	ea22 0000 	bic.w	r0, r2, r0
 8002c88:	6558      	str	r0, [r3, #84]	; 0x54
 8002c8a:	4770      	bx	lr
 8002c8c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c96:	4310      	orrs	r0, r2
 8002c98:	6558      	str	r0, [r3, #84]	; 0x54
 8002c9a:	4770      	bx	lr

08002c9c <RCC_AHB3PeriphClockLPModeCmd>:
 8002c9c:	b941      	cbnz	r1, 8002cb0 <RCC_AHB3PeriphClockLPModeCmd+0x14>
 8002c9e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ca2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ca6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ca8:	ea22 0000 	bic.w	r0, r2, r0
 8002cac:	6598      	str	r0, [r3, #88]	; 0x58
 8002cae:	4770      	bx	lr
 8002cb0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cba:	4310      	orrs	r0, r2
 8002cbc:	6598      	str	r0, [r3, #88]	; 0x58
 8002cbe:	4770      	bx	lr

08002cc0 <RCC_APB1PeriphClockLPModeCmd>:
 8002cc0:	b941      	cbnz	r1, 8002cd4 <RCC_APB1PeriphClockLPModeCmd+0x14>
 8002cc2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ccc:	ea22 0000 	bic.w	r0, r2, r0
 8002cd0:	6618      	str	r0, [r3, #96]	; 0x60
 8002cd2:	4770      	bx	lr
 8002cd4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cde:	4310      	orrs	r0, r2
 8002ce0:	6618      	str	r0, [r3, #96]	; 0x60
 8002ce2:	4770      	bx	lr

08002ce4 <RCC_APB2PeriphClockLPModeCmd>:
 8002ce4:	b941      	cbnz	r1, 8002cf8 <RCC_APB2PeriphClockLPModeCmd+0x14>
 8002ce6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cf0:	ea22 0000 	bic.w	r0, r2, r0
 8002cf4:	6658      	str	r0, [r3, #100]	; 0x64
 8002cf6:	4770      	bx	lr
 8002cf8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d02:	4310      	orrs	r0, r2
 8002d04:	6658      	str	r0, [r3, #100]	; 0x64
 8002d06:	4770      	bx	lr

08002d08 <RCC_ITConfig>:
 8002d08:	b941      	cbnz	r1, 8002d1c <RCC_ITConfig+0x14>
 8002d0a:	f643 030d 	movw	r3, #14349	; 0x380d
 8002d0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d12:	781a      	ldrb	r2, [r3, #0]
 8002d14:	ea22 0000 	bic.w	r0, r2, r0
 8002d18:	7018      	strb	r0, [r3, #0]
 8002d1a:	4770      	bx	lr
 8002d1c:	f643 030d 	movw	r3, #14349	; 0x380d
 8002d20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	4310      	orrs	r0, r2
 8002d28:	7018      	strb	r0, [r3, #0]
 8002d2a:	4770      	bx	lr

08002d2c <RCC_GetFlagStatus>:
 8002d2c:	0943      	lsrs	r3, r0, #5
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d00e      	beq.n	8002d50 <RCC_GetFlagStatus+0x24>
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d3c:	f000 001f 	and.w	r0, r0, #31
 8002d40:	bf0c      	ite	eq
 8002d42:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
 8002d44:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
 8002d46:	fa33 f000 	lsrs.w	r0, r3, r0
 8002d4a:	f000 0001 	and.w	r0, r0, #1
 8002d4e:	4770      	bx	lr
 8002d50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d58:	f000 001f 	and.w	r0, r0, #31
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	fa33 f000 	lsrs.w	r0, r3, r0
 8002d62:	f000 0001 	and.w	r0, r0, #1
 8002d66:	4770      	bx	lr

08002d68 <RCC_WaitForHSEStartUp>:
 8002d68:	b500      	push	{lr}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	e000      	b.n	8002d74 <RCC_WaitForHSEStartUp+0xc>
 8002d72:	b948      	cbnz	r0, 8002d88 <RCC_WaitForHSEStartUp+0x20>
 8002d74:	2031      	movs	r0, #49	; 0x31
 8002d76:	f7ff ffd9 	bl	8002d2c <RCC_GetFlagStatus>
 8002d7a:	9b01      	ldr	r3, [sp, #4]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	9b01      	ldr	r3, [sp, #4]
 8002d82:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002d86:	d1f4      	bne.n	8002d72 <RCC_WaitForHSEStartUp+0xa>
 8002d88:	2031      	movs	r0, #49	; 0x31
 8002d8a:	f7ff ffcf 	bl	8002d2c <RCC_GetFlagStatus>
 8002d8e:	3800      	subs	r0, #0
 8002d90:	bf18      	it	ne
 8002d92:	2001      	movne	r0, #1
 8002d94:	b003      	add	sp, #12
 8002d96:	bd00      	pop	{pc}

08002d98 <RCC_ClearFlag>:
 8002d98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002da0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002da2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002da6:	675a      	str	r2, [r3, #116]	; 0x74
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop

08002dac <RCC_GetITStatus>:
 8002dac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002db0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4218      	tst	r0, r3
 8002db8:	bf0c      	ite	eq
 8002dba:	2000      	moveq	r0, #0
 8002dbc:	2001      	movne	r0, #1
 8002dbe:	4770      	bx	lr

08002dc0 <RCC_ClearITPendingBit>:
 8002dc0:	f643 030e 	movw	r3, #14350	; 0x380e
 8002dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dc8:	7018      	strb	r0, [r3, #0]
 8002dca:	4770      	bx	lr

08002dcc <SYSCFG_DeInit>:
 8002dcc:	b510      	push	{r4, lr}
 8002dce:	2101      	movs	r1, #1
 8002dd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dd4:	f7ff ff2c 	bl	8002c30 <RCC_APB2PeriphResetCmd>
 8002dd8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ddc:	2100      	movs	r1, #0
 8002dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002de2:	f7ff bf25 	b.w	8002c30 <RCC_APB2PeriphResetCmd>
 8002de6:	bf00      	nop

08002de8 <SYSCFG_MemoryRemapConfig>:
 8002de8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002dec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002df0:	6018      	str	r0, [r3, #0]
 8002df2:	4770      	bx	lr

08002df4 <SYSCFG_EXTILineConfig>:
 8002df4:	b430      	push	{r4, r5}
 8002df6:	088a      	lsrs	r2, r1, #2
 8002df8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002dfc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e00:	3202      	adds	r2, #2
 8002e02:	f001 0103 	and.w	r1, r1, #3
 8002e06:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8002e0a:	0089      	lsls	r1, r1, #2
 8002e0c:	240f      	movs	r4, #15
 8002e0e:	408c      	lsls	r4, r1
 8002e10:	ea25 0404 	bic.w	r4, r5, r4
 8002e14:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8002e18:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8002e1c:	fa10 f101 	lsls.w	r1, r0, r1
 8002e20:	ea41 0404 	orr.w	r4, r1, r4
 8002e24:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8002e28:	bc30      	pop	{r4, r5}
 8002e2a:	4770      	bx	lr

08002e2c <SYSCFG_ETH_MediaInterfaceConfig>:
 8002e2c:	23dc      	movs	r3, #220	; 0xdc
 8002e2e:	f2c4 2327 	movt	r3, #16935	; 0x4227
 8002e32:	6018      	str	r0, [r3, #0]
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop

08002e38 <SYSCFG_CompensationCellCmd>:
 8002e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e3c:	f2c4 2327 	movt	r3, #16935	; 0x4227
 8002e40:	6018      	str	r0, [r3, #0]
 8002e42:	4770      	bx	lr

08002e44 <SYSCFG_GetCompensationCellStatus>:
 8002e44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002e48:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e4c:	6a18      	ldr	r0, [r3, #32]
 8002e4e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8002e52:	4770      	bx	lr

08002e54 <main>:
* @brief  Main program.
* @param  None
* @retval None
*/
int main(void)
{
 8002e54:	b530      	push	{r4, r5, lr}
    uint16_t testWord; 
    uint8_t shifter=0;

  /* Initialize LEDs on STM32F4-Discovery --------------------*/

    __IO uint32_t i = 0;  
 8002e56:	2500      	movs	r5, #0
* @brief  Main program.
* @param  None
* @retval None
*/
int main(void)
{
 8002e58:	b083      	sub	sp, #12
  /* Initialize LEDs on STM32F4-Discovery --------------------*/

    __IO uint32_t i = 0;  
    uint8_t buf[255];
    uint8_t len;
    STM_EVAL_LEDInit(LED4);
 8002e5a:	4628      	mov	r0, r5
    uint16_t testWord; 
    uint8_t shifter=0;

  /* Initialize LEDs on STM32F4-Discovery --------------------*/

    __IO uint32_t i = 0;  
 8002e5c:	9501      	str	r5, [sp, #4]
    uint8_t buf[255];
    uint8_t len;
    STM_EVAL_LEDInit(LED4);
 8002e5e:	f7fe ff47 	bl	8001cf0 <STM_EVAL_LEDInit>
    STM_EVAL_LEDInit(LED3);
 8002e62:	2001      	movs	r0, #1
 8002e64:	f7fe ff44 	bl	8001cf0 <STM_EVAL_LEDInit>

   

    // flash the LEDs in a circle to test delayMillis(uint32_t timedelay)

     STM_EVAL_LEDToggle(currentLED);
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f7fe ff87 	bl	8001d7c <STM_EVAL_LEDToggle>
 8002e6e:	2408      	movs	r4, #8

    for (idx=0;idx<8;idx++)
    {
        STM_EVAL_LEDToggle(currentLED);
 8002e70:	4628      	mov	r0, r5
        currentLED=(currentLED+1)%2;
 8002e72:	f085 0501 	eor.w	r5, r5, #1

     STM_EVAL_LEDToggle(currentLED);

    for (idx=0;idx<8;idx++)
    {
        STM_EVAL_LEDToggle(currentLED);
 8002e76:	f7fe ff81 	bl	8001d7c <STM_EVAL_LEDToggle>
        currentLED=(currentLED+1)%2;
        STM_EVAL_LEDToggle(currentLED);
        delayMillis(250);
 8002e7a:	3c01      	subs	r4, #1

    for (idx=0;idx<8;idx++)
    {
        STM_EVAL_LEDToggle(currentLED);
        currentLED=(currentLED+1)%2;
        STM_EVAL_LEDToggle(currentLED);
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	f7fe ff7d 	bl	8001d7c <STM_EVAL_LEDToggle>
        delayMillis(250);
 8002e82:	b2e4      	uxtb	r4, r4
 8002e84:	20fa      	movs	r0, #250	; 0xfa
 8002e86:	f7fe f847 	bl	8000f18 <delayMillis>

    // flash the LEDs in a circle to test delayMillis(uint32_t timedelay)

     STM_EVAL_LEDToggle(currentLED);

    for (idx=0;idx<8;idx++)
 8002e8a:	2c00      	cmp	r4, #0
 8002e8c:	d1f0      	bne.n	8002e70 <main+0x1c>
    }
    // 
    // USBD_Init(&USB_OTG_dev, USB_OTG_FS_CORE_ID, &USR_desc, &USBD_CDC_cb, &USR_cb);

    // init the printf
    init_printf(0,tft_putc);
 8002e8e:	493d      	ldr	r1, [pc, #244]	; (8002f84 <main+0x130>)
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7fd fef9 	bl	8000c88 <init_printf>
    // init_tft_printf(NULL,tft_putc);

    // Get the 32F4 ready to talk to the TFTLCD using FSMC
    initGPIO();
 8002e96:	f7fd ff47 	bl	8000d28 <initGPIO>
    initFSMC();
 8002e9a:	f7fd ffeb 	bl	8000e74 <initFSMC>
    uDelay(1000); // probably don't need this
 8002e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ea2:	f7fe f825 	bl	8000ef0 <uDelay>
    reset();
 8002ea6:	f7fe f83d 	bl	8000f24 <reset>
    initDisplay();
 8002eaa:	f7fe fea3 	bl	8001bf4 <initDisplay>
    //     setCursor(0, 0);
    //     setTextColor(CYAN);
    //     setTextSize(1);
    //     setRotation(1); 
    //     tft_printf("Please connect to virtual COM port...");
    delayMillis(2000);
 8002eae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002eb2:	f7fe f831 	bl	8000f18 <delayMillis>
    testlines(CYAN);
 8002eb6:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002eba:	f7fd fb73 	bl	80005a4 <testlines>
    delayMillis(2500);
 8002ebe:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002ec2:	f7fe f829 	bl	8000f18 <delayMillis>
    testfastlines(RED, BLUE);
 8002ec6:	211f      	movs	r1, #31
 8002ec8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002ecc:	f7fd fb42 	bl	8000554 <testfastlines>
    delayMillis(2500);
 8002ed0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002ed4:	f7fe f820 	bl	8000f18 <delayMillis>
    testdrawrects(GREEN);
 8002ed8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002edc:	f7fd fb18 	bl	8000510 <testdrawrects>
    delayMillis(2500);
 8002ee0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002ee4:	f7fe f818 	bl	8000f18 <delayMillis>
    testfillrects(YELLOW, MAGENTA);
 8002ee8:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8002eec:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002ef0:	f7fd fad6 	bl	80004a0 <testfillrects>
    delayMillis(2500);
 8002ef4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002ef8:	f7fe f80e 	bl	8000f18 <delayMillis>
    fillScreen(BLACK);
 8002efc:	4620      	mov	r0, r4
 8002efe:	f7fe fe3f 	bl	8001b80 <fillScreen>
    testfillcircles(10, MAGENTA);
 8002f02:	200a      	movs	r0, #10
 8002f04:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8002f08:	f7fd fa86 	bl	8000418 <testfillcircles>
    testdrawcircles(10, WHITE);
 8002f0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f10:	200a      	movs	r0, #10
 8002f12:	f7fd faa1 	bl	8000458 <testdrawcircles>
    delayMillis(2500); 
 8002f16:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002f1a:	f7fd fffd 	bl	8000f18 <delayMillis>
    testtriangles();
 8002f1e:	f7fd f995 	bl	800024c <testtriangles>
    delayMillis(2500); 
 8002f22:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002f26:	f7fd fff7 	bl	8000f18 <delayMillis>
    testfilltriangles();
 8002f2a:	f7fd f9d1 	bl	80002d0 <testfilltriangles>
    delayMillis(2500); 
 8002f2e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002f32:	f7fd fff1 	bl	8000f18 <delayMillis>
    testRoundRect();
 8002f36:	f7fd f95d 	bl	80001f4 <testRoundRect>
    delayMillis(2500); 
 8002f3a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002f3e:	f7fd ffeb 	bl	8000f18 <delayMillis>
    testFillRoundRect();
 8002f42:	f7fd f929 	bl	8000198 <testFillRoundRect>
    delayMillis(2500); 
 8002f46:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002f4a:	f7fd ffe5 	bl	8000f18 <delayMillis>
    fillScreen(GREEN);
 8002f4e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002f52:	f7fe fe15 	bl	8001b80 <fillScreen>
    delayMillis(2500); 
 8002f56:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002f5a:	f7fd ffdd 	bl	8000f18 <delayMillis>
    // } Led_TypeDef;
    while(1)
    {
        for (idx=0;idx<8;idx++)
        {
            setRotation(idx%4); 
 8002f5e:	f004 0003 	and.w	r0, r4, #3
 8002f62:	f7fe fe21 	bl	8001ba8 <setRotation>
    // LED5 = 2,
    // LED6 = 3
    // } Led_TypeDef;
    while(1)
    {
        for (idx=0;idx<8;idx++)
 8002f66:	3401      	adds	r4, #1
        {
            setRotation(idx%4); 
            testtext(RED);
 8002f68:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002f6c:	f7fd fa26 	bl	80003bc <testtext>
    // LED5 = 2,
    // LED6 = 3
    // } Led_TypeDef;
    while(1)
    {
        for (idx=0;idx<8;idx++)
 8002f70:	b2e4      	uxtb	r4, r4
        {
            setRotation(idx%4); 
            testtext(RED);
            delayMillis(1500); 
 8002f72:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002f76:	f7fd ffcf 	bl	8000f18 <delayMillis>
    // LED5 = 2,
    // LED6 = 3
    // } Led_TypeDef;
    while(1)
    {
        for (idx=0;idx<8;idx++)
 8002f7a:	2c07      	cmp	r4, #7
 8002f7c:	bf88      	it	hi
 8002f7e:	2400      	movhi	r4, #0
 8002f80:	e7ed      	b.n	8002f5e <main+0x10a>
 8002f82:	bf00      	nop
 8002f84:	0800163d 	.word	0x0800163d

08002f88 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f8a:	f000 b804 	b.w	8002f96 <LoopCopyDataInit>

08002f8e <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 8002f90:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f92:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f94:	3104      	adds	r1, #4

08002f96 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f96:	480b      	ldr	r0, [pc, #44]	; (8002fc4 <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 8002f9a:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f9c:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f9e:	f4ff aff6 	bcc.w	8002f8e <CopyDataInit>
  ldr  r2, =_sbss
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 8002fa4:	f000 b803 	b.w	8002fae <LoopFillZerobss>

08002fa8 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fa8:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002faa:	f842 3b04 	str.w	r3, [r2], #4

08002fae <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <LoopFillZerobss+0x22>)
  cmp  r2, r3
 8002fb0:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fb2:	f4ff aff9 	bcc.w	8002fa8 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fb6:	f7fd fbfb 	bl	80007b0 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8002fba:	f7ff ff4b 	bl	8002e54 <main>
  bx  lr    
 8002fbe:	4770      	bx	lr
 8002fc0:	08003658 	.word	0x08003658
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	20000038 	.word	0x20000038
 8002fcc:	20000038 	.word	0x20000038
 8002fd0:	20000078 	.word	0x20000078

08002fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fd4:	f7ff bffe 	b.w	8002fd4 <ADC_IRQHandler>

08002fd8 <font>:
 8002fd8:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 8002fe8:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 8002ff8:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 8003008:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 8003018:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 8003028:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 8003038:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 8003048:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 8003058:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 8003068:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 8003078:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 8003088:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 8003098:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80030a8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80030b8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80030c8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80030d8:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80030e8:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80030f8:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 8003108:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 8003118:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 8003128:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 8003138:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 8003148:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 8003158:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 8003168:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 8003178:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 8003188:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 8003198:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80031a8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80031b8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80031c8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80031d8:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80031e8:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80031f8:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 8003208:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 8003218:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 8003228:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 8003238:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 8003248:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 8003258:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 8003268:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
 8003278:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 8003288:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 8003298:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
 80032a8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80032b8:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
 80032c8:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
 80032d8:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
 80032e8:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80032f8:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 8003308:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 8003318:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 8003328:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 8003338:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 8003348:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
 8003358:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
 8003368:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
 8003378:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
 8003388:	141f 1414 001f 1010 f010 0000 0000 101f     ................
 8003398:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
 80033a8:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
 80033b8:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
 80033c8:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
 80033d8:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
 80033e8:	1414 f414 1014 f010 f010 0000 101f 001f     ................
 80033f8:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
 8003408:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
 8003418:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
 8003428:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
 8003438:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
 8003448:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
 8003458:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
 8003468:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
 8003478:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
 8003488:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
 8003498:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
 80034a8:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
 80034b8:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
 80034c8:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

080034d4 <_regValues>:
 80034d4:	0000 0001 00ff 0032 0001 0100 0002 0700     ......2.........
 80034e4:	0003 1030 0004 0000 0008 0202 0009 0000     ..0.............
 80034f4:	000a 0000 000c 0000 000d 0000 000f 0000     ................
 8003504:	0010 0000 0011 0007 0012 0000 0013 0000     ................
 8003514:	00ff 00c8 0010 1690 0011 0227 00ff 0032     ..........'...2.
 8003524:	0012 001a 00ff 0032 0013 1800 0029 002a     ......2.....).*.
 8003534:	00ff 0032 0030 0000 0031 0000 0032 0000     ..2.0...1...2...
 8003544:	0035 0206 0036 0808 0037 0007 0038 0201     5...6...7...8...
 8003554:	0039 0000 003c 0000 003d 0000 0020 0000     9...<...=... ...
 8003564:	0021 0000 0050 0000 0051 00ef 0052 0000     !...P...Q...R...
 8003574:	0053 013f 0060 a700 0061 0003 006a 0000     S.?.`...a...j...
 8003584:	0090 0010 0092 0000 0093 0003 0095 1100     ................
 8003594:	0097 0000 0098 0000 0007 0133               ..........3.

080035a0 <GPIO_CLK>:
 80035a0:	0008 0000 0008 0000 0008 0000 0008 0000     ................

080035b0 <GPIO_PIN>:
 80035b0:	1000 2000 4000 8000                         ... .@..

080035b8 <BUTTON_IRQn>:
 80035b8:	0006 0000                                   ....

080035bc <BUTTON_PIN_SOURCE>:
 80035bc:	0000 0000                                   ....

080035c0 <BUTTON_PORT_SOURCE>:
 80035c0:	0000 0000                                   ....

080035c4 <BUTTON_EXTI_LINE>:
 80035c4:	0001 0000                                   ....

080035c8 <BUTTON_CLK>:
 80035c8:	0001 0000                                   ....

080035cc <BUTTON_PIN>:
 80035cc:	0001 0000 6548 6c6c 206f 6f57 6c72 2164     ....Hello World!
 80035dc:	000a 0000 3231 3433 352e 0a36 0000 0000     ....1234.56.....
 80035ec:	7830 5825 000a 0000 6552 6573 2074 4654     0x%X....Reset TF
 80035fc:	2054 202d 0d0a 0000 4654 4c54 4443 4420     T - ....TFTLCD D
 800360c:	6972 6576 2072 4449 203a 7830 3025 5834     river ID: 0x%04X
 800361c:	0a0d 0000 6f46 6e75 2064 4c49 3949 3233     ....Found ILI932
 800362c:	0035 0000 6f46 6e75 2064 4c49 3949 3233     5...Found ILI932
 800363c:	0d38 000a 6e55 6e6b 776f 206e 7264 7669     8...Unknown driv
 800364c:	7265 6320 6968 0d70 000a 0000               er chip.....
